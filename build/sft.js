!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=14)}([function(e,t){e.exports=React},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowField=t.eContentType=void 0;var o,r=n(2),i=n(5);!function(e){e[e.unknown=0]="unknown",e[e.ContentString=1]="ContentString",e[e.ContentNumber=2]="ContentNumber",e[e.ContentObject=3]="ContentObject",e[e.ContentBoolean=4]="ContentBoolean",e[e.ContentList=5]="ContentList",e[e.ContentPassword=6]="ContentPassword",e[e.ContentContent=7]="ContentContent",e[e.ContentDateTime=8]="ContentDateTime",e[e.ContentEncrypted=9]="ContentEncrypted"}(o=t.eContentType||(t.eContentType={}));var a=function(){function e(e){if(this.ContentType=o.unknown,this.DeveloperName="",this.TypeElementDeveloperName="",this.TypeElementId="",this.TypeElementPropertyDeveloperName="",this.TypeElementPropertyId="",this.ValueElementId="",e)switch(this.ContentType=o[e.contentType],this.DeveloperName=e.developerName,this.TypeElementDeveloperName=e.typeElementDeveloperName,this.TypeElementId=e.typeElementId,this.TypeElementPropertyDeveloperName=e.typeElementPropertyDeveloperName,this.TypeElementPropertyId=e.typeElementPropertyId,this.ValueElementId=e.valueElementId,this.ContentType){case o.ContentObject:this.Value=e.objectData?new r.FlowObjectData(e.objectData):void 0;break;case o.ContentList:this.Value=e.objectData&&e.objectData[0]?new i.FlowObjectDataArray(e.objectData):new i.FlowObjectDataArray([]);break;default:this.Value=e.contentValue}}return Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementDeveloperName",{get:function(){return this.TypeElementDeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyDeveloperName",{get:function(){return this.TypeElementPropertyDeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"valueElementId",{get:function(){return this.ValueElementId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},set:function(e){this.Value=e},enumerable:!1,configurable:!0}),e.prototype.iFlowField=function(){var e="",t=[];switch(this.ContentType){case o.ContentObject:var n=this.Value;t.push(n.iObjectData());break;case o.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value?this.Value:""}return{contentType:o[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementDeveloperName:this.TypeElementDeveloperName,typeElementId:this.TypeElementId,typeElementPropertyDeveloperName:this.TypeElementPropertyDeveloperName,typeElementPropertyId:this.TypeElementPropertyId,valueElementId:this.ValueElementId}},e}();t.FlowField=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowObjectData=void 0;var o=n(10),r=function(){function e(e){if(this.DeveloperName="",this.ExternalId="",this.InternalId="",this.IsSelected=!1,this.Order=0,this.TypeElementId="",this.Properties={},e&&e[0]){var t=e[0];if(this.DeveloperName=t.developerName,this.InternalId=t.internalId,this.ExternalId=t.externalId,this.Order=t.order,this.IsSelected=t.isSelected,this.TypeElementId=t.typeElementId,t.properties&&t.properties.length>0)for(var n=0,r=t.properties;n<r.length;n++){var i=r[n];this.Properties[i.developerName]=new o.FlowObjectDataProperty(i)}}else console.log("null data")}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"externalId",{get:function(){return this.ExternalId},set:function(e){this.ExternalId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"internalId",{get:function(){return this.InternalId},set:function(e){this.InternalId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isSelected",{get:function(){return this.IsSelected},set:function(e){this.IsSelected=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},set:function(e){this.Order=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"properties",{get:function(){return this.Properties},enumerable:!1,configurable:!0}),e.newInstance=function(e){return new this([{developerName:e,externalId:"",internalId:manywho.utils.guid(),isSelected:!1,order:0,properties:[],typeElementId:""}])},e.prototype.addProperty=function(e){this.Properties[e.developerName]=e},e.prototype.removeProperty=function(e){delete this.Properties[e]},e.prototype.clone=function(t){var n=this,o=e.newInstance(t||this.DeveloperName);return Object.keys(this.properties).forEach((function(e){var t=n.properties[e].clone();o.properties[e]=t})),o},e.prototype.iObjectData=function(e){for(var t=[],n=0,o=Object.keys(this.properties);n<o.length;n++){var r=o[n];t.push(this.properties[r].iFlowObjectDataProperty())}return{developerName:this.developerName,externalId:this.externalId,internalId:this.internalId,isSelected:e||this.isSelected,order:this.order,properties:t,typeElementId:this.TypeElementId}},e.prototype.iFlowObjectDataArray=function(e){var t=[];return t.push(this.iObjectData(e)),t},e}();t.FlowObjectData=r},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||o(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),r(n(16),t),r(n(20),t),r(n(21),t),r(n(23),t),r(n(12),t),r(n(7),t),r(n(26),t),r(n(4),t),r(n(6),t),r(n(9),t),r(n(1),t),r(n(2),t),r(n(5),t),r(n(10),t),r(n(11),t),r(n(28),t)},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowBaseComponent=t.eLoadingState=void 0;var s=n(0);n(17);var l,c=n(6),u=n(9),d=n(1),p=n(2),h=n(5),f=n(11),m=n(18);!function(e){e[e.ready=0]="ready",e[e.loading=1]="loading",e[e.saving=2]="saving",e[e.moving=3]="moving",e[e.inititializing=4]="inititializing",e[e.inititialized=5]="inititialized",e[e.mounting=6]="mounting",e[e.mounted=7]="mounted"}(l=t.eLoadingState||(t.eLoadingState={}));var y=function(e){function t(t){var n=e.call(this,t)||this;n.Fields={},n.Attributes={},n.Outcomes={},n.sendCollaborationMessage=m(n._sendCollaborationMessage,100,null),n.Fields={},n.LoadingState=l.inititializing,n.loadAllValues=n.loadAllValues.bind(n),n.dontLoadAllValues=n.dontLoadAllValues.bind(n),n.updateValues=n.updateValues.bind(n),n.triggerOutcome=n.triggerOutcome.bind(n),n.ComponentId=n.props.id,n.ParentId=n.props.parentId,n.FlowKey=n.props.flowKey,n.Attributes={},n.loadModel=n.loadModel.bind(n),n.loadAttributes=n.loadAttributes.bind(n),n.loadOutcomes=n.loadOutcomes.bind(n),n.receiveMessage=n.receiveMessage.bind(n),n.getStateValue=n.getStateValue.bind(n),n.setStateValue=n.setStateValue.bind(n),n.getStateValueType=n.getStateValueType.bind(n),n.sendCollaborationMessage=n.sendCollaborationMessage.bind(n),n.onBeforeSend=n.onBeforeSend.bind(n),n.onDone=n.onDone.bind(n),n.calculateValue=n.calculateValue.bind(n),window.addEventListener("message",n.receiveMessage,!1),n.loadModel(),n.loadAttributes(),n.loadOutcomes();var o="";return!manywho.settings.global("platform.uri")&&manywho.settings.global("platform.uri").length<=0&&(o=window.location.origin||"https://flow.manywho.com"),n.StateId=manywho.utils.extractStateId(n.props.flowKey),n.TenantId=manywho.utils.extractTenantId(n.props.flowKey),n.invokeurl=o+"/api/run/1/state/"+n.StateId,n.url=o+"/api/run/1/state/"+n.StateId+"/values",n.userurl=o+"/api/run/1/state/"+n.StateId+"/values/03dc41dd-1c6b-4b33-bf61-cbd1d0778fff",n.valueurl=o+"/api/run/1/state/"+n.StateId+"/values/name",n.LoadingState=l.inititialized,n}return r(t,e),Object.defineProperty(t.prototype,"tenantId",{get:function(){return this.TenantId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"stateId",{get:function(){return this.StateId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"flowKey",{get:function(){return this.FlowKey},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"componentId",{get:function(){return this.ComponentId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"parentId",{get:function(){return this.ParentId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isReady",{get:function(){return this.LoadingState===l.ready},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"loadingState",{get:function(){return this.LoadingState},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"outcomes",{get:function(){return this.Outcomes},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fields",{get:function(){return this.Fields},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"model",{get:function(){return this.Model},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"user",{get:function(){return this.User},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"joinURI",{get:function(){return window.location.href},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isDesignTime",{get:function(){return this.IsDesignTime},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"authenticationToken",{get:function(){return JSON.parse(sessionStorage.flowUser).authenticationToken},enumerable:!1,configurable:!0}),t.prototype.getAttribute=function(e,t){return this.attributes[e]?this.attributes[e].value:t||""},t.prototype.onBeforeSend=function(e,t){if(t){var n=this.getOutcomeById(t.mapElementInvokeRequest.selectedOutcomeId),o=manywho.eventManager.outcomeBeingTriggered;n&&(o&&o.id===n.id||(manywho.eventManager.outcomeBeingTriggered=n))}else manywho.eventManager.outcomeBeingTriggered=void 0},t.prototype.calculateValue=function(e){if(e.startsWith("{{")&&e.endsWith("}}")){for(var t=e.replace("{{",""),n=void 0,o="",r=(t=t.replace("}}","")).split("."),i=0;i<r.length;i++)if(0===i)(n=this.fields[r[i]])?n.ContentType!==d.eContentType.ContentObject&&n.ContentType!==d.eContentType.ContentList&&(o=n.value):(console.log("The Value ["+r[i]+"] was not found, have you included it in your flow"),o=e);else if(n){var a=n.value.properties[r[i]];a?a.contentType===d.eContentType.ContentObject||a.contentType===d.eContentType.ContentList?n=n.value.properties[r[i]].value:o=n.value.properties[r[i]].value:o=e}else o=e;return o}return e},t.prototype.onDone=function(e,t){return i(this,void 0,void 0,(function(){var t,n=this;return a(this,(function(o){switch(o.label){case 0:return"FORWARD"!==e.invokeType?[3,2]:(manywho.model.parseEngineResponse(e,this.flowKey),this.loadModel(),this.loadAttributes(),this.loadOutcomes(),[4,this.preserveState()]);case 1:o.sent(),o.label=2;case 2:return manywho.eventManager.outcomeBeingTriggered&&manywho.eventManager.outcomeBeingTriggered.attributes&&(t=manywho.eventManager.outcomeBeingTriggered,Object.keys(manywho.eventManager.outcomeBeingTriggered.attributes).forEach((function(e){return i(n,void 0,void 0,(function(){var n,o,r;return a(this,(function(i){switch(i.label){case 0:switch(n=manywho.eventManager.outcomeBeingTriggered.attributes[e],n.name.toLowerCase()){case"autoclose":return[3,1];case"autoopen":return[3,2];case"autonav":case"automove":return[3,6];case"autoprint":return[3,10]}return[3,11];case 1:return"true"===n.value.toLowerCase()&&window.close(),[3,11];case 2:return(o=t.attributes.AutoOpenUrl||void 0)&&o.value.length>0?[4,this.calculateValue(o.value)]:[3,4];case 3:return r=i.sent(),window.open(r,"_blank"),[3,5];case 4:alert("No 'AutoOpenUrl' specified in the outcome's attributes"),i.label=5;case 5:return[3,11];case 6:return(o=t.attributes.AutoNavUrl||void 0)&&o.value.length>0?[4,this.calculateValue(o.value)]:[3,8];case 7:return r=i.sent(),window.open(r,"_blank"),[3,9];case 8:alert("No 'AutoNavUrl' specified in the outcome's attributes"),i.label=9;case 9:return[3,11];case 10:return window.print(),[3,11];case 11:return[2]}}))}))}))),this.LoadingState=l.ready,manywho.eventManager.outcomeBeingTriggered=void 0,[2]}}))}))},t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return this.LoadingState=l.mounting,manywho.eventManager.addDoneListener(this.onDone,this.componentId+"_core"),manywho.eventManager.addBeforeSendListener(this.onBeforeSend,this.componentId+"_core"),[4,this.preserveState()];case 1:return e.sent(),this.LoadingState=l.mounted,manywho.utils.removeLoadingIndicator("loader"),[2,Promise.resolve()]}}))}))},t.prototype.preserveState=function(){return i(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return this.LoadingState=l.mounting,[4,this.setStateValue(this.getStateValue())];case 1:return e.sent(),this.LoadingState=l.mounted,[2]}}))}))},t.prototype.componentWillUnmount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(e){return manywho.eventManager.removeBeforeSendListener(this.componentId+"_core"),manywho.eventManager.removeDoneListener(this.componentId+"_core"),[2,Promise.resolve()]}))}))},t.prototype.loadOutcome=function(e){if(e){var t=manywho.model.getOutcome(e,this.props.flowKey);if(t)return this.Outcomes[t.developerName]=new f.FlowOutcome(t),this.Outcomes[t.developerName]}},t.prototype.loadOutcomes=function(){this.Outcomes={};for(var e=manywho.model.getOutcomes(this.props.id,this.props.flowKey),t=0,n=e;t<n.length;t++){var o=n[t];this.Outcomes[o.developerName]=new f.FlowOutcome(o)}for(var r=0,i=e=manywho.model.getOutcomes("",this.props.flowKey);r<i.length;r++){o=i[r];this.Outcomes[o.developerName]=new f.FlowOutcome(o)}},t.prototype.getOutcomeById=function(e){var t,n=this;return Object.keys(this.outcomes).forEach((function(o){n.outcomes[o].id===e&&(t=n.outcomes[o])})),t||(t=this.loadOutcome(e)),t},t.prototype.loadAttributes=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(e){var t=e.attributes;if(t)for(var n=0,o=Object.keys(t);n<o.length;n++){var r=o[n];this.Attributes[r]=new c.FlowAttribute(r,t[r])}}},t.prototype.loadModel=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(e){this.Model={contentType:e.contentType,content:e.content,dataSource:new h.FlowObjectDataArray([]),developerName:e.developerName,displayColumns:[],enabled:e.isEnabled,height:e.height,helpInfo:e.helpInfo,hintInfo:e.hintValue,joinUri:this.joinURI,label:e.label,maxSize:e.maxSize,multiSelect:e.isMultiSelect,readOnly:!e.isEditable,required:e.isRequired,size:e.size,validationMessage:e.validationMessage,visible:e.isVisible,width:e.width};var t=e.objectData;if(t)for(var n=0,o=t;n<o.length;n++){var r=o[n];this.Model.dataSource.addItem(new p.FlowObjectData([r]))}var i=e.columns;if(i)for(var a=0,s=i;a<s.length;a++){var l=s[a];this.Model.displayColumns.push(new u.FlowDisplayColumn(l))}}},t.prototype.loadValue=function(e){return i(this,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:return this.LoadingState=l.loading,[4,this.callRequestOld(this.valueurl+"/"+e,"GET",{})];case 1:return(t=n.sent())&&(this.Fields[t.developerName]=new d.FlowField(t)),this.LoadingState=l.ready,[2,this.Fields[t.developerName]]}}))}))},t.prototype.getResultBodyText=function(e){return i(this,void 0,void 0,(function(){return a(this,(function(t){return[2,e.text().then((function(e){return e.startsWith('"')&&(e=e.substr(1)),e.endsWith('"')&&(e=e.substr(0,e.length-1)),e}))]}))}))},t.prototype.callRequest=function(e,t,n){return i(this,void 0,void 0,(function(){var o,r,s=this;return a(this,(function(l){switch(l.label){case 0:return o=[],(r={}).method=t,r.headers={"Content-Type":"application/json",Authorization:this.authenticationToken,ManyWhoTenant:this.tenantId},r.credentials="same-origin","POST"!==t&&"PUT"!==t||(r.body=n),[4,fetch(e,r).then((function(e){return i(s,void 0,void 0,(function(){var t,n;return a(this,(function(r){switch(r.label){case 0:return 200!==e.status?[3,2]:[4,this.getResultBodyText(e)];case 1:return t=r.sent(),JSON.parse(t).forEach((function(e){o.push(e)})),console.log("Loaded Values"),[2,o];case 2:return[4,this.getResultBodyText(e)];case 3:return n=r.sent(),console.log("Can't load values - "+n),[2,o]}}))}))}))];case 1:return l.sent(),[2]}}))}))},t.prototype.callRequestOld=function(e,t,n){return i(this,void 0,void 0,(function(){return a(this,(function(o){switch(o.label){case 0:return[4,manywho.connection.request(this,null,e,t,this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),n)];case 1:return[2,o.sent()]}}))}))},t.prototype.loadAllValues=function(){return i(this,void 0,void 0,(function(){var e,t,n,o=this;return a(this,(function(r){switch(r.label){case 0:return this.LoadingState=l.loading,this.Fields={},[4,this.callRequestOld(this.url,"GET",{})];case 1:return(r.sent()||[]).map((function(e){e&&(o.Fields[e.developerName]=new d.FlowField(e))})),[4,this.callRequestOld(this.userurl,"GET",{})];case 2:return(e=r.sent())&&(t=new d.FlowField(e),n=t.value.properties,this.User={directoryId:n["Directory Id"].value,directoryName:n["Directory Name"].value,email:n.Email.value||"mark",firstName:n["First Name"].value,groupId:n["Primary Group Id"].value,groupName:n["Primary Group Name"].value,id:n["User ID"].value,ipAddress:n["IP Address"].value,language:n.Language.value,lastName:n["Last Name"].value,location:n.Location.value,roleId:n["Role Id"].value,roleName:n["Role Name"].value,status:n.Status.value,userName:n.Username.value}),this.LoadingState=l.ready,[2,Promise.resolve()]}}))}))},t.prototype.dontLoadAllValues=function(){return i(this,void 0,void 0,(function(){var e,t,n;return a(this,(function(o){switch(o.label){case 0:return this.LoadingState=l.loading,[4,this.callRequestOld(this.userurl,"GET",{})];case 1:return(e=o.sent())&&(t=new d.FlowField(e),n=t.value.properties,this.User={directoryId:n["Directory Id"].value,directoryName:n["Directory Name"].value,email:n.Email.value||"mark",firstName:n["First Name"].value,groupId:n["Primary Group Id"].value,groupName:n["Primary Group Name"].value,id:n["User ID"].value,ipAddress:n["IP Address"].value,language:n.Language.value,lastName:n["Last Name"].value,location:n.Location.value,roleId:n["Role Id"].value,roleName:n["Role Name"].value,status:n.Status.value,userName:n.Username.value}),this.LoadingState=l.ready,[2,Promise.resolve()]}}))}))},t.prototype.getStateValue=function(){var e=manywho.state.getComponent(this.componentId,this.flowKey)||{},t=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(t)switch(t.contentType){case"ContentObject":return e.objectData&&e.objectData[0]&&e.objectData[0].properties.length>0?new p.FlowObjectData([e.objectData[0]]):(n=this.model.dataSource.getSelectedItems()).items.length>0?n.items[0]:void 0;case"ContentList":return e.objectData&&e.objectData.length>0?new h.FlowObjectDataArray(e.objectData):(n=this.model.dataSource.getSelectedItems()).items.length>0?n:void 0;var n;default:return e.contentValue?e.contentValue:""}},t.prototype.getStateValueType=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey).contentType;return d.eContentType[e]},t.prototype.setStateValue=function(e,t){return i(this,void 0,void 0,(function(){var t,n,o,r,i;return a(this,(function(a){if(this.LoadingState===l.mounting||this.LoadingState===l.ready){if(t=this.loadingState,this.LoadingState=l.saving,n=manywho.model.getComponent(this.ComponentId,this.FlowKey),manywho.state.getComponent(this.componentId,this.flowKey)||{},o=void 0,n)switch(n.contentType){case"ContentObject":r=null,e&&(e.isSelected=!0,r=e.iFlowObjectDataArray(),r=JSON.parse(JSON.stringify(r))),o={objectData:r},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentList":i=null,e&&(i=e.iFlowObjectDataArray(),i=JSON.parse(JSON.stringify(i))),o={objectData:i},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentDate":o={contentValue:e.toISOString()},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;default:o={contentValue:e},manywho.state.setComponent(this.componentId,o,this.flowKey,!0)}this.LoadingState=t,manywho.collaboration.isInitialized(this.flowKey)}return[2,Promise.resolve()]}))}))},t.prototype.eventHandled=function(e,t){console.log("ping")},t.prototype.updateValues=function(e){return i(this,void 0,void 0,(function(){var t,n,o,r,i=this;return a(this,(function(a){switch(a.label){case 0:if(this.LoadingState=l.saving,t=[],e.constructor.name===d.FlowField.name)t.push(e.iFlowField());else for(n=0,o=e;n<o.length;n++)r=o[n],t.push(r.iFlowField());return[4,this.callRequestOld(this.url,"POST",t)];case 1:return a.sent(),manywho.collaboration.isInitialized(this.flowKey)&&t.forEach((function(e){manywho.collaboration.push(i.ComponentId,{message:{action:"REFRESH_FIELD",fieldName:e.developerName}},i.flowKey)})),this.LoadingState=l.ready,[2,Promise.resolve()]}}))}))},t.prototype._sendCollaborationMessage=function(e){manywho.collaboration.isInitialized(this.flowKey)&&manywho.collaboration.push(this.ComponentId,{message:e},this.flowKey)},t.prototype.triggerOutcome=function(e,t){return i(this,void 0,void 0,(function(){var n;return a(this,(function(o){switch(o.label){case 0:return this.LoadingState=l.moving,t||(t=[]),this.outcomes[e]&&(n=this.outcomes[e].iFlowOutcome()),n?[4,manywho.component.onOutcome(n,t,this.FlowKey)]:[3,2];case 1:return o.sent(),[3,3];case 2:this.log("Could not find outcome "+e),o.label=3;case 3:return[2,Promise.resolve()]}}))}))},t.prototype.moveTo=function(e,t){return i(this,void 0,void 0,(function(){var t,n,o,r;return a(this,(function(i){switch(i.label){case 0:return this.LoadingState=l.moving,"",t="/api/run/1/state/"+this.stateId,n=manywho.state.getState(this.flowKey),(o={}).currentMapElementId=n.currentMapElementId,o.invokeType="NAVIGATE",o.mapElementInvokeRequest={},o.mapElementInvokeRequest.selectedOutcomeId=null,o.pageRequest={pageComponentInputResponses:[{pageComponentId:this.componentId,contentValue:null,objectData:null}]},o.selectedMapElementId=e,o.stateId=this.stateId,o.stateToken=n.token,[4,manywho.connection.request(this,null,t,"POST",this.tenantId,this.stateId,manywho.state.getAuthenticationToken(this.flowKey),o)];case 1:return r=i.sent(),manywho.model.parseEngineResponse(r,this.flowKey),[4,manywho.engine.render(this.flowKey)];case 2:return i.sent(),[2,Promise.resolve()]}}))}))},t.prototype.log=function(e){var t=new Date,n="["+[("0"+t.getHours()).slice(-2),("0"+t.getMinutes()).slice(-2),("0"+t.getSeconds()).slice(-2)].join(":")+"] ";console.log(n+e)},t.prototype.launchFlowSilent=function(e,t,n,o){return i(this,void 0,void 0,(function(){var e,n,r;return a(this,(function(i){return e=manywho.settings.global("platform.uri")||"https://flow.manywho.com",n=e+"/api/run/1/state",(r={}).id=t,r.developerName=null,r.inputs=o?o.iFlowObjectDataArray():null,manywho.connection.request(this,"",n,"POST",this.TenantId,"",manywho.state.getAuthenticationToken(this.FlowKey),r),[2,Promise.resolve()]}))}))},t.prototype.launchFlowTab=function(e,t,n,o){return i(this,void 0,void 0,(function(){var o,r;return a(this,(function(i){return o=manywho.settings.global("platform.uri")||"https://flow.boomi.com",r=o+"/"+e+"/play/"+n+"?flow-id="+t,window.open(r,"_new"),[2,Promise.resolve()]}))}))},t.prototype.componentDidUpdate=function(){return i(this,void 0,void 0,(function(){var e,t;return a(this,(function(n){switch(n.label){case 0:if(!(e=manywho.state.getComponent(this.componentId,this.flowKey)))return[3,7];if(t=e.message,this.loadModel(),t&&manywho.state.setComponent(this.componentId,{message:{}},this.flowKey,!1),!t||!t.action)return[3,6];switch(t.action.toUpperCase()){case"REFRESH_FIELDS":return[3,1];case"REFRESH_FIELD":return[3,3]}return[3,5];case 1:return[4,this.loadAllValues()];case 2:return n.sent(),[3,6];case 3:return[4,this.loadValue(t.fieldName)];case 4:return n.sent(),[3,6];case 5:return[3,6];case 6:return[2,t];case 7:return[2]}}))}))},t.prototype.receiveMessage=function(e){return i(this,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:if(!e.data)return[3,9];if(!(t=e.data).action)return[3,9];switch(t.action.toUpperCase()){case"OUTCOME":return[3,1];case"REFRESH_FIELDS":return[3,3];case"REFRESH_FIELD":return[3,5]}return[3,7];case 1:return[4,this.triggerOutcome(t.data)];case 2:return n.sent(),[3,9];case 3:return[4,this.loadAllValues()];case 4:return n.sent(),[3,9];case 5:return[4,this.loadValue(t.fieldName)];case 6:return n.sent(),[3,9];case 7:return[4,this.handleMessage(t)];case 8:return n.sent(),[3,9];case 9:return[2,Promise.resolve()]}}))}))},t.prototype.handleMessage=function(e){return i(this,void 0,void 0,(function(){return a(this,(function(e){return[2,Promise.resolve()]}))}))},t}(s.Component);t.FlowBaseComponent=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowObjectDataArray=t.eSortOrder=void 0;var o,r=n(1),i=n(2);!function(e){e[e.ascending=0]="ascending",e[e.descending=1]="descending"}(o=t.eSortOrder||(t.eSortOrder={}));var a=function(){function e(e){this.Items=[];for(var t=0,n=e||[];t<n.length;t++){var o=n[t];this.Items.push(new i.FlowObjectData([o]))}}return Object.defineProperty(e.prototype,"items",{get:function(){return this.Items},enumerable:!1,configurable:!0}),e.prototype.sort=function(e,t){return e===o.ascending?t?this.Items.sort((function(e,n){var o,i;switch(e.properties[t].contentType){case r.eContentType.ContentNumber:o=parseFloat(e.properties[t].value),i=parseFloat(n.properties[t].value);break;case r.eContentType.ContentDateTime:o=new Date(e.properties[t].value),i=new Date(n.properties[t].value);break;default:o=e.properties[t].value,i=n.properties[t].value}switch(!0){case o<i:return-1;case o>i:return 1;default:return 0}})):this.Items.sort((function(e,t){return e.order-t.order})):t?this.Items.sort((function(e,n){if(!(e&&n&&e.properties&&n.properties&&e.properties[t]&&n.properties[t]&&e.properties[t].value&&n.properties[t].value))return 0;if(!e.properties[t])return 0;switch(!0){case e.properties[t].value<n.properties[t].value:return 1;case e.properties[t].value>n.properties[t].value:return-1;default:return 0}})):this.Items.sort((function(e,t){return e.order-t.order}))},e.prototype.addItem=function(e){this.Items.push(e)},e.prototype.clearItems=function(){this.Items=[]},e.prototype.clone=function(){var t=new e;return this.items.forEach((function(e){t.addItem(e.clone())})),t},e.prototype.iFlowObjectDataArray=function(e){for(var t=[],n=0,o=this.Items;n<o.length;n++){var r=o[n];t.push(r.iObjectData(e))}return t},e.prototype.getItemWithPropertyName=function(e,t,n){for(var o=0,i=this.Items;o<i.length;o++){var a=i[o];if(a.properties[e]&&null!=a.properties[e].value){var s=a.properties[e].value,l=t;switch(a.properties[e].contentType){case r.eContentType.ContentString:s=s.toLowerCase(),l=l.toLowerCase();break;case r.eContentType.ContentNumber:s=s,l=parseFloat(l.toLowerCase());break;case r.eContentType.ContentBoolean:s=s,l="true"===new String(l).toLowerCase()}if(s===l)return a.properties[n]}}return null},e.prototype.getSelectedItems=function(){for(var t=new e,n=0,o=this.Items;n<o.length;n++){var r=o[n];!0===r.isSelected&&t.addItem(r)}return t},e.prototype.getItemWithPropertyValue=function(e,t){for(var n=0,o=this.Items;n<o.length;n++){var i=o[n];if(i.properties[e]&&null!=i.properties[e].value){var a=i.properties[e].value,s=t;switch(i.properties[e].contentType){case r.eContentType.ContentString:a=a.toLowerCase(),s=new String(s).toLowerCase();break;case r.eContentType.ContentNumber:a=a,s=parseFloat(new String(s).toLowerCase());break;case r.eContentType.ContentBoolean:a=a,s="true"===new String(s).toLowerCase()}if(a===s)return i}}},e.prototype.getIndexOfItemWithPropertyValue=function(e,t){for(var n=0;n<this.items.length;n++){var o=this.items[n];if(o.properties[e]&&null!=o.properties[e].value){var i=o.properties[e].value,a=t;switch(o.properties[e].contentType){case r.eContentType.ContentString:i=i.toLowerCase(),a=a.toLowerCase();break;case r.eContentType.ContentNumber:i=i,a=parseFloat(new String(a).toLowerCase());break;case r.eContentType.ContentBoolean:i=i,a="true"===new String(a).toLowerCase()}if(i===a)return n}}return-1},e.prototype.removeItemWithPropertyValue=function(e,t){for(var n=0,o=0;o<this.items.length;o++){var i=this.items[o];if(i.properties[e]&&null!=i.properties[e].value){var a=i.properties[e].value,s=t;switch(i.properties[e].contentType){case r.eContentType.ContentString:a=a.toLowerCase(),s=s.toLowerCase();break;case r.eContentType.ContentNumber:a=a,s=parseFloat(new String(s).toLowerCase());break;case r.eContentType.ContentBoolean:a=a,s="true"===new String(s).toLowerCase()}a===s&&(this.items.splice(o,1),n++)}}return n},e.prototype.removeItemAtIndex=function(e){var t=0;return this.items[e]&&(this.items.splice(e,1),t=e),t},e}();t.FlowObjectDataArray=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowAttribute=void 0;var o=function(){function e(e,t){this.Name=e,this.Value=t}return Object.defineProperty(e.prototype,"name",{get:function(){return this.Name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},enumerable:!1,configurable:!0}),e}();t.FlowAttribute=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DragEvent=t.eDragEventType=t.modalDialogButton=void 0;var o,r=function(e,t){this.label=e,this.handler=t};t.modalDialogButton=r,function(e){e[e.unknown=0]="unknown",e[e.canvas=1]="canvas",e[e.table=2]="table",e[e.link=3]="link",e[e.dialog=4]="dialog"}(o=t.eDragEventType||(t.eDragEventType={}));var i=function(){function e(){this.type=o.unknown,this.sourceElement=null,this.targetElement=null,this.mouseX=0,this.mouseY=0,this.mouseOffsetX=0,this.mouseOffsetY=0}return e.start=function(t,n,o,r){var i=new e;return i.type=t,i.sourceElement=n,i.targetElement=null,i.mouseX=o,i.mouseY=r,i.mouseOffsetX=o,i.mouseOffsetY=r,i},e.prototype.drag=function(e,t){this.mouseX=e,this.mouseY=t},e.prototype.end=function(e,t,n){this.targetElement=e,this.mouseX=t,this.mouseY=n,this.type=o.unknown},e}();t.DragEvent=i},function(e,t,n){"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.eColumnComparator=void 0,function(e){e[e.equalTo=0]="equalTo",e[e.notEqualTo=1]="notEqualTo",e[e.startsWith=2]="startsWith",e[e.endsWith=3]="endsWith",e[e.contains=4]="contains",e[e.notContains=5]="notContains",e[e.in=6]="in",e[e.notIn=7]="notIn"}(o=t.eColumnComparator||(t.eColumnComparator={}));var r=function(){function e(e,t){var n=this;switch(this.comparator=e,e){case o.in:case o.notIn:var r=JSON.parse(t);this.value=new Map,r.forEach((function(e){n.value.set(e,e)}));break;default:this.value=t}}return e.prototype.getForStorage=function(){var e={};if(e.comparator=this.comparator,this.value instanceof Map){var t=[];this.value.forEach((function(e,n){t.push(n)})),e.value=JSON.stringify(t)}else e.value=this.value;return JSON.stringify(e)},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowDisplayColumn=void 0;var o=n(1),r=function(){function e(e){this.Column=e,this.ComponentType=e.componentType,this.ContentFormat=e.contentFormat,this.ContentType=o.eContentType[e.contentType],this.DeveloperName=e.developerName,this.DisplayOrder=e.order,this.Label=e.label,this.ReadOnly=!e.isEditable,this.TypeElememtPropertyToDisplayId=e.typeElememtPropertyToDisplayId,this.TypeElementPropertyId=e.typeElementPropertyId,this.Visible=e.isDisplayValue}return Object.defineProperty(e.prototype,"componentType",{get:function(){return this.ComponentType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"visible",{get:function(){return this.Visible},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"readOnly",{get:function(){return this.ReadOnly},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"displayOrder",{get:function(){return this.DisplayOrder},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElememtPropertyToDisplayId",{get:function(){return this.TypeElememtPropertyToDisplayId},enumerable:!1,configurable:!0}),e.prototype.iFlowDisplayColumn=function(){return this.Column},e}();t.FlowDisplayColumn=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowObjectDataProperty=void 0;var o=n(1),r=n(2),i=n(5),a=function(){function e(e){if(this.ContentFormat="",this.ContentType=o.eContentType.unknown,this.DeveloperName="",this.TypeElementId="",this.TypeElementPropertyId="",e)switch(this.DeveloperName=e.developerName,this.ContentType=o.eContentType[e.contentType],this.ContentFormat=e.contentFormat?e.contentFormat:"",this.TypeElementId=e.typeElementId?e.typeElementId:"",this.TypeElementPropertyId=e.typeElementPropertyId,this.ContentType){case o.eContentType.ContentObject:this.Value=e.objectData?new r.FlowObjectData(e.objectData):void 0;break;case o.eContentType.ContentList:this.value=e.objectData?new i.FlowObjectDataArray(e.objectData):new i.FlowObjectDataArray([]);break;default:this.value=e.contentValue?e.contentValue:""}}return e.newInstance=function(e,t,n){var r="",i=[];switch(t){case o.eContentType.ContentObject:var a=n;i.push(a.iObjectData());break;case o.eContentType.ContentList:i=n.iFlowObjectDataArray();break;default:r=n}return new this({contentFormat:"",contentType:o.eContentType[t],contentValue:r,developerName:e,objectData:i,typeElementId:"",typeElementPropertyId:""})},Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},set:function(e){this.contentFormat=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},set:function(e){this.ContentType=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},set:function(e){this.TypeElementPropertyId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){switch(this.contentType){case o.eContentType.ContentNumber:return parseFloat(this.Value?this.Value:"0");case o.eContentType.ContentBoolean:return"true"===new String(this.Value).toLowerCase();default:return this.Value}},set:function(e){this.Value=e},enumerable:!1,configurable:!0}),e.prototype.clone=function(){var t;switch(this.contentType){case o.eContentType.ContentList:t=new i.FlowObjectDataArray,this.value.items.forEach((function(e){t.addItem(e.clone(e.developerName))}));break;case o.eContentType.ContentObject:t=this.value.clone(this.value.developerName);break;default:t=this.value}return e.newInstance(this.developerName,this.contentType,t)},e.prototype.iFlowObjectDataProperty=function(){var e="",t=[];switch(this.ContentType){case o.eContentType.ContentObject:var n=this.Value;n&&n.developerName&&n.developerName.length>0&&t.push(n.iObjectData());break;case o.eContentType.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value}return{contentFormat:this.ContentFormat,contentType:o.eContentType[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementId:this.TypeElementId,typeElementPropertyId:this.TypeElementPropertyId}},Object.defineProperty(e.prototype,"displayString",{get:function(){var e="";if(this.Value)switch(this.ContentType){case o.eContentType.ContentString:case o.eContentType.ContentNumber:e=this.Value;break;case o.eContentType.ContentBoolean:e=!0===this.Value?"True":"False";break;case o.eContentType.ContentDateTime:var t=Date.parse(this.Value);if(!isNaN(t)){var n=new Date(t);return e.length<=10?n.toLocaleDateString():n.toLocaleString()}break;default:e=o.eContentType[this.ContentType]}else e="Undefined";return e},enumerable:!1,configurable:!0}),e}();t.FlowObjectDataProperty=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowOutcome=t.ePageActionType=t.ePageActionBindingType=void 0;var o=n(6);!function(e){e.Save="SAVE",e.PartialSave="PARTIAL_SAVE",e.NoSave="NO_SAVE"}(t.ePageActionBindingType||(t.ePageActionBindingType={})),function(e){e.New="NEW",e.Query="QUERY",e.Insert="INSERT",e.Update="UPDATE",e.Upsert="UPSERT",e.Delete="DELETE",e.Remove="REMOVE",e.Add="ADD",e.Edit="EDIT",e.Next="NEXT",e.Back="BACK",e.Done="DONE",e.Save="SAVE",e.Cancel="CANCEL",e.Apply="APPLY",e.Import="IMPORT",e.Close="CLOSE",e.Open="OPEN",e.Submit="SUBMIT",e.Escalate="ESCALATE",e.Reject="REJECT",e.Delegate="DELEGATE"}(t.ePageActionType||(t.ePageActionType={}));var r=function(){function e(e){if(this.DeveloperName=e.developerName,this.Id=e.id,this.IsBulkAction=e.isBulkAction,this.IsOut=e.isOut,this.Label=e.label,this.Order=e.order,this.PageActionBindingType=e.pageActionBindingType,this.PageActionType=e.pageActionType,this.PageObjectBindingId=e.pageObjectBindingId,this.Attributes={},e.attributes)for(var t=0,n=Object.keys(e.attributes);t<n.length;t++){var r=n[t];this.Attributes[r]=new o.FlowAttribute(r,e.attributes[r])}this.Outcome=e}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this.Id},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isBulkAction",{get:function(){return this.IsBulkAction},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isOut",{get:function(){return this.IsOut},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageActionBindingType",{get:function(){return this.PageActionBindingType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageActionType",{get:function(){return this.PageActionType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageObjectBindingId",{get:function(){return this.PageObjectBindingId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!1,configurable:!0}),e.prototype.iFlowOutcome=function(){return this.Outcome},e}();t.FlowOutcome=r},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0);n(25);var a=function(e){function t(t){var n=e.call(this,t)||this;return n.displayStyle={},n.menuItems=[],n.showContextMenu=n.showContextMenu.bind(n),n.hideContextMenu=n.hideContextMenu.bind(n),n.positionContextMenu=n.positionContextMenu.bind(n),n}return r(t,e),t.prototype.setMenu=function(e){this.menu=e},t.prototype.positionContextMenu=function(e,t){e<window.innerWidth/2?(this.displayStyle.left=e-10,this.displayStyle.right=void 0):(this.displayStyle.left=void 0,this.displayStyle.right=window.innerWidth-(e+10)),t<window.innerHeight/2?(this.displayStyle.top=t-10,this.displayStyle.bottom=void 0):(this.displayStyle.top=void 0,this.displayStyle.bottom=window.innerHeight-(t+10)+"px"),this.displayStyle.display="block"},t.prototype.showContextMenu=function(e,t,n){if(n.size>0){var o=[];n.forEach((function(e){o.push(e)})),this.menuItems=o,this.positionContextMenu(e,t),this.forceUpdate()}},t.prototype.hideContextMenu=function(){this.displayStyle.display="none",this.menuItems=[],this.forceUpdate()},t.prototype.render=function(){var e=this;return i.createElement("div",{className:"cm",onMouseLeave:this.hideContextMenu,style:{left:this.displayStyle.left,right:this.displayStyle.right,top:this.displayStyle.top,bottom:this.displayStyle.bottom,display:this.displayStyle.display},ref:function(t){return e.setMenu(t)}},i.createElement("ul",{className:"cm-list"},this.menuItems))},t}(i.Component);t.default=a},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&o(t,e,n);return r(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.eSortDirection=t.eFilterEvent=void 0;var s,l,c=i(n(0)),u=n(3),d=a(n(34)),p=a(n(35)),h=n(8);!function(e){e[e.none=0]="none",e[e.sort=1]="sort",e[e.filter=2]="filter"}(s=t.eFilterEvent||(t.eFilterEvent={})),function(e){e[e.none=0]="none",e[e.ascending=1]="ascending",e[e.descending=-1]="descending"}(l=t.eSortDirection||(t.eSortDirection={}));var f=function(){function e(e){this.items=new Map,this.parent=e,this.notify=this.notify.bind(this),this.getSortIcon=this.getSortIcon.bind(this),this.getFilterIcon=this.getFilterIcon.bind(this),this.sortClicked=this.sortClicked.bind(this),this.filterClicked=this.filterClicked.bind(this),this.saveFilter=this.saveFilter.bind(this),this.cancelFilter=this.cancelFilter.bind(this),this.matchesCriteria=this.matchesCriteria.bind(this)}return e.prototype.setDialog=function(e){this.dialog=e},e.prototype.notify=function(e,t){this.parent.filtersChanged(e,t)},e.prototype.get=function(e){return this.items.has(e)?this.items.get(e):void 0},e.prototype.has=function(e){return!!this.items.has(e)},e.prototype.sortClicked=function(e){this.items.has(e)||this.items.set(e,new d.default(e,this)),this.items.forEach((function(t){t.key!==e&&t.sortNone()})),this.items.get(e).sortToggle()},e.prototype.filterClicked=function(e){var t=this,n=this.parent;this.items.has(e)||this.items.set(e,new d.default(e,this));var o=this.parent.colMap.get(e);this.parent.messageBox.showMessageBox("Filter "+o.label,c.default.createElement(p.default,{root:n,parent:this,key:e,developerName:e,filter:this.items.get(e),ref:function(e){t.setDialog(e)}}),[new u.modalDialogButton("Apply",this.saveFilter),new u.modalDialogButton("Cancel",this.cancelFilter)])},e.prototype.filterClear=function(e){this.items.get(e).clearFilters()},e.prototype.saveFilter=function(){var e=this.dialog.filter.key;this.dialog.filter.criteria=this.dialog.newCriteria,this.items.set(e,this.dialog.filter),this.dialog=void 0,this.parent.messageBox.hideMessageBox(),this.notify(e,s.filter)},e.prototype.cancelFilter=function(){var e=this.dialog.filter.key;this.dialog=void 0,this.parent.messageBox.hideMessageBox(),this.notify(e,s.filter)},e.prototype.getSortIcon=function(e){var t=this;if(!this.items.has(e))return c.default.createElement("span",{className:"sft-column-header-flag glyphicon glyphicon-ban-circle",onClick:function(n){t.sortClicked(e)},title:"Not sorted - click to toggle"});switch(this.items.get(e).sort){case l.none:return c.default.createElement("span",{className:"sft-column-header-flag glyphicon glyphicon-ban-circle",onClick:function(n){t.sortClicked(e)},title:"Not sorted - click to toggle"});case l.ascending:return c.default.createElement("span",{className:"sft-column-header-flag sft-column-header-flag-hot glyphicon glyphicon-arrow-up",onClick:function(n){t.sortClicked(e)},title:"Ascending - click to toggle"});case l.descending:return c.default.createElement("span",{className:"sft-column-header-flag sft-column-header-flag-hot glyphicon glyphicon-arrow-down",onClick:function(n){t.sortClicked(e)},title:"Descending - click to toggle"})}},e.prototype.getFilterIcon=function(e){var t,n=this;return this.items.has(e)&&(null===(t=this.items.get(e).criteria)||void 0===t?void 0:t.length)>0?c.default.createElement(c.Fragment,null,c.default.createElement("span",{className:"sft-column-header-button sft-column-header-button-hot glyphicon glyphicon-search",onClick:function(t){n.filterClicked(e)},title:"Change filter"}),c.default.createElement("span",{className:"sft-column-header-button sft-column-header-button-hot glyphicon glyphicon-remove",onClick:function(t){n.filterClear(e)},title:"Clear filter"})):c.default.createElement("span",{className:"sft-column-header-button glyphicon glyphicon-search",onClick:function(t){n.filterClicked(e)}})},e.prototype.filter=function(e){var t=this,n=new Map;return e.forEach((function(e,o){t.matchesCriteria(e)&&n.set(o,void 0)})),n},e.prototype.matchesCriteria=function(e){var t=e.objectData,n=!0;return this.items.forEach((function(e){e.criteria.forEach((function(o){var r,i=t.properties[e.key].value.toLowerCase();switch("string"==typeof o.value&&(r=o.value.toLowerCase()),o.comparator){case h.eColumnComparator.equalTo:i!==r&&(n=!1);break;case h.eColumnComparator.notEqualTo:i===r&&(n=!1);break;case h.eColumnComparator.contains:i.indexOf(r)<0&&(n=!1);break;case h.eColumnComparator.startsWith:i.startsWith(r)||(n=!1);break;case h.eColumnComparator.endsWith:i.endsWith(r)||(n=!1);break;case h.eColumnComparator.notContains:i.indexOf(r)>=0&&(n=!1);break;case h.eColumnComparator.in:o.value.has(t.properties[e.key].value)||(n=!1);break;case h.eColumnComparator.notIn:o.value.has(t.properties[e.key].value)&&(n=!1);break;default:n=!1}}))})),n},e.prototype.getSortColumn=function(){var e;return this.items.forEach((function(t){t.sort!==l.none&&(e=t)})),e},e.prototype.sort=function(e,t){var n=this.getSortColumn(),o=new Map(Array.from(t).filter((function(t){if(e.has(t[0]))return!0})));if(n){var r=void 0;switch(this.parent.colMap.get(n.key).contentType){case u.eContentType.ContentDateTime:r=Array.from(o).sort((function(e,t){return e[1].objectData.properties[n.key].value-t[1].objectData.properties[n.key].value}));break;default:var i=new Intl.Collator(void 0,{numeric:!0,sensitivity:"base"});r=Array.from(o).sort((function(e,t){return i.compare(e[1].objectData.properties[n.key].value,t[1].objectData.properties[n.key].value)}))}n.sort===l.descending&&(r=r.reverse());var a=new Map(r);return a.forEach((function(e,t){a.set(t,void 0)})),a}return e},e.prototype.getForStorage=function(){var e=[];return this.items.forEach((function(t){e.push(t.getForStorage())})),JSON.stringify(e)},e.prototype.loadFromStorage=function(e){var t=this;this.items=new Map;var n=JSON.parse(e);n&&n.forEach((function(e){(e=JSON.parse(e)).key&&t.items.set(e.key,new d.default(e.key,t,e.sort,e.criteria))}))},e}();t.default=f},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||o(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),r(n(15),t)},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&i(t,e,n);return a(t,e),t},l=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},c=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var d=u(n(0)),p=n(3),h=u(n(12)),f=u(n(29)),m=u(n(30)),y=u(n(31));n(32);var g=u(n(33)),b=s(n(13)),v=u(n(38)),w=u(n(39)),I=u(n(40)),C=function(e){function t(t){var n=e.call(this,t)||this;return n.version="1.0.0",n.rowMap=new Map,n.currentRowMap=new Map,n.maxPageRows=5,n.currentRowPages=[],n.currentRowPage=0,n.selectedRowMap=new Map,n.rows=new Map,n.colMap=new Map,n.colValMap=new Map,n.cols=new Map,n.lastContent=d.default.createElement("div",null),n.filters=new b.default(n),n.handleMessage=n.handleMessage.bind(n),n.flowMoved=n.flowMoved.bind(n),n.showContextMenu=n.showContextMenu.bind(n),n.hideContextMenu=n.hideContextMenu.bind(n),n.buildCoreTable=n.buildCoreTable.bind(n),n.buildRibbon=n.buildRibbon.bind(n),n.buildFooter=n.buildFooter.bind(n),n.filtersChanged=n.filtersChanged.bind(n),n.toggleSelect=n.toggleSelect.bind(n),n.firstPage=n.firstPage.bind(n),n.previousPage=n.previousPage.bind(n),n.nextPage=n.nextPage.bind(n),n.lastPage=n.lastPage.bind(n),n.maxPerPageChanged=n.maxPerPageChanged.bind(n),n.doExport=n.doExport.bind(n),n.maxPageRows=parseInt(sessionStorage.getItem("sft-max-"+n.componentId)||n.getAttribute("PaginationSize",void 0)||"10"),sessionStorage.setItem("sft-max-"+n.componentId,n.maxPageRows.toString()),n}return r(t,e),t.prototype.filtersChanged=function(e,t){switch(this.headers.forceUpdate(),sessionStorage.setItem("sft-filters-"+this.componentId,this.filters.getForStorage()),t){case b.eFilterEvent.sort:this.sortRows(),this.paginateRows(),this.buildTableRows(),this.forceUpdate();break;case b.eFilterEvent.filter:this.filterRows(),this.sortRows(),this.paginateRows(),this.buildTableRows(),this.forceUpdate()}},t.prototype.maxPerPageChanged=function(e){this.maxPageRows=e||10,sessionStorage.setItem("sft-max-"+this.componentId,this.maxPageRows.toString()),this.paginateRows(),this.buildTableRows(),this.forceUpdate()},t.prototype.setRow=function(e,t){t?this.rows.set(e,t):this.rows.has(e)&&this.rows.delete(e)},t.prototype.setRibbon=function(e){this.ribbon=e},t.prototype.setHeaders=function(e){this.headers=e},t.prototype.setFooter=function(e){this.footer=e},t.prototype.flowMoved=function(e,t){return l(this,void 0,void 0,(function(){var n;return c(this,(function(o){return n=this,"FORWARD"===e.invokeType&&(this.loadingState!==p.eLoadingState.ready?window.setTimeout((function(){n.flowMoved(e,t)}),500):(this.maxPageRows=parseInt(sessionStorage.getItem("sft-max-"+this.componentId)||this.getAttribute("PaginationSize",void 0)||"10"),this.filters.loadFromStorage(sessionStorage.getItem("sft-filters-"+this.componentId)),this.buildCoreTable(),this.filterRows(),this.sortRows(),this.buildTableRows(),this.forceUpdate())),[2]}))}))},t.prototype.componentDidMount=function(){return l(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),manywho.eventManager.addDoneListener(this.flowMoved,this.componentId),this.maxPageRows=parseInt(sessionStorage.getItem("sft-max-"+this.componentId||!1)),this.filters.loadFromStorage(sessionStorage.getItem("sft-filters-"+this.componentId)),this.buildCoreTable(),this.filterRows(),this.sortRows(),this.buildTableRows(),this.forceUpdate(),[2]}}))}))},t.prototype.componentWillUnmount=function(){return l(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentWillUnmount.call(this)];case 1:return t.sent(),manywho.eventManager.removeDoneListener(this.componentId),[2]}}))}))},t.prototype.buildCoreTable=function(){var e=this;this.rowMap=new Map,this.rows=new Map;var t=this.model.displayColumns.sort((function(e,t){switch(!0){case e.DisplayOrder>t.DisplayOrder:return 1;case e.DisplayOrder===t.DisplayOrder:return 0;default:return-1}}));this.colMap=new Map,t.forEach((function(t){e.colMap.set(t.developerName,t),e.colValMap.set(t.developerName,new Map)})),this.ribbonElement=d.default.createElement(I.default,{root:this,ref:function(t){e.setRibbon(t)}}),this.headersElement=d.default.createElement(g.default,{root:this,ref:function(t){e.setHeaders(t)}}),this.footerElement=d.default.createElement(v.default,{root:this,ref:function(t){e.setFooter(t)}});var n=new Date;this.model.dataSource.items.forEach((function(t){!0===t.isSelected&&e.selectedRowMap.set(t.internalId,void 0);var n=new f.default;n.id=t.internalId,e.colMap.forEach((function(o){var r,i,a;n.columns.set(o.developerName,new m.default(o.developerName,null===(r=t.properties[o.developerName])||void 0===r?void 0:r.value)),e.colValMap.get(o.developerName).set(null===(i=t.properties[o.developerName])||void 0===i?void 0:i.value,null===(a=t.properties[o.developerName])||void 0===a?void 0:a.value)})),n.objectData=t,e.rowMap.set(n.id,n)}));var o=new Date;console.log("build rowmap: "+(o.getTime()-n.getTime())),this.filterRows(),this.sortRows(),this.paginateRows(),this.buildRibbon(),this.buildFooter()},t.prototype.filterRows=function(){var e=this,t=new Date;this.currentRowMap=new Map,this.rowMap.size>0&&(this.currentRowMap=this.filters.filter(this.rowMap)),this.selectedRowMap.forEach((function(t,n){e.currentRowMap.has(n)||e.selectedRowMap.delete(n)}));var n=new Date;console.log("filter: "+(n.getTime()-t.getTime()))},t.prototype.sortRows=function(){var e=new Date;this.currentRowMap.size>0&&(this.currentRowMap=this.filters.sort(this.currentRowMap,this.rowMap));var t=new Date;console.log("sort: "+(t.getTime()-e.getTime()))},t.prototype.paginateRows=function(){var e=this,t=new Date;this.currentRowPages=[];var n=new Map;this.currentRowMap.forEach((function(t,o){n.size<e.maxPageRows?n.set(o,void 0):(e.currentRowPages.push(n),(n=new Map).set(o,void 0))})),this.currentRowPages.push(n),this.currentRowPage=0;var o=new Date;console.log("paginate: "+(o.getTime()-t.getTime()))},t.prototype.firstPage=function(){this.currentRowPage=0,this.buildTableRows(),this.buildRibbon(),this.buildFooter(),this.forceUpdate()},t.prototype.previousPage=function(){this.currentRowPage>1?this.currentRowPage-=1:this.currentRowPage=0,this.buildTableRows(),this.buildRibbon(),this.buildFooter(),this.forceUpdate()},t.prototype.nextPage=function(){this.currentRowPage<this.currentRowPages.length-1?this.currentRowPage+=1:this.currentRowPage=this.currentRowPages.length-1,this.buildTableRows(),this.buildRibbon(),this.buildFooter(),this.forceUpdate()},t.prototype.lastPage=function(){this.currentRowPage=this.currentRowPages.length-1,this.buildTableRows(),this.buildRibbon(),this.buildFooter(),this.forceUpdate()},t.prototype.toggleSelectAll=function(e){var t=this;e.target.checked?this.currentRowMap.forEach((function(e,n){t.selectedRowMap.set(n,"")})):this.selectedRowMap.clear(),this.rows.forEach((function(e){e.forceUpdate()})),this.buildRibbon(),this.buildFooter(),this.saveSelected()},t.prototype.toggleSelect=function(e,t){e.target.checked?this.selectedRowMap.set(t,""):this.selectedRowMap.delete(t),this.rows.get(t).forceUpdate(),this.buildRibbon(),this.buildFooter(),this.saveSelected()},t.prototype.saveSelected=function(){return l(this,void 0,void 0,(function(){var e,t=this;return c(this,(function(n){switch(n.label){case 0:return e=new p.FlowObjectDataArray,this.selectedRowMap.forEach((function(n,o){var r=t.rowMap.get(o).objectData;r.isSelected=!0,e.addItem(r)})),[4,this.setStateValue(e)];case 1:return n.sent(),[2]}}))}))},t.prototype.loadSelected=function(){return l(this,void 0,void 0,(function(){var e,t=this;return c(this,(function(n){switch(n.label){case 0:return e=this.getStateValue(),this.selectedRowMap.forEach((function(n,o){var r=t.rowMap.get(o).objectData;r.isSelected=!0,e.addItem(r)})),[4,this.setStateValue(e)];case 1:return n.sent(),[2]}}))}))},t.prototype.buildTableRows=function(){var e=this;this.rowElements=[],this.currentRowPages&&this.currentRowPages.length>0&&this.currentRowPages[this.currentRowPage]&&this.currentRowPages[this.currentRowPage].forEach((function(t,n){e.rowElements.push(d.default.createElement(y.default,{key:n,root:e,id:n,ref:function(t){e.setRow(n,t)}}))})),this.buildRibbon(),this.buildFooter()},t.prototype.buildRibbon=function(){var e;null===(e=this.ribbon)||void 0===e||e.forceUpdate()},t.prototype.buildFooter=function(){var e;null===(e=this.footer)||void 0===e||e.forceUpdate()},t.prototype.showContextMenu=function(e){var t=this;e.preventDefault(),e.stopPropagation();var n=new Map;this.contextMenu&&(Object.keys(this.outcomes).forEach((function(e){var o,r,i=t.outcomes[e];!0===i.isBulkAction&&"OnSelect"!==i.developerName&&i.developerName.toLowerCase().startsWith("cm")&&("true"===(null===(o=i.attributes.RequiresSelected)||void 0===o?void 0:o.value)&&t.selectedRowMap.size<1||n.set(i.developerName,d.default.createElement("li",{className:"sft-cm-item",title:i.label||e,onClick:function(n){n.stopPropagation(),t.cmClick(e)}},d.default.createElement("span",{className:"glyphicon glyphicon-"+((null===(r=i.attributes.icon)||void 0===r?void 0:r.value)||"plus")+" sft-cm-item-icon"}),d.default.createElement("span",{className:"sft-cm-item-label"},i.label||e))))})),n.set("exportall",d.default.createElement("li",{className:"sft-cm-item",title:"Export All",onClick:function(e){e.stopPropagation(),t.doExport(t.rowMap)}},d.default.createElement("span",{className:"glyphicon glyphicon-floppy-save sft-cm-item-icon"}),d.default.createElement("span",{className:"sft-cm-item-label"},"Export All"))),n.set("exportshown",d.default.createElement("li",{className:"sft-cm-item",title:"Export Search Results",onClick:function(e){e.stopPropagation(),t.doExport(t.currentRowMap)}},d.default.createElement("span",{className:"glyphicon glyphicon-floppy-save sft-cm-item-icon"}),d.default.createElement("span",{className:"sft-cm-item-label"},"Export Search Results"))),this.selectedRowMap.size>0&&n.set("exportselected",d.default.createElement("li",{className:"sft-cm-item",title:"Export Selected Items",onClick:function(e){e.stopPropagation(),t.doExport(t.selectedRowMap)}},d.default.createElement("span",{className:"glyphicon glyphicon-floppy-save sft-cm-item-icon"}),d.default.createElement("span",{className:"sft-cm-item-label"},"Export Selected"))),this.contextMenu.showContextMenu(e.clientX,e.clientY,n),this.forceUpdate())},t.prototype.hideContextMenu=function(){return l(this,void 0,void 0,(function(){return c(this,(function(e){return this.contextMenu.hideContextMenu(),[2]}))}))},t.prototype.cmClick=function(e){this.doOutcome(e)},t.prototype.getTextValue=function(e){switch(e.contentType){case p.eContentType.ContentBoolean:return!0===e.value?"True":"False";case p.eContentType.ContentNumber:return e.value.toString();default:return e.value}},t.prototype.doOutcome=function(e,t){var n,o;return l(this,void 0,void 0,(function(){var r,i,a;return c(this,(function(s){switch(s.label){case 0:if(r=null===(n=this.rowMap.get(t))||void 0===n?void 0:n.objectData,!this.outcomes[e])return[3,4];if(!this.outcomes[e].attributes.uri)return[3,1];for(i=this.outcomes[e].attributes.uri.value,a=void 0;a=RegExp(/{{([^}]*)}}/).exec(i);)i=i.replace(a[0],r.properties[a[1]]?this.getTextValue(r.properties[a[1]]):"");return"_self"===(null===(o=this.outcomes[e].attributes.target)||void 0===o?void 0:o.value)?window.location.href=i:window.open().location.href=i,[3,3];case 1:return[4,this.triggerOutcome(e)];case 2:s.sent(),s.label=3;case 3:return[3,5];case 4:manywho.component.handleEvent(this,manywho.model.getComponent(this.componentId,this.flowKey),this.flowKey,null),s.label=5;case 5:return this.forceUpdate(),[2]}}))}))},t.prototype.doExport=function(e){return l(this,void 0,void 0,(function(){var t,n=this;return c(this,(function(o){return t=new Map,e.forEach((function(e,o){t.set(o,n.rowMap.get(o))})),w.default.export(this.colMap,t,"export.csv"),this.outcomes.OnExport&&this.triggerOutcome("OnExport"),[2]}))}))},t.prototype.render=function(){var e=this;if(this.loadingState!==p.eLoadingState.ready)return this.lastContent;var t="sft "+this.getAttribute("classes",""),n={width:"-webkit-fill-available",height:"-webkit-fill-available"};!1===this.model.visible&&(n.display="none"),this.model.width&&(n.width=this.model.width+"px"),this.model.height&&(n.height=this.model.height+"px");this.model.label;return this.lastContent=d.default.createElement("div",{className:t,style:n,onContextMenu:this.showContextMenu},d.default.createElement(p.FlowMessageBox,{parent:this,ref:function(t){e.messageBox=t}}),d.default.createElement(h.default,{parent:this,ref:function(t){e.contextMenu=t}}),this.ribbonElement,d.default.createElement("div",{className:"sft-body"},d.default.createElement("div",{className:"sft-scroller"},d.default.createElement("div",{className:"sft-scroller-body"},d.default.createElement("table",null,d.default.createElement("thead",null,this.headersElement),d.default.createElement("tbody",null,this.rowElements),d.default.createElement("tfoot",null))))),this.footerElement),this.lastContent},t}(p.FlowComponent);t.default=C,manywho.component.register("SearchFilterTable",C)},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowComponent=void 0;var s=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.dontLoadAllValues()];case 2:return t.sent(),[2,Promise.resolve()]}}))}))},t}(n(4).FlowBaseComponent);t.FlowComponent=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),manywho.eventManager||(manywho.eventManager={},manywho.eventManager.beforeSendListeners={},manywho.eventManager.doneListeners={},manywho.eventManager.failListeners={},manywho.eventManager.outcomeBeingTriggered,manywho.eventManager.history=[],manywho.eventManager.beforeSend=function(e,t){for(var n in manywho.eventManager.beforeSendListeners)manywho.eventManager.beforeSendListeners[n](e,t)},manywho.eventManager.done=function(e,t){for(var n in manywho.eventManager.doneListeners)manywho.eventManager.doneListeners[n](e,t)},manywho.eventManager.fail=function(e,t){for(var n in manywho.eventManager.failListeners)manywho.eventManager.failListeners[n](e,t)},manywho.eventManager.addBeforeSendListener=function(e,t){manywho.eventManager.beforeSendListeners[t]=e},manywho.eventManager.removeBeforeSendListener=function(e){delete manywho.eventManager.beforeSendListeners[e]},manywho.eventManager.addDoneListener=function(e,t){manywho.eventManager.doneListeners[t]=e},manywho.eventManager.removeDoneListener=function(e){delete manywho.eventManager.doneListeners[e]},manywho.eventManager.addFailListener=function(e,t){manywho.eventManager.failListeners[t]=e},manywho.eventManager.removeFailListener=function(e){delete manywho.eventManager.failListeners[e]},manywho.settings.initialize(null,{invoke:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.done,fail:manywho.eventManager.fail}}))},function(e,t,n){(function(t){var n=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,r=/^0b[01]+$/i,i=/^0o[0-7]+$/i,a=parseInt,s="object"==typeof t&&t&&t.Object===Object&&t,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),u=Object.prototype.toString,d=Math.max,p=Math.min,h=function(){return c.Date.now()};function f(e,t,n){var o,r,i,a,s,l,c=0,u=!1,f=!1,g=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function b(t){var n=o,i=r;return o=r=void 0,c=t,a=e.apply(i,n)}function v(e){return c=e,s=setTimeout(I,t),u?b(e):a}function w(e){var n=e-l;return void 0===l||n>=t||n<0||f&&e-c>=i}function I(){var e=h();if(w(e))return C(e);s=setTimeout(I,function(e){var n=t-(e-l);return f?p(n,i-(e-c)):n}(e))}function C(e){return s=void 0,g&&o?b(e):(o=r=void 0,a)}function E(){var e=h(),n=w(e);if(o=arguments,r=this,l=e,n){if(void 0===s)return v(l);if(f)return s=setTimeout(I,t),b(l)}return void 0===s&&(s=setTimeout(I,t)),a}return t=y(t)||0,m(n)&&(u=!!n.leading,i=(f="maxWait"in n)?d(y(n.maxWait)||0,t):i,g="trailing"in n?!!n.trailing:g),E.cancel=function(){void 0!==s&&clearTimeout(s),c=0,o=l=r=s=void 0},E.flush=function(){return void 0===s?a:C(h())},E}function m(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function y(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==u.call(e)}(e))return NaN;if(m(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=m(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(n,"");var s=r.test(e);return s||i.test(e)?a(e.slice(2),s?2:8):o.test(e)?NaN:+e}e.exports=function(e,t,n){var o=!0,r=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return m(n)&&(o="leading"in n?!!n.leading:o,r="trailing"in n?!!n.trailing:r),f(e,t,{leading:o,maxWait:t,trailing:r})}}).call(this,n(19))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowPage=void 0;var s=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.loadAllValues()];case 2:return t.sent(),[2,Promise.resolve()]}}))}))},t}(n(4).FlowBaseComponent);t.FlowPage=s},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowDialogBox=void 0;var s=n(0),l=n(7);n(22);var c=function(e){function t(t){var n=e.call(this,t)||this;return n.dragEvent=new l.DragEvent,n.dialogVisible=!1,n.dialogTitle="",n.dialogButtons=[],n.dialogOnClose=n.hideDialog,n.top=0,n.left=0,n.handleKeyUp=n.handleKeyUp.bind(n),n.handleOutsideClick=n.handleOutsideClick.bind(n),n.showDialog=n.showDialog.bind(n),n.hideDialog=n.hideDialog.bind(n),n}return r(t,e),t.prototype.setDialog=function(e){if(this.dialog=e,this.dialog){var t=this.dialog.offsetParent.clientWidth/2,n=this.dialog.offsetParent.clientHeight/2,o=this.dialog.clientWidth/2,r=this.dialog.clientHeight/2;this.left=t-o,this.top=n-r,this.dialog.classList.add("shown"),this.positionDialog()}},t.prototype.positionDialog=function(){this.dialog&&(this.dialog.style.left=this.left+"px",this.dialog.style.top=this.top+"px")},t.prototype.stopEventBubble=function(e){return e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),e.cancelBubble=!0,e.returnValue=!1,!1},t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.showDialog=function(e,t,n,o){return i(this,void 0,void 0,(function(){return a(this,(function(r){return this.dialogVisible=!0,this.dialogTitle=e,this.dialogContent=t,this.dialogOnClose=o||this.hideDialog,this.dialogButtons=n,this.forceUpdate(),[2]}))}))},t.prototype.hideDialog=function(e){return i(this,void 0,void 0,(function(){return a(this,(function(e){return this.dialogVisible=!1,this.dialogTitle="",this.dialogContent=void 0,this.dialogOnClose=void 0,this.dialogButtons=[],this.forceUpdate(),[2]}))}))},t.prototype.handleKeyUp=function(e){var t=this,n={27:function(){e.preventDefault(),t.hideDialog()}};n[e.keyCode]&&n[e.keyCode]()},t.prototype.handleOutsideClick=function(e){this.dialog||this.dialog.contains(e.target)||this.hideDialog()},t.prototype.render=function(){var e,t=this;if(!1===this.dialogVisible)e=s.createElement("div",null);else{for(var n=[],o=function(e){n.push(s.createElement("button",{className:"modal-dialog-button-bar-button",title:"Cancel",onMouseDown:function(t){t.stopPropagation(),e.handler()}},e.label))},r=0,i=this.dialogButtons;r<i.length;r++){o(i[r])}e=s.createElement("div",{className:"modal-redaction",onMouseMove:function(e){t.onMouseMove(e)},onMouseUp:function(e){t.onMouseUp(e)},onMouseDown:function(e){t.handleOutsideClick(e)},onContextMenu:function(e){e.preventDefault(),e.stopPropagation(),t.props.onContextMenu&&t.props.onContextMenu()}},s.createElement("div",{className:"modal-content",ref:function(e){return t.dialog=e}},s.createElement("div",{className:"modal-dialog"},s.createElement("div",{className:"modal-dialog-header",onMouseDown:function(e){t.onMouseDown(e)}},s.createElement("div",{style:{display:"flex",flexDirection:"row",flexGrow:1}},s.createElement("span",{className:"modal-dialog-header-title"},this.props.title)),s.createElement("div",{style:{display:"flex",flexDirection:"row",marginLeft:"auto",flexGrow:0}},s.createElement("span",{className:"glyphicon glyphicon-remove modal-dialog-header-button",style:{cursor:"pointer",color:"#fefefe",marginRight:"5px",fontSize:"14pt"},title:"Close",onMouseDown:function(e){e.stopPropagation(),t.props.onClose("cancel")}}))),s.createElement("div",{className:"modal-dialog-body"},s.createElement("div",{className:"modal-dialog-body-client"},this.props.children)),s.createElement("div",{className:"modal-dialog-button-bar"},n))))}return e},t.prototype.moveMe=function(e,t){this.left=e,this.top=t,this.positionDialog()},t.prototype.onMouseDown=function(e){var t=e.target.getBoundingClientRect(),n=e.clientY-t.top;this.dragEvent=l.DragEvent.start(l.eDragEventType.dialog,this,e.clientX-t.left,n)},t.prototype.onMouseMove=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.moveMe(e.clientX-this.dragEvent.mouseOffsetX,e.clientY-this.dragEvent.mouseOffsetY)},t.prototype.onMouseUp=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.dragEvent.end(null,e.clientX,e.clientY)},t}(s.Component);t.FlowDialogBox=c},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowMessageBox=void 0;var s=n(0),l=n(7);n(24);var c=function(e){function t(t){var n=e.call(this,t)||this;return n.dragEvent=new l.DragEvent,n.top=0,n.left=0,n.msgboxVisible=!1,n.msgboxTitle="",n.msgboxButtons=[],n.msgboxOnClose=n.hideMessageBox,n.handleKeyUp=n.handleKeyUp.bind(n),n.setDialog=n.setDialog.bind(n),n.showMessageBox=n.showMessageBox.bind(n),n.hideMessageBox=n.hideMessageBox.bind(n),n.positionDialog=n.positionDialog.bind(n),n}return r(t,e),t.prototype.setDialog=function(e){if(this.dialog=e,this.dialog){var t=this.dialog.offsetParent.clientWidth/2,n=this.dialog.offsetParent.clientHeight/2,o=this.dialog.clientWidth/2,r=this.dialog.clientHeight/2;this.left=t-o,this.top=n-r,this.dialog.classList.add("shown"),this.positionDialog()}},t.prototype.positionDialog=function(){this.dialog&&(this.dialog.style.left=this.left+"px",this.dialog.style.top=this.top+"px")},t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.showMessageBox=function(e,t,n,o){return i(this,void 0,void 0,(function(){return a(this,(function(r){return this.msgboxVisible=!0,this.msgboxTitle=e,this.msgboxContent=t,this.msgboxOnClose=o||this.hideMessageBox,this.msgboxButtons=n,this.forceUpdate(),[2]}))}))},t.prototype.hideMessageBox=function(e){return i(this,void 0,void 0,(function(){return a(this,(function(e){return this.msgboxVisible=!1,this.msgboxTitle="",this.msgboxContent=void 0,this.msgboxOnClose=void 0,this.msgboxButtons=[],this.forceUpdate(),[2]}))}))},t.prototype.stopEventBubble=function(e){return e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),e.cancelBubble=!0,e.returnValue=!1,!1},t.prototype.handleKeyUp=function(e){var t=this,n={27:function(){e.preventDefault(),t.hideMessageBox()}};n[e.keyCode]&&n[e.keyCode]()},t.prototype.render=function(){var e,t=this;if(!1===this.msgboxVisible)e=s.createElement("div",null);else{for(var n=[],o=function(e){n.push(s.createElement("button",{className:"modal-dialog-button-bar-button",title:"Cancel",onMouseDown:function(t){t.stopPropagation(),e.handler()}},e.label))},r=0,i=this.msgboxButtons;r<i.length;r++){o(i[r])}e=s.createElement("div",{className:"message-box-redaction",onMouseMove:function(e){t.onMouseMove(e)},onMouseUp:function(e){t.onMouseUp(e)},onContextMenu:function(e){e.preventDefault(),e.stopPropagation(),t.props.onContextMenu&&t.props.onContextMenu()}},s.createElement("div",{className:"message-box-content",ref:function(e){return t.setDialog(e)}},s.createElement("div",{className:"message-box-dialog"},s.createElement("div",{className:"message-box-dialog-header",onMouseDown:function(e){t.onMouseDown(e)}},s.createElement("div",{style:{display:"flex",flexDirection:"row",flexGrow:1}},s.createElement("span",{className:"message-box-dialog-header-title"},this.msgboxTitle)),s.createElement("div",{style:{display:"flex",flexDirection:"row",marginLeft:"auto",flexGrow:0}},s.createElement("span",{className:"glyphicon glyphicon-remove message-box-dialog-header-button",style:{cursor:"pointer",color:"#fefefe",marginRight:"5px",fontSize:"14pt"},title:"Close",onMouseDown:function(e){t.stopEventBubble(e),t.hideMessageBox()}}))),s.createElement("div",{className:"message-box-dialog-body"},this.msgboxContent),s.createElement("div",{className:"modal-dialog-button-bar"},n))))}return e},t.prototype.moveMe=function(e,t){this.left=e,this.top=t,this.positionDialog()},t.prototype.onMouseDown=function(e){var t=e.target.getBoundingClientRect(),n=e.clientY-t.top;this.dragEvent=l.DragEvent.start(l.eDragEventType.dialog,this,e.clientX-t.left,n)},t.prototype.onMouseMove=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.moveMe(e.clientX-this.dragEvent.mouseOffsetX,e.clientY-this.dragEvent.mouseOffsetY)},t.prototype.onMouseUp=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.dragEvent.end(null,e.clientX,e.clientY)},t}(s.Component);t.FlowMessageBox=c},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0);n(27);var a=function(e){function t(t){var n=e.call(this,t)||this;return n.icons={},n.selectedItem=n.props.onChangeValue,n.onchange=n.onchange.bind(n),n.addIcon=n.addIcon.bind(n),n.addIcons=n.addIcons.bind(n),n.addIcons(),n}return r(t,e),t.prototype.onchange=function(e){this.selectedItem=e.target.innerText,this.props.onChange&&this.props.onChange(this.selectedItem),this.forceUpdate()},t.prototype.addIcons=function(){this.addIcon("asterisk","Asterisk"),this.addIcon("plus","Plus"),this.addIcon("minus","Minus"),this.addIcon("eur","Eur"),this.addIcon("euro","Euro"),this.addIcon("cloud","Cloud"),this.addIcon("envelope","Envelope"),this.addIcon("pencil","Pencil"),this.addIcon("glass","Glass"),this.addIcon("music","Music"),this.addIcon("search","Search"),this.addIcon("heart","Heart"),this.addIcon("star","Star"),this.addIcon("star-empty","Star Empty"),this.addIcon("user","User"),this.addIcon("film","Film"),this.addIcon("th-large","Th Large"),this.addIcon("th","Th"),this.addIcon("th-list","Th List"),this.addIcon("ok","Ok"),this.addIcon("remove","Remove"),this.addIcon("zoom-in","Zoom In"),this.addIcon("zoom-out","Zoom Out"),this.addIcon("off","Off"),this.addIcon("signal","Signal"),this.addIcon("cog","Cog"),this.addIcon("trash","Trash"),this.addIcon("home","Home"),this.addIcon("file","File"),this.addIcon("time","Time"),this.addIcon("road","Road"),this.addIcon("download-alt","Download Alt"),this.addIcon("download","Download"),this.addIcon("upload","Upload"),this.addIcon("inbox","Inbox"),this.addIcon("play-circle","Play Circle"),this.addIcon("repeat","Repeat"),this.addIcon("refresh","Refresh"),this.addIcon("list-alt","List Alt"),this.addIcon("lock","Lock"),this.addIcon("flag","Flag"),this.addIcon("headphones","Headphones"),this.addIcon("volume-off","Volume Off"),this.addIcon("volume-down","Volume Down"),this.addIcon("volume-up","Volume Up"),this.addIcon("qrcode","Qrcode"),this.addIcon("barcode","Barcode"),this.addIcon("tag","Tag"),this.addIcon("tags","Tags"),this.addIcon("book","Book"),this.addIcon("bookmark","Bookmark"),this.addIcon("print","Print"),this.addIcon("camera","Camera"),this.addIcon("font","Font"),this.addIcon("bold","Bold"),this.addIcon("italic","Italic"),this.addIcon("text-height","Text Height"),this.addIcon("text-width","Text Width"),this.addIcon("align-left","Align Left"),this.addIcon("align-center","Align Center"),this.addIcon("align-right","Align Right"),this.addIcon("align-justify","Align Justify"),this.addIcon("list","List"),this.addIcon("indent-left","Indent Left"),this.addIcon("indent-right","Indent Right"),this.addIcon("facetime-video","Facetime Video"),this.addIcon("picture","Picture"),this.addIcon("map-marker","Map Marker"),this.addIcon("adjust","Adjust"),this.addIcon("tint","Tint"),this.addIcon("edit","Edit"),this.addIcon("share","Share"),this.addIcon("check","Check"),this.addIcon("move","Move"),this.addIcon("step-backward","Step Backward"),this.addIcon("fast-backward","Fast Backward"),this.addIcon("backward","Backward"),this.addIcon("play","Play"),this.addIcon("pause","Pause"),this.addIcon("stop","Stop"),this.addIcon("forward","Forward"),this.addIcon("fast-forward","Fast Forward"),this.addIcon("step-forward","Step Forward"),this.addIcon("eject","Eject"),this.addIcon("chevron-left","Chevron Left"),this.addIcon("chevron-right","Chevron Right"),this.addIcon("plus-sign","Plus Sign"),this.addIcon("minus-sign","Minus Sign"),this.addIcon("remove-sign","Remove Sign"),this.addIcon("ok-sign","Ok Sign"),this.addIcon("question-sign","Question Sign"),this.addIcon("info-sign","Info Sign"),this.addIcon("screenshot","Screenshot"),this.addIcon("remove-circle","Remove Circle"),this.addIcon("ok-circle","Ok Circle"),this.addIcon("ban-circle","Ban Circle"),this.addIcon("arrow-left","Arrow Left"),this.addIcon("arrow-right","Arrow Right"),this.addIcon("arrow-up","Arrow Up"),this.addIcon("arrow-down","Arrow Down"),this.addIcon("share-alt","Share Alt"),this.addIcon("resize-full","Resize Full"),this.addIcon("resize-small","Resize Small"),this.addIcon("exclamation-sign","Exclamation Sign"),this.addIcon("gift","Gift"),this.addIcon("leaf","Leaf"),this.addIcon("fire","Fire"),this.addIcon("eye-open","Eye Open"),this.addIcon("eye-close","Eye Close"),this.addIcon("warning-sign","Warning Sign"),this.addIcon("plane","Plane"),this.addIcon("calendar","Calendar"),this.addIcon("random","Random"),this.addIcon("comment","Comment"),this.addIcon("magnet","Magnet"),this.addIcon("chevron-up","Chevron Up"),this.addIcon("chevron-down","Chevron Down"),this.addIcon("retweet","Retweet"),this.addIcon("shopping-cart","Shopping Cart"),this.addIcon("folder-close","Folder Close"),this.addIcon("folder-open","Folder Open"),this.addIcon("resize-vertical","Resize Vertical"),this.addIcon("resize-horizontal","Resize Horizontal"),this.addIcon("hdd","Hdd"),this.addIcon("bullhorn","Bullhorn"),this.addIcon("bell","Bell"),this.addIcon("certificate","Certificate"),this.addIcon("thumbs-up","Thumbs Up"),this.addIcon("thumbs-down","Thumbs Down"),this.addIcon("hand-right","Hand Right"),this.addIcon("hand-left","Hand Left"),this.addIcon("hand-up","Hand Up"),this.addIcon("hand-down","Hand Down"),this.addIcon("circle-arrow-right","Circle Arrow Right"),this.addIcon("circle-arrow-left","Circle Arrow Left"),this.addIcon("circle-arrow-up","Circle Arrow Up"),this.addIcon("circle-arrow-down","Circle Arrow Down"),this.addIcon("globe","Globe"),this.addIcon("wrench","Wrench"),this.addIcon("tasks","Tasks"),this.addIcon("filter","Filter"),this.addIcon("briefcase","Briefcase"),this.addIcon("fullscreen","Fullscreen"),this.addIcon("dashboard","Dashboard"),this.addIcon("paperclip","Paperclip"),this.addIcon("heart-empty","Heart Empty"),this.addIcon("link","Link"),this.addIcon("phone","Phone"),this.addIcon("pushpin","Pushpin"),this.addIcon("usd","Usd"),this.addIcon("gbp","Gbp"),this.addIcon("sort","Sort"),this.addIcon("sort-by-alphabet","Sort By Alphabet"),this.addIcon("sort-by-alphabet-alt","Sort By Alphabet Alt"),this.addIcon("sort-by-order","Sort By Order"),this.addIcon("sort-by-order-alt","Sort By Order Alt"),this.addIcon("sort-by-attributes","Sort By Attributes"),this.addIcon("sort-by-attributes-alt","Sort By Attributes Alt"),this.addIcon("unchecked","Unchecked"),this.addIcon("expand","Expand"),this.addIcon("collapse-down","Collapse Down"),this.addIcon("collapse-up","Collapse Up"),this.addIcon("log-in","Log In"),this.addIcon("flash","Flash"),this.addIcon("log-out","Log Out"),this.addIcon("new-window","New Window"),this.addIcon("record","Record"),this.addIcon("save","Save"),this.addIcon("open","Open"),this.addIcon("saved","Saved"),this.addIcon("import","Import"),this.addIcon("export","Export"),this.addIcon("send","Send"),this.addIcon("floppy-disk","Floppy Disk"),this.addIcon("floppy-saved","Floppy Saved"),this.addIcon("floppy-remove","Floppy Remove"),this.addIcon("floppy-save","Floppy Save"),this.addIcon("floppy-open","Floppy Open"),this.addIcon("credit-card","Credit Card"),this.addIcon("transfer","Transfer"),this.addIcon("cutlery","Cutlery"),this.addIcon("header","Header"),this.addIcon("compressed","Compressed"),this.addIcon("earphone","Earphone"),this.addIcon("phone-alt","Phone Alt"),this.addIcon("tower","Tower"),this.addIcon("stats","Stats"),this.addIcon("sd-video","Sd Video"),this.addIcon("hd-video","Hd Video"),this.addIcon("subtitles","Subtitles"),this.addIcon("sound-stereo","Sound Stereo"),this.addIcon("sound-dolby","Sound Dolby"),this.addIcon("sound-5-1","Sound 5 1"),this.addIcon("sound-6-1","Sound 6 1"),this.addIcon("sound-7-1","Sound 7 1"),this.addIcon("copyright-mark","Copyright Mark"),this.addIcon("registration-mark","Registration Mark"),this.addIcon("cloud-download","Cloud Download"),this.addIcon("cloud-upload","Cloud Upload"),this.addIcon("tree-conifer","Tree Conifer"),this.addIcon("tree-deciduous","Tree Deciduous"),this.addIcon("cd","Cd"),this.addIcon("save-file","Save File"),this.addIcon("open-file","Open File"),this.addIcon("level-up","Level Up"),this.addIcon("copy","Copy"),this.addIcon("paste","Paste"),this.addIcon("alert","Alert"),this.addIcon("equalizer","Equalizer"),this.addIcon("king","King"),this.addIcon("queen","Queen"),this.addIcon("pawn","Pawn"),this.addIcon("bishop","Bishop"),this.addIcon("knight","Knight"),this.addIcon("baby-formula","Baby Formula"),this.addIcon("tent","Tent"),this.addIcon("blackboard","Blackboard"),this.addIcon("bed","Bed"),this.addIcon("apple","Apple"),this.addIcon("erase","Erase"),this.addIcon("hourglass","Hourglass"),this.addIcon("lamp","Lamp"),this.addIcon("duplicate","Duplicate"),this.addIcon("piggy-bank","Piggy Bank"),this.addIcon("scissors","Scissors"),this.addIcon("bitcoin","Bitcoin"),this.addIcon("yen","Yen"),this.addIcon("ruble","Ruble"),this.addIcon("scale","Scale"),this.addIcon("ice-lolly","Ice Lolly"),this.addIcon("ice-lolly-tasted","Ice Lolly Tasted"),this.addIcon("education","Education"),this.addIcon("option-horizontal","Option Horizontal"),this.addIcon("option-vertical","Option Vertical"),this.addIcon("menu-hamburger","Menu Hamburger"),this.addIcon("modal-window","Modal Window"),this.addIcon("oil","Oil"),this.addIcon("grain","Grain"),this.addIcon("sunglasses","Sunglasses"),this.addIcon("text-size","Text Size"),this.addIcon("text-color","Text Color"),this.addIcon("text-background","Text Background"),this.addIcon("object-align-top","Object Align Top"),this.addIcon("object-align-bottom","Object Align Bottom"),this.addIcon("object-align-horizontal","Object Align Horizontal"),this.addIcon("object-align-left","Object Align Left"),this.addIcon("object-align-vertical","Object Align Vertical"),this.addIcon("object-align-right","Object Align Right"),this.addIcon("triangle-right","Triangle Right"),this.addIcon("triangle-left","Triangle Left"),this.addIcon("triangle-bottom","Triangle Bottom"),this.addIcon("triangle-top","Triangle Top"),this.addIcon("console","Console"),this.addIcon("superscript","Superscript"),this.addIcon("subscript","Subscript"),this.addIcon("menu-left","Menu Left"),this.addIcon("menu-right","Menu Right"),this.addIcon("menu-down","Menu Down"),this.addIcon("menu-up","Menu Up")},t.prototype.addIcon=function(e,t){this.icons[e]={name:e,label:t}},t.prototype.render=function(){for(var e=this,t=[],n=0,o=Object.keys(this.icons);n<o.length;n++){var r=o[n],a="glyphicon glyphicon-"+this.icons[r].name+" icon-picker-icon";t.push(i.createElement("li",{onClick:function(t){e.onchange(t)}},i.createElement("span",{className:a}),this.icons[r].name))}return i.createElement("div",{className:"btn-group"},i.createElement("button",{type:"button",className:"btn btn-default dropdown-toggle","data-toggle":"dropdown"},i.createElement("span",{className:"glyphicon glyphicon-"+this.selectedItem}),i.createElement("span",{className:"caret"})),i.createElement("ul",{className:"dropdown-menu",role:"menu"},t))},t}(i.Component);t.default=a},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowChart=t.FlowChartColumnDefinition=t.eFlowChartType=void 0;var s,l=n(0),c=n(4),u=n(1);!function(e){e[e.BarChart=0]="BarChart",e[e.ColumnChart=1]="ColumnChart",e[e.GeoChart=2]="GeoChart",e[e.PieChart=3]="PieChart",e[e.DonutChart=4]="DonutChart"}(s=t.eFlowChartType||(t.eFlowChartType={}));var d=function(e,t){this.developerName=e,this.type=t};t.FlowChartColumnDefinition=d;var p=function(e){function t(t){var n=e.call(this,t)||this;return n.apiKey="",n.beginChartsApi=n.beginChartsApi.bind(n),n.apiLoaded=n.apiLoaded.bind(n),n.drawChart=n.drawChart.bind(n),n.flowMoved=n.flowMoved.bind(n),n.apiKey=n.getAttribute("APIKey",""),n}return r(t,e),t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.dontLoadAllValues()];case 2:return t.sent(),manywho.eventManager.addDoneListener(this.flowMoved,this.componentId),this.beginChartsApi(),[2]}}))}))},t.prototype.componentWillUnmount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentWillUnmount.call(this)];case 1:return t.sent(),manywho.eventManager.removeDoneListener(this.componentId),[2]}}))}))},t.prototype.flowMoved=function(e,t){return i(this,void 0,void 0,(function(){var n;return a(this,(function(o){return n=this,"FORWARD"===e.invokeType&&(this.loadingState!==c.eLoadingState.ready?window.setTimeout((function(){n.flowMoved(e,t)}),500):(manywho.model.parseEngineResponse(e,this.props.flowKey),this.beginChartsApi())),[2]}))}))},t.prototype.beginChartsApi=function(){if("undefined"==typeof google||void 0===google.charts)if(void 0===window.G13ChartLoading){var e=document.createElement("script");e.src="https://www.gstatic.com/charts/loader.js",e.addEventListener("load",this.apiLoaded),window.document.body.appendChild(e),window.G13ChartLoading=!0}else window.setTimeout(this.beginChartsApi,300);else this.apiLoaded()},t.prototype.apiLoaded=function(){var e;(null===google||void 0===google?void 0:google.charts)&&(null===(e=null===google||void 0===google?void 0:google.visualization)||void 0===e?void 0:e.GeoChart)?this.drawChart():(google.charts.load("current",{packages:["corechart","geochart"],mapsApiKey:this.apiKey}),google.charts.setOnLoadCallback(this.drawChart))},t.prototype.buildData=function(e){var t=this;this.model.dataSource&&this.model.dataSource.items.forEach((function(n){var o=[];t.propertyNames.forEach((function(e){var t=n.properties[e.developerName];e.type===u.eContentType.ContentNumber?o.push(parseInt(t.value)):o.push(t.value)})),e.push(o)}))},t.prototype.drawChart=function(){var e=[];if(e.push(this.columnNames),this.buildData(e),this.chartData=google.visualization.arrayToDataTable(e),!this.chart)switch(this.chartType){case s.BarChart:this.chart=new google.visualization.BarChart(document.getElementById(this.componentId));break;case s.ColumnChart:this.chart=new google.visualization.ColumnChart(document.getElementById(this.componentId));break;case s.GeoChart:this.chart=new google.visualization.GeoChart(document.getElementById(this.componentId));break;case s.PieChart:case s.DonutChart:this.chart=new google.visualization.PieChart(document.getElementById(this.componentId))}this.chart.draw(this.chartData,this.options)},t.prototype.render=function(){return l.createElement("div",{id:this.componentId})},t}(c.FlowBaseComponent);t.FlowChart=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){this.columns=new Map};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(e,t){this.name=e,this.originalValue=t,this.newValue=t};t.default=o},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(3),s=i(n(0)),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){var e,t=this,n=this.props.root,o=null===(e=n.rowMap.get(this.props.id))||void 0===e?void 0:e.objectData,r=[];Object.keys(n.outcomes).forEach((function(e){if(!1===n.outcomes[e].isBulkAction){var t=void 0,i=void 0;(!n.outcomes[e].attributes.display||n.outcomes[e].attributes.display.value.indexOf("text")>=0)&&(i=s.default.createElement("span",{className:"sft-table-cell-button-element sft-table-cell-button-label"},n.outcomes[e].label)),n.outcomes[e].attributes.display&&n.outcomes[e].attributes.display.value.indexOf("icon")>=0&&(t=s.default.createElement("span",{className:"sft-table-cell-button-element sft-table-cell-button-icon glyphicon glyphicon-"+(n.outcomes[e].attributes.icon.value||"plus")})),r.push(s.default.createElement("div",{className:"sft-table-cell-button",title:n.outcomes[e].label,onClick:function(t){n.doOutcome(e,o.internalId)}},t,i))}}));var i=[];return i.push(s.default.createElement("td",{className:"sft-table-cell"},s.default.createElement("input",{className:"sft-checkbox",type:"checkbox",onClick:function(e){n.toggleSelect(e,t.props.id)},checked:n.selectedRowMap.has(this.props.id)}))),r.length>0&&i.push(s.default.createElement("td",{className:"sft-table-cell"},s.default.createElement("div",{className:"sft-table-cell-buttons"},r))),n.colMap.forEach((function(e){var t;switch(e.contentType){case a.eContentType.ContentDateTime:var n=new Date(o.properties[e.developerName].value);!0==(n instanceof Date&&!isNaN(n.getTime()))&&(t=n.toLocaleString());break;default:t=o.properties[e.developerName].value}i.push(s.default.createElement("td",{className:"sft-table-cell"},s.default.createElement("span",{className:"sft-table-cell-text"},t)))})),s.default.createElement("tr",{className:"sft-table-row"},i)},t}(s.default.Component);t.default=l},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=i(n(0)),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.render=function(){var e=[],t=this.props.root,n=[];return Object.keys(t.outcomes).forEach((function(e){!1===t.outcomes[e].isBulkAction&&n.push(e)})),t.colMap.size>0&&(e.push(a.default.createElement("th",{className:"sft-check-header"},a.default.createElement("input",{className:"sft-checkbox",type:"checkbox",onClick:function(e){t.toggleSelectAll(e)}}))),n.length>0&&e.push(a.default.createElement("th",{className:"sft-column-header"},a.default.createElement("div",{className:"sft-column-header-title"},a.default.createElement("span",{className:"sft-column-header-title-label"},"Actions")))),t.colMap.forEach((function(n){var o=t.filters.getSortIcon(n.developerName),r=t.filters.getFilterIcon(n.developerName);e.push(a.default.createElement("th",{className:"sft-column-header"},a.default.createElement("div",{className:"sft-column-header-wrapper"},a.default.createElement("div",{className:"sft-column-header-top"},a.default.createElement("div",{className:"sft-column-header-title"},a.default.createElement("span",{className:"sft-column-header-title-label"},n.label))),a.default.createElement("div",{className:"sft-column-header-bottom"},a.default.createElement("div",{className:"sft-column-header-flags"},o),a.default.createElement("div",{className:"sft-column-header-buttons"},r)))))}))),a.default.createElement("tr",{className:"sft-column-headers"},e)},t}(a.default.Component);t.default=s},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(8)),i=n(13),a=function(){function e(e,t,n,o){var a=this;void 0===n&&(n=i.eSortDirection.none),void 0===o&&(o=[]),this.sort=i.eSortDirection.none,this.criteria=[],this.key=e,this.parent=t,this.sort=n,o.forEach((function(e){e=JSON.parse(e),a.criteria.push(new r.default(e.comparator,e.value))})),this.notify=this.notify.bind(this)}return e.prototype.clearFilters=function(){this.criteria=[],this.notify(i.eFilterEvent.filter)},e.prototype.notify=function(e){this.parent.notify(this.key,e)},e.prototype.sortAscending=function(){this.sort=i.eSortDirection.ascending,this.notify(i.eFilterEvent.sort)},e.prototype.sortDescending=function(){this.sort=i.eSortDirection.descending,this.notify(i.eFilterEvent.sort)},e.prototype.sortToggle=function(){switch(this.sort){case i.eSortDirection.none:case i.eSortDirection.descending:this.sort=i.eSortDirection.ascending;break;default:this.sort=i.eSortDirection.descending}this.notify(i.eFilterEvent.sort)},e.prototype.sortNone=function(){this.sort=i.eSortDirection.none,this.notify(i.eFilterEvent.sort)},e.prototype.getForStorage=function(){var e={};return e.key=this.key,e.sort=this.sort,e.criteria=[],this.criteria.forEach((function(t){e.criteria.push(t.getForStorage())})),JSON.stringify(e)},e}();t.default=a},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&i(t,e,n);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=l(n(0)),u=s(n(8)),d=l(n(36)),p=function(e){function t(t){var n=e.call(this,t)||this;return n.filter=n.props.filter,n.newCriteria=[],n.filter.criteria.forEach((function(e){n.newCriteria.push(e)})),n.addCriteria=n.addCriteria.bind(n),n}return r(t,e),t.prototype.addCriteria=function(){this.newCriteria.push(new u.default(u.eColumnComparator.equalTo,"")),this.forceUpdate()},t.prototype.getOptions=function(e){var t=[];return t.push(c.default.createElement("option",{value:u.eColumnComparator.equalTo,selected:e.comparator===u.eColumnComparator.equalTo},"Equals"),c.default.createElement("option",{value:u.eColumnComparator.notEqualTo,selected:e.comparator===u.eColumnComparator.notEqualTo},"Not Equal To"),c.default.createElement("option",{value:u.eColumnComparator.contains,selected:e.comparator===u.eColumnComparator.contains},"Contains"),c.default.createElement("option",{value:u.eColumnComparator.notContains,selected:e.comparator===u.eColumnComparator.notContains},"Does Not Contain"),c.default.createElement("option",{value:u.eColumnComparator.startsWith,selected:e.comparator===u.eColumnComparator.startsWith},"Starts With"),c.default.createElement("option",{value:u.eColumnComparator.endsWith,selected:e.comparator===u.eColumnComparator.endsWith},"Ends With"),c.default.createElement("option",{value:u.eColumnComparator.in,selected:e.comparator===u.eColumnComparator.in},"Is one of"),c.default.createElement("option",{value:u.eColumnComparator.notIn,selected:e.comparator===u.eColumnComparator.notIn},"Is Not One Of")),t},t.prototype.getColumnUniques=function(e,t){var n=this.props.root;return c.default.createElement(d.default,{allItems:n.colValMap.get(e),selectedItems:t.value})},t.prototype.prepCriteriaValue=function(e){switch(e.comparator){case u.eColumnComparator.in:case u.eColumnComparator.notIn:e.value=new Map;break;default:"string"!=typeof e.value&&(e.value="")}},t.prototype.render=function(){var e=this,t=[];return 0===this.newCriteria.length?t.push(c.default.createElement("div",{className:"sft-fcf-row"},c.default.createElement("span",{className:"sft-fcf-label"},"No Criteria defined"))):this.newCriteria.forEach((function(n){var o,r=e.getOptions(n);switch(n.comparator){case u.eColumnComparator.in:case u.eColumnComparator.notIn:o=e.getColumnUniques(e.props.developerName,n);break;default:o=c.default.createElement("input",{type:"text",className:"sft-fcf-input",defaultValue:n.value,onChange:function(e){n.value=e.target.value}})}t.push(c.default.createElement("div",{className:"sft-fcf-row"},c.default.createElement("select",{className:"sft-fcf-select",onChange:function(t){n.comparator=parseInt(t.target.options[t.target.selectedIndex].value),e.prepCriteriaValue(n),e.forceUpdate()}},r),o,c.default.createElement("span",{className:"sft-fcf-button glyphicon glyphicon-remove-sign",title:"Remove criteria",onClick:function(t){e.newCriteria=e.newCriteria.filter((function(e){return e!==n})),e.forceUpdate()}})))})),t.push(c.default.createElement("div",{className:"sft-fcf-buttons"},c.default.createElement("span",{className:"sft-fcf-button glyphicon glyphicon-plus-sign",title:"Add criteria",onClick:this.addCriteria}))),c.default.createElement("div",{className:"modal-dialog-content"},t)},t}(c.default.Component);t.default=p},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=i(n(0));n(37);var s=function(e){function t(t){var n=e.call(this,t)||this;return n.expanded=!1,n.showCheckboxes=n.showCheckboxes.bind(n),n}return r(t,e),t.prototype.showCheckboxes=function(){var e=document.getElementById("checkboxes");this.expanded?(e.style.display="none",this.expanded=!1):(e.style.display="flex",this.expanded=!0)},t.prototype.render=function(){var e=this,t=[],n=new Intl.Collator(void 0,{numeric:!0,sensitivity:"base"});return Array.from(this.props.allItems.keys()).sort((function(e,t){return n.compare(e,t)})).forEach((function(n){t.push(a.default.createElement("div",{className:"checkbox-row"},a.default.createElement("div",{className:"checkbox-checkbox-wrapper"},a.default.createElement("input",{type:"checkbox",id:n,key:n,className:"sft-checkbox",checked:e.props.selectedItems.has(n),onClick:function(t){e.props.selectedItems.has(n)?e.props.selectedItems.delete(n):e.props.selectedItems.set(n,n),e.forceUpdate()}})),a.default.createElement("div",{className:"checkbox-label-wrapper"},a.default.createElement("span",{className:"checkbox-row-label"},n))))})),a.default.createElement("div",{className:"multiselect"},a.default.createElement("div",{className:"selectBox",onClick:this.showCheckboxes},a.default.createElement("select",null,a.default.createElement("option",null,"Select an option")),a.default.createElement("div",{className:"overSelect"})),a.default.createElement("div",{className:"checkboxScroller"},a.default.createElement("div",{className:"checkboxes",id:"checkboxes"},t)))},t}(a.default.Component);t.default=s},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=i(n(0)),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.componentDidMount=function(){this.forceUpdate(),this.maxPerPageChanged=this.maxPerPageChanged.bind(this)},t.prototype.maxPerPageChanged=function(e){this.props.root.maxPerPageChanged(parseInt(this.maxPerPage.options[this.maxPerPage.selectedIndex].value))},t.prototype.render=function(){var e,t,n,o,r=this,i=this.props.root,s="Selected "+i.selectedRowMap.size+" of "+i.currentRowMap.size+" items from a total dataset of "+i.rowMap.size,l="page "+(i.currentRowPage+1)+" of "+i.currentRowPages.length;i.currentRowPage>0?(e=a.default.createElement("span",{className:"glyphicon glyphicon-fast-backward sft-footer-pagination-button",title:"First page",onClick:i.firstPage}),t=a.default.createElement("span",{className:"glyphicon glyphicon-step-backward sft-footer-pagination-button",title:"Previous page",onClick:i.previousPage})):(e=a.default.createElement("span",{className:"glyphicon glyphicon-fast-backward sft-footer-pagination-button sft-footer-pagination-button-disabled"}),t=a.default.createElement("span",{className:"glyphicon glyphicon-step-backward sft-footer-pagination-button sft-footer-pagination-button-disabled"})),i.currentRowPage<i.currentRowPages.length-1?(o=a.default.createElement("span",{className:"glyphicon glyphicon-fast-forward sft-footer-pagination-button",title:"Last page",onClick:i.lastPage}),n=a.default.createElement("span",{className:"glyphicon glyphicon-step-forward sft-footer-pagination-button",title:"Next page",onClick:i.nextPage})):(o=a.default.createElement("span",{className:"glyphicon glyphicon-fast-forward sft-footer-pagination-button sft-footer-pagination-button-disabled"}),n=a.default.createElement("span",{className:"glyphicon glyphicon-step-forward sft-footer-pagination-button sft-footer-pagination-button-disabled"}));var c=[];c.push(10,20,50,100),c.indexOf(i.maxPageRows)<0&&c.push(i.maxPageRows),c=c.sort((function(e,t){return e-t}));var u=[];c.forEach((function(e){u.push(a.default.createElement("option",{value:e,selected:i.maxPageRows===e},e))}));var d=a.default.createElement("select",{className:"sft-footer-select",onChange:this.maxPerPageChanged,ref:function(e){r.maxPerPage=e}},u);return a.default.createElement("div",{className:"sft-footer"},a.default.createElement("div",{className:"sft-footer-summary"},a.default.createElement("span",{className:"sft-footer-summary-label"},s)),a.default.createElement("div",{className:"sft-footer-spacer"}),a.default.createElement("div",{className:"sft-footer-perpage"},a.default.createElement("div",{className:"sft-footer-perpage-label"},"Items per page"),a.default.createElement("div",{className:"sft-footer-perpage-dropdown"},d)),a.default.createElement("div",{className:"sft-footer-pagination"},e,t,a.default.createElement("span",{className:"sft-footer-pagination-label"},l),n,o))},t}(a.default.Component);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(3),r=function(){function e(){}return e.export=function(e,t,n){var o=this,r="",i="",a="";t.forEach((function(t){0===i.length&&(i=o.buildHeaders(e,t.objectData)),a=o.buildRow(e,t.objectData),r+=a}));var s=new Blob([i+r],{type:"text/csv"});if(navigator.msSaveBlob)navigator.msSaveBlob(s,n);else{var l=document.createElement("a");if(void 0!==l.download){var c=URL.createObjectURL(s);l.setAttribute("href",c),l.setAttribute("download",n),l.style.visibility="hidden",document.body.appendChild(l),l.click(),document.body.removeChild(l)}}},e.buildHeaders=function(e,t){var n="";return e.forEach((function(e){switch(e.contentType){case o.eContentType.ContentList:t.properties[e.developerName].value.items.forEach((function(e){n.length>0&&(n+=","),n+='"'+e.properties.ATTRIBUTE_DISPLAY_NAME.value+'"'}));break;default:n.length>0&&(n+=","),n+='"'+e.label+'"'}})),n+="\r\n"},e.buildRow=function(e,t){var n="";return e.forEach((function(e){switch(e.contentType){case o.eContentType.ContentList:t.properties[e.developerName].value.items.forEach((function(e){n.length>0&&(n+=","),n+='"'+e.properties.ATTRIBUTE_VALUE.value+'"'}));break;default:n.length>0&&(n+=","),n+='"'+t.properties[e.developerName].value+'"'}})),n+="\r\n"},e}();t.default=r},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=i(n(0)),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.render=function(){var e=this.props.root,t=[],n=[],o="true"===e.getAttribute("canExport","true").toLowerCase();return!0===o&&n.push(a.default.createElement("div",{className:"sft-ribbon-button-wrapper",onClick:function(t){t.stopPropagation(),e.doExport(e.rowMap)}},a.default.createElement("span",{key:"exportAll",className:"glyphicon glyphicon-floppy-save sft-ribbon-button-icon",title:"Export All"}),a.default.createElement("span",{className:"sft-ribbon-button-label"},"Export All"))),e.rowMap.size>e.currentRowMap.size&&!0===o&&n.push(a.default.createElement("div",{className:"sft-ribbon-button-wrapper",onClick:function(t){t.stopPropagation(),e.doExport(e.currentRowMap)}},a.default.createElement("span",{key:"exportShown",className:"glyphicon glyphicon-floppy-save sft-ribbon-button-icon",title:"Export Shown"}),a.default.createElement("span",{className:"sft-ribbon-button-label"},"Export Shown"))),Object.keys(e.outcomes).forEach((function(o){var r,i,s,l=e.outcomes[o];l.isBulkAction&&"OnSelect"!==l.developerName&&"OnChange"!==l.developerName&&!l.developerName.toLowerCase().startsWith("cm")&&("true"===(null===(r=l.attributes.RequiresSelected)||void 0===r?void 0:r.value)?e.selectedRowMap.size>0&&t.push(a.default.createElement("div",{className:"sft-ribbon-button-wrapper",onClick:function(t){e.doOutcome(o,void 0)}},a.default.createElement("span",{key:o,className:"glyphicon glyphicon-"+((null===(i=l.attributes.icon)||void 0===i?void 0:i.value)||"plus")+" sft-ribbon-button-icon",title:l.label||o}),a.default.createElement("span",{className:"sft-ribbon-button-label"},l.label||o))):n.push(a.default.createElement("div",{className:"sft-ribbon-button-wrapper",onClick:function(t){e.doOutcome(o,void 0)}},a.default.createElement("span",{key:o,className:"glyphicon glyphicon-"+((null===(s=l.attributes.icon)||void 0===s?void 0:s.value)||"plus")+" sft-ribbon-button-icon",title:l.label||o}),a.default.createElement("span",{className:"sft-ribbon-button-label"},l.label||o))))})),e.selectedRowMap.size>0&&!0===o&&t.push(a.default.createElement("div",{className:"sft-ribbon-button-wrapper",onClick:function(t){t.stopPropagation(),e.doExport(e.selectedRowMap)}},a.default.createElement("span",{key:"exportSelected",className:"glyphicon glyphicon-floppy-save sft-ribbon-button-icon",title:"Export Selected"}),a.default.createElement("span",{className:"sft-ribbon-button-label"},"Export Selected"))),a.default.createElement("div",{className:"sft-ribbon"},a.default.createElement("div",{className:"sft-ribbon-left-wrapper"},a.default.createElement("div",{className:"sft-ribbon-title-wrapper"},a.default.createElement("span",{className:"sft-ribbon-title"},"Available actions:")),a.default.createElement("div",{className:"sft-ribbon-hbuttons-wrapper"},t)),a.default.createElement("div",{className:"sft-ribbon-right-wrapper"},a.default.createElement("div",{className:"sft-ribbon-title-wrapper"},a.default.createElement("span",{className:"sft-ribbon-title"})),a.default.createElement("div",{className:"sft-ribbon-hbuttons-wrapper"},n)))},t}(a.default.Component);t.default=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,