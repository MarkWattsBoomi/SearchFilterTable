!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=14)}([function(e,t){e.exports=React},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowField=t.eContentType=void 0;var o,r=n(2),i=n(4);!function(e){e[e.unknown=0]="unknown",e[e.ContentString=1]="ContentString",e[e.ContentNumber=2]="ContentNumber",e[e.ContentObject=3]="ContentObject",e[e.ContentBoolean=4]="ContentBoolean",e[e.ContentList=5]="ContentList",e[e.ContentPassword=6]="ContentPassword",e[e.ContentContent=7]="ContentContent",e[e.ContentDateTime=8]="ContentDateTime",e[e.ContentEncrypted=9]="ContentEncrypted"}(o=t.eContentType||(t.eContentType={}));var a=function(){function e(e){if(this.ContentType=o.unknown,this.DeveloperName="",this.TypeElementDeveloperName="",this.TypeElementId="",this.TypeElementPropertyDeveloperName="",this.TypeElementPropertyId="",this.ValueElementId="",e)switch(this.ContentType=o[e.contentType],this.DeveloperName=e.developerName,this.TypeElementDeveloperName=e.typeElementDeveloperName,this.TypeElementId=e.typeElementId,this.TypeElementPropertyDeveloperName=e.typeElementPropertyDeveloperName,this.TypeElementPropertyId=e.typeElementPropertyId,this.ValueElementId=e.valueElementId,this.ContentType){case o.ContentObject:this.Value=e.objectData?new r.FlowObjectData(e.objectData):void 0;break;case o.ContentList:this.Value=e.objectData&&e.objectData[0]?new i.FlowObjectDataArray(e.objectData):new i.FlowObjectDataArray([]);break;default:this.Value=e.contentValue}}return Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementDeveloperName",{get:function(){return this.TypeElementDeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyDeveloperName",{get:function(){return this.TypeElementPropertyDeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"valueElementId",{get:function(){return this.ValueElementId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},set:function(e){this.Value=e},enumerable:!1,configurable:!0}),e.prototype.iFlowField=function(){var e="",t=[];switch(this.ContentType){case o.ContentObject:var n=this.Value;t.push(n.iObjectData());break;case o.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value?this.Value:""}return{contentType:o[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementDeveloperName:this.TypeElementDeveloperName,typeElementId:this.TypeElementId,typeElementPropertyDeveloperName:this.TypeElementPropertyDeveloperName,typeElementPropertyId:this.TypeElementPropertyId,valueElementId:this.ValueElementId}},e}();t.FlowField=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowObjectData=void 0;var o=n(10),r=function(){function e(e){if(this.DeveloperName="",this.ExternalId="",this.InternalId="",this.IsSelected=!1,this.Order=0,this.TypeElementId="",this.Properties={},e&&e[0]){var t=e[0];if(this.DeveloperName=t.developerName,this.InternalId=t.internalId,this.ExternalId=t.externalId,this.Order=t.order,this.IsSelected=t.isSelected,this.TypeElementId=t.typeElementId,t.properties&&t.properties.length>0)for(var n=0,r=t.properties;n<r.length;n++){var i=r[n];this.Properties[i.developerName]=new o.FlowObjectDataProperty(i)}}else console.log("null data")}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"externalId",{get:function(){return this.ExternalId},set:function(e){this.ExternalId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"internalId",{get:function(){return this.InternalId},set:function(e){this.InternalId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isSelected",{get:function(){return this.IsSelected},set:function(e){this.IsSelected=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},set:function(e){this.Order=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"properties",{get:function(){return this.Properties},enumerable:!1,configurable:!0}),e.newInstance=function(e){return new this([{developerName:e,externalId:"",internalId:manywho.utils.guid(),isSelected:!1,order:0,properties:[],typeElementId:""}])},e.prototype.addProperty=function(e){this.Properties[e.developerName]=e},e.prototype.removeProperty=function(e){delete this.Properties[e]},e.prototype.clone=function(t){var n=this,o=e.newInstance(t||this.DeveloperName);return Object.keys(this.properties).forEach((function(e){var t=n.properties[e].clone();o.properties[e]=t})),o},e.prototype.iObjectData=function(e){for(var t=[],n=0,o=Object.keys(this.properties);n<o.length;n++){var r=o[n];t.push(this.properties[r].iFlowObjectDataProperty())}return{developerName:this.developerName,externalId:this.externalId,internalId:this.internalId,isSelected:e||this.isSelected,order:this.order,properties:t,typeElementId:this.TypeElementId}},e.prototype.iFlowObjectDataArray=function(e){var t=[];return t.push(this.iObjectData(e)),t},e}();t.FlowObjectData=r},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowBaseComponent=t.eLoadingState=void 0;var s=n(0);n(17);var l,c=n(6),u=n(9),d=n(1),p=n(2),h=n(4),f=n(11),m=n(18);!function(e){e[e.ready=0]="ready",e[e.loading=1]="loading",e[e.saving=2]="saving",e[e.moving=3]="moving",e[e.inititializing=4]="inititializing",e[e.inititialized=5]="inititialized",e[e.mounting=6]="mounting",e[e.mounted=7]="mounted"}(l=t.eLoadingState||(t.eLoadingState={}));var y=function(e){function t(t){var n=e.call(this,t)||this;n.Fields={},n.Attributes={},n.Outcomes={},n.sendCollaborationMessage=m(n._sendCollaborationMessage,100,null),n.Fields={},n.LoadingState=l.inititializing,n.loadAllValues=n.loadAllValues.bind(n),n.dontLoadAllValues=n.dontLoadAllValues.bind(n),n.updateValues=n.updateValues.bind(n),n.triggerOutcome=n.triggerOutcome.bind(n),n.ComponentId=n.props.id,n.ParentId=n.props.parentId,n.FlowKey=n.props.flowKey,n.Attributes={},n.loadModel=n.loadModel.bind(n),n.loadAttributes=n.loadAttributes.bind(n),n.loadOutcomes=n.loadOutcomes.bind(n),n.receiveMessage=n.receiveMessage.bind(n),n.getStateValue=n.getStateValue.bind(n),n.setStateValue=n.setStateValue.bind(n),n.getStateValueType=n.getStateValueType.bind(n),n.sendCollaborationMessage=n.sendCollaborationMessage.bind(n),n.onBeforeSend=n.onBeforeSend.bind(n),n.onDone=n.onDone.bind(n),n.calculateValue=n.calculateValue.bind(n),window.addEventListener("message",n.receiveMessage,!1),n.loadModel(),n.loadAttributes(),n.loadOutcomes();var o="";return!manywho.settings.global("platform.uri")&&manywho.settings.global("platform.uri").length<=0&&(o=window.location.origin||"https://flow.manywho.com"),n.StateId=manywho.utils.extractStateId(n.props.flowKey),n.TenantId=manywho.utils.extractTenantId(n.props.flowKey),n.invokeurl=o+"/api/run/1/state/"+n.StateId,n.url=o+"/api/run/1/state/"+n.StateId+"/values",n.userurl=o+"/api/run/1/state/"+n.StateId+"/values/03dc41dd-1c6b-4b33-bf61-cbd1d0778fff",n.valueurl=o+"/api/run/1/state/"+n.StateId+"/values/name",n.LoadingState=l.inititialized,n}return r(t,e),Object.defineProperty(t.prototype,"tenantId",{get:function(){return this.TenantId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"stateId",{get:function(){return this.StateId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"flowKey",{get:function(){return this.FlowKey},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"componentId",{get:function(){return this.ComponentId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"parentId",{get:function(){return this.ParentId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isReady",{get:function(){return this.LoadingState===l.ready},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"loadingState",{get:function(){return this.LoadingState},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"outcomes",{get:function(){return this.Outcomes},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fields",{get:function(){return this.Fields},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"model",{get:function(){return this.Model},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"user",{get:function(){return this.User},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"joinURI",{get:function(){return window.location.href},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isDesignTime",{get:function(){return this.IsDesignTime},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"authenticationToken",{get:function(){return JSON.parse(sessionStorage.flowUser).authenticationToken},enumerable:!1,configurable:!0}),t.prototype.getAttribute=function(e,t){return this.attributes[e]?this.attributes[e].value:t||""},t.prototype.onBeforeSend=function(e,t){if(t){var n=this.getOutcomeById(t.mapElementInvokeRequest.selectedOutcomeId),o=manywho.eventManager.outcomeBeingTriggered;n&&(o&&o.id===n.id||(manywho.eventManager.outcomeBeingTriggered=n))}else manywho.eventManager.outcomeBeingTriggered=void 0},t.prototype.calculateValue=function(e){if(e.startsWith("{{")&&e.endsWith("}}")){for(var t=e.replace("{{",""),n=void 0,o="",r=(t=t.replace("}}","")).split("."),i=0;i<r.length;i++)if(0===i)(n=this.fields[r[i]])?n.ContentType!==d.eContentType.ContentObject&&n.ContentType!==d.eContentType.ContentList&&(o=n.value):(console.log("The Value ["+r[i]+"] was not found, have you included it in your flow"),o=e);else if(n){var a=n.value.properties[r[i]];a?a.contentType===d.eContentType.ContentObject||a.contentType===d.eContentType.ContentList?n=n.value.properties[r[i]].value:o=n.value.properties[r[i]].value:o=e}else o=e;return o}return e},t.prototype.onDone=function(e,t){return i(this,void 0,void 0,(function(){var t,n=this;return a(this,(function(o){switch(o.label){case 0:return"FORWARD"!==e.invokeType?[3,2]:(manywho.model.parseEngineResponse(e,this.flowKey),this.loadModel(),this.loadAttributes(),this.loadOutcomes(),[4,this.preserveState()]);case 1:o.sent(),o.label=2;case 2:return manywho.eventManager.outcomeBeingTriggered&&manywho.eventManager.outcomeBeingTriggered.attributes&&(t=manywho.eventManager.outcomeBeingTriggered,Object.keys(manywho.eventManager.outcomeBeingTriggered.attributes).forEach((function(e){return i(n,void 0,void 0,(function(){var n,o,r;return a(this,(function(i){switch(i.label){case 0:switch(n=manywho.eventManager.outcomeBeingTriggered.attributes[e],n.name.toLowerCase()){case"autoclose":return[3,1];case"autoopen":return[3,2];case"autonav":case"automove":return[3,6];case"autoprint":return[3,10]}return[3,11];case 1:return"true"===n.value.toLowerCase()&&window.close(),[3,11];case 2:return(o=t.attributes.AutoOpenUrl||void 0)&&o.value.length>0?[4,this.calculateValue(o.value)]:[3,4];case 3:return r=i.sent(),window.open(r,"_blank"),[3,5];case 4:alert("No 'AutoOpenUrl' specified in the outcome's attributes"),i.label=5;case 5:return[3,11];case 6:return(o=t.attributes.AutoNavUrl||void 0)&&o.value.length>0?[4,this.calculateValue(o.value)]:[3,8];case 7:return r=i.sent(),window.open(r,"_blank"),[3,9];case 8:alert("No 'AutoNavUrl' specified in the outcome's attributes"),i.label=9;case 9:return[3,11];case 10:return window.print(),[3,11];case 11:return[2]}}))}))}))),this.LoadingState=l.ready,manywho.eventManager.outcomeBeingTriggered=void 0,[2]}}))}))},t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return this.LoadingState=l.mounting,manywho.eventManager.addDoneListener(this.onDone,this.componentId+"_core"),manywho.eventManager.addBeforeSendListener(this.onBeforeSend,this.componentId+"_core"),[4,this.preserveState()];case 1:return e.sent(),this.LoadingState=l.mounted,manywho.utils.removeLoadingIndicator("loader"),[2,Promise.resolve()]}}))}))},t.prototype.preserveState=function(){return i(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return this.LoadingState=l.mounting,[4,this.setStateValue(this.getStateValue())];case 1:return e.sent(),this.LoadingState=l.mounted,[2]}}))}))},t.prototype.componentWillUnmount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(e){return manywho.eventManager.removeBeforeSendListener(this.componentId+"_core"),manywho.eventManager.removeDoneListener(this.componentId+"_core"),[2,Promise.resolve()]}))}))},t.prototype.loadOutcome=function(e){if(e){var t=manywho.model.getOutcome(e,this.props.flowKey);if(t)return this.Outcomes[t.developerName]=new f.FlowOutcome(t),this.Outcomes[t.developerName]}},t.prototype.loadOutcomes=function(){this.Outcomes={};for(var e=manywho.model.getOutcomes(this.props.id,this.props.flowKey),t=0,n=e;t<n.length;t++){var o=n[t];this.Outcomes[o.developerName]=new f.FlowOutcome(o)}for(var r=0,i=e=manywho.model.getOutcomes("",this.props.flowKey);r<i.length;r++){o=i[r];this.Outcomes[o.developerName]=new f.FlowOutcome(o)}},t.prototype.getOutcomeById=function(e){var t,n=this;return Object.keys(this.outcomes).forEach((function(o){n.outcomes[o].id===e&&(t=n.outcomes[o])})),t||(t=this.loadOutcome(e)),t},t.prototype.loadAttributes=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(e){var t=e.attributes;if(t)for(var n=0,o=Object.keys(t);n<o.length;n++){var r=o[n];this.Attributes[r]=new c.FlowAttribute(r,t[r])}}},t.prototype.loadModel=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(e){this.Model={contentType:e.contentType,content:e.content,dataSource:new h.FlowObjectDataArray([]),developerName:e.developerName,displayColumns:[],enabled:e.isEnabled,height:e.height,helpInfo:e.helpInfo,hintInfo:e.hintValue,joinUri:this.joinURI,label:e.label,maxSize:e.maxSize,multiSelect:e.isMultiSelect,readOnly:!e.isEditable,required:e.isRequired,size:e.size,validationMessage:e.validationMessage,visible:e.isVisible,width:e.width};var t=e.objectData;if(t)for(var n=0,o=t;n<o.length;n++){var r=o[n];this.Model.dataSource.addItem(new p.FlowObjectData([r]))}var i=e.columns;if(i)for(var a=0,s=i;a<s.length;a++){var l=s[a];this.Model.displayColumns.push(new u.FlowDisplayColumn(l))}}},t.prototype.loadValue=function(e){return i(this,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:return this.LoadingState=l.loading,[4,this.callRequestOld(this.valueurl+"/"+e,"GET",{})];case 1:return(t=n.sent())&&(this.Fields[t.developerName]=new d.FlowField(t)),this.LoadingState=l.ready,[2,this.Fields[t.developerName]]}}))}))},t.prototype.getResultBodyText=function(e){return i(this,void 0,void 0,(function(){return a(this,(function(t){return[2,e.text().then((function(e){return e.startsWith('"')&&(e=e.substr(1)),e.endsWith('"')&&(e=e.substr(0,e.length-1)),e}))]}))}))},t.prototype.callRequest=function(e,t,n){return i(this,void 0,void 0,(function(){var o,r,s=this;return a(this,(function(l){switch(l.label){case 0:return o=[],(r={}).method=t,r.headers={"Content-Type":"application/json",Authorization:this.authenticationToken,ManyWhoTenant:this.tenantId},r.credentials="same-origin","POST"!==t&&"PUT"!==t||(r.body=n),[4,fetch(e,r).then((function(e){return i(s,void 0,void 0,(function(){var t,n;return a(this,(function(r){switch(r.label){case 0:return 200!==e.status?[3,2]:[4,this.getResultBodyText(e)];case 1:return t=r.sent(),JSON.parse(t).forEach((function(e){o.push(e)})),console.log("Loaded Values"),[2,o];case 2:return[4,this.getResultBodyText(e)];case 3:return n=r.sent(),console.log("Can't load values - "+n),[2,o]}}))}))}))];case 1:return l.sent(),[2]}}))}))},t.prototype.callRequestOld=function(e,t,n){return i(this,void 0,void 0,(function(){return a(this,(function(o){switch(o.label){case 0:return[4,manywho.connection.request(this,null,e,t,this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),n)];case 1:return[2,o.sent()]}}))}))},t.prototype.loadAllValues=function(){return i(this,void 0,void 0,(function(){var e,t,n,o=this;return a(this,(function(r){switch(r.label){case 0:return this.LoadingState=l.loading,this.Fields={},[4,this.callRequestOld(this.url,"GET",{})];case 1:return(r.sent()||[]).map((function(e){e&&(o.Fields[e.developerName]=new d.FlowField(e))})),[4,this.callRequestOld(this.userurl,"GET",{})];case 2:return(e=r.sent())&&(t=new d.FlowField(e),n=t.value.properties,this.User={directoryId:n["Directory Id"].value,directoryName:n["Directory Name"].value,email:n.Email.value||"mark",firstName:n["First Name"].value,groupId:n["Primary Group Id"].value,groupName:n["Primary Group Name"].value,id:n["User ID"].value,ipAddress:n["IP Address"].value,language:n.Language.value,lastName:n["Last Name"].value,location:n.Location.value,roleId:n["Role Id"].value,roleName:n["Role Name"].value,status:n.Status.value,userName:n.Username.value}),this.LoadingState=l.ready,[2,Promise.resolve()]}}))}))},t.prototype.dontLoadAllValues=function(){return i(this,void 0,void 0,(function(){var e,t,n;return a(this,(function(o){switch(o.label){case 0:return this.LoadingState=l.loading,[4,this.callRequestOld(this.userurl,"GET",{})];case 1:return(e=o.sent())&&(t=new d.FlowField(e),n=t.value.properties,this.User={directoryId:n["Directory Id"].value,directoryName:n["Directory Name"].value,email:n.Email.value||"mark",firstName:n["First Name"].value,groupId:n["Primary Group Id"].value,groupName:n["Primary Group Name"].value,id:n["User ID"].value,ipAddress:n["IP Address"].value,language:n.Language.value,lastName:n["Last Name"].value,location:n.Location.value,roleId:n["Role Id"].value,roleName:n["Role Name"].value,status:n.Status.value,userName:n.Username.value}),this.LoadingState=l.ready,[2,Promise.resolve()]}}))}))},t.prototype.getStateValue=function(){var e=manywho.state.getComponent(this.componentId,this.flowKey)||{},t=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(t)switch(t.contentType){case"ContentObject":return e.objectData&&e.objectData[0]&&e.objectData[0].properties.length>0?new p.FlowObjectData([e.objectData[0]]):(n=this.model.dataSource.getSelectedItems()).items.length>0?n.items[0]:void 0;case"ContentList":return e.objectData&&e.objectData.length>0?new h.FlowObjectDataArray(e.objectData):(n=this.model.dataSource.getSelectedItems()).items.length>0?n:void 0;var n;default:return e.contentValue?e.contentValue:""}},t.prototype.getStateValueType=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey).contentType;return d.eContentType[e]},t.prototype.setStateValue=function(e,t){return i(this,void 0,void 0,(function(){var t,n,o,r,i;return a(this,(function(a){if(this.LoadingState===l.mounting||this.LoadingState===l.ready){if(t=this.loadingState,this.LoadingState=l.saving,n=manywho.model.getComponent(this.ComponentId,this.FlowKey),manywho.state.getComponent(this.componentId,this.flowKey)||{},o=void 0,n)switch(n.contentType){case"ContentObject":r=null,e&&(e.isSelected=!0,r=e.iFlowObjectDataArray(),r=JSON.parse(JSON.stringify(r))),o={objectData:r},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentList":i=null,e&&(i=e.iFlowObjectDataArray(),i=JSON.parse(JSON.stringify(i))),o={objectData:i},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentDate":o={contentValue:e.toISOString()},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;default:o={contentValue:e},manywho.state.setComponent(this.componentId,o,this.flowKey,!0)}this.LoadingState=t,manywho.collaboration.isInitialized(this.flowKey)}return[2,Promise.resolve()]}))}))},t.prototype.eventHandled=function(e,t){console.log("ping")},t.prototype.updateValues=function(e){return i(this,void 0,void 0,(function(){var t,n,o,r,i=this;return a(this,(function(a){switch(a.label){case 0:if(this.LoadingState=l.saving,t=[],e.constructor.name===d.FlowField.name)t.push(e.iFlowField());else for(n=0,o=e;n<o.length;n++)r=o[n],t.push(r.iFlowField());return[4,this.callRequestOld(this.url,"POST",t)];case 1:return a.sent(),manywho.collaboration.isInitialized(this.flowKey)&&t.forEach((function(e){manywho.collaboration.push(i.ComponentId,{message:{action:"REFRESH_FIELD",fieldName:e.developerName}},i.flowKey)})),this.LoadingState=l.ready,[2,Promise.resolve()]}}))}))},t.prototype._sendCollaborationMessage=function(e){manywho.collaboration.isInitialized(this.flowKey)&&manywho.collaboration.push(this.ComponentId,{message:e},this.flowKey)},t.prototype.triggerOutcome=function(e,t){return i(this,void 0,void 0,(function(){var n;return a(this,(function(o){switch(o.label){case 0:return this.LoadingState=l.moving,t||(t=[]),this.outcomes[e]&&(n=this.outcomes[e].iFlowOutcome()),n?[4,manywho.component.onOutcome(n,t,this.FlowKey)]:[3,2];case 1:return o.sent(),[3,3];case 2:this.log("Could not find outcome "+e),o.label=3;case 3:return[2,Promise.resolve()]}}))}))},t.prototype.moveTo=function(e,t){return i(this,void 0,void 0,(function(){var t,n,o,r;return a(this,(function(i){switch(i.label){case 0:return this.LoadingState=l.moving,"",t="/api/run/1/state/"+this.stateId,n=manywho.state.getState(this.flowKey),(o={}).currentMapElementId=n.currentMapElementId,o.invokeType="NAVIGATE",o.mapElementInvokeRequest={},o.mapElementInvokeRequest.selectedOutcomeId=null,o.pageRequest={pageComponentInputResponses:[{pageComponentId:this.componentId,contentValue:null,objectData:null}]},o.selectedMapElementId=e,o.stateId=this.stateId,o.stateToken=n.token,[4,manywho.connection.request(this,null,t,"POST",this.tenantId,this.stateId,manywho.state.getAuthenticationToken(this.flowKey),o)];case 1:return r=i.sent(),manywho.model.parseEngineResponse(r,this.flowKey),[4,manywho.engine.render(this.flowKey)];case 2:return i.sent(),[2,Promise.resolve()]}}))}))},t.prototype.log=function(e){var t=new Date,n="["+[("0"+t.getHours()).slice(-2),("0"+t.getMinutes()).slice(-2),("0"+t.getSeconds()).slice(-2)].join(":")+"] ";console.log(n+e)},t.prototype.launchFlowSilent=function(e,t,n,o){return i(this,void 0,void 0,(function(){var e,n,r;return a(this,(function(i){return e=manywho.settings.global("platform.uri")||"https://flow.manywho.com",n=e+"/api/run/1/state",(r={}).id=t,r.developerName=null,r.inputs=o?o.iFlowObjectDataArray():null,manywho.connection.request(this,"",n,"POST",this.TenantId,"",manywho.state.getAuthenticationToken(this.FlowKey),r),[2,Promise.resolve()]}))}))},t.prototype.launchFlowTab=function(e,t,n,o){return i(this,void 0,void 0,(function(){var o,r;return a(this,(function(i){return o=manywho.settings.global("platform.uri")||"https://flow.boomi.com",r=o+"/"+e+"/play/"+n+"?flow-id="+t,window.open(r,"_new"),[2,Promise.resolve()]}))}))},t.prototype.componentDidUpdate=function(){return i(this,void 0,void 0,(function(){var e,t;return a(this,(function(n){switch(n.label){case 0:if(!(e=manywho.state.getComponent(this.componentId,this.flowKey)))return[3,7];if(t=e.message,this.loadModel(),t&&manywho.state.setComponent(this.componentId,{message:{}},this.flowKey,!1),!t||!t.action)return[3,6];switch(t.action.toUpperCase()){case"REFRESH_FIELDS":return[3,1];case"REFRESH_FIELD":return[3,3]}return[3,5];case 1:return[4,this.loadAllValues()];case 2:return n.sent(),[3,6];case 3:return[4,this.loadValue(t.fieldName)];case 4:return n.sent(),[3,6];case 5:return[3,6];case 6:return[2,t];case 7:return[2]}}))}))},t.prototype.receiveMessage=function(e){return i(this,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:if(!e.data)return[3,9];if(!(t=e.data).action)return[3,9];switch(t.action.toUpperCase()){case"OUTCOME":return[3,1];case"REFRESH_FIELDS":return[3,3];case"REFRESH_FIELD":return[3,5]}return[3,7];case 1:return[4,this.triggerOutcome(t.data)];case 2:return n.sent(),[3,9];case 3:return[4,this.loadAllValues()];case 4:return n.sent(),[3,9];case 5:return[4,this.loadValue(t.fieldName)];case 6:return n.sent(),[3,9];case 7:return[4,this.handleMessage(t)];case 8:return n.sent(),[3,9];case 9:return[2,Promise.resolve()]}}))}))},t.prototype.handleMessage=function(e){return i(this,void 0,void 0,(function(){return a(this,(function(e){return[2,Promise.resolve()]}))}))},t}(s.Component);t.FlowBaseComponent=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowObjectDataArray=t.eSortOrder=void 0;var o,r=n(1),i=n(2);!function(e){e[e.ascending=0]="ascending",e[e.descending=1]="descending"}(o=t.eSortOrder||(t.eSortOrder={}));var a=function(){function e(e){this.Items=[];for(var t=0,n=e||[];t<n.length;t++){var o=n[t];this.Items.push(new i.FlowObjectData([o]))}}return Object.defineProperty(e.prototype,"items",{get:function(){return this.Items},enumerable:!1,configurable:!0}),e.prototype.sort=function(e,t){return e===o.ascending?t?this.Items.sort((function(e,n){var o,i;switch(e.properties[t].contentType){case r.eContentType.ContentNumber:o=parseFloat(e.properties[t].value),i=parseFloat(n.properties[t].value);break;case r.eContentType.ContentDateTime:o=new Date(e.properties[t].value),i=new Date(n.properties[t].value);break;default:o=e.properties[t].value,i=n.properties[t].value}switch(!0){case o<i:return-1;case o>i:return 1;default:return 0}})):this.Items.sort((function(e,t){return e.order-t.order})):t?this.Items.sort((function(e,n){if(!(e&&n&&e.properties&&n.properties&&e.properties[t]&&n.properties[t]&&e.properties[t].value&&n.properties[t].value))return 0;if(!e.properties[t])return 0;switch(!0){case e.properties[t].value<n.properties[t].value:return 1;case e.properties[t].value>n.properties[t].value:return-1;default:return 0}})):this.Items.sort((function(e,t){return e.order-t.order}))},e.prototype.addItem=function(e){this.Items.push(e)},e.prototype.clearItems=function(){this.Items=[]},e.prototype.clone=function(){var t=new e;return this.items.forEach((function(e){t.addItem(e.clone())})),t},e.prototype.iFlowObjectDataArray=function(e){for(var t=[],n=0,o=this.Items;n<o.length;n++){var r=o[n];t.push(r.iObjectData(e))}return t},e.prototype.getItemWithPropertyName=function(e,t,n){for(var o=0,i=this.Items;o<i.length;o++){var a=i[o];if(a.properties[e]&&null!=a.properties[e].value){var s=a.properties[e].value,l=t;switch(a.properties[e].contentType){case r.eContentType.ContentString:s=s.toLowerCase(),l=l.toLowerCase();break;case r.eContentType.ContentNumber:s=s,l=parseFloat(l.toLowerCase());break;case r.eContentType.ContentBoolean:s=s,l="true"===new String(l).toLowerCase()}if(s===l)return a.properties[n]}}return null},e.prototype.getSelectedItems=function(){for(var t=new e,n=0,o=this.Items;n<o.length;n++){var r=o[n];!0===r.isSelected&&t.addItem(r)}return t},e.prototype.getItemWithPropertyValue=function(e,t){for(var n=0,o=this.Items;n<o.length;n++){var i=o[n];if(i.properties[e]&&null!=i.properties[e].value){var a=i.properties[e].value,s=t;switch(i.properties[e].contentType){case r.eContentType.ContentString:a=a.toLowerCase(),s=new String(s).toLowerCase();break;case r.eContentType.ContentNumber:a=a,s=parseFloat(new String(s).toLowerCase());break;case r.eContentType.ContentBoolean:a=a,s="true"===new String(s).toLowerCase()}if(a===s)return i}}},e.prototype.getIndexOfItemWithPropertyValue=function(e,t){for(var n=0;n<this.items.length;n++){var o=this.items[n];if(o.properties[e]&&null!=o.properties[e].value){var i=o.properties[e].value,a=t;switch(o.properties[e].contentType){case r.eContentType.ContentString:i=i.toLowerCase(),a=a.toLowerCase();break;case r.eContentType.ContentNumber:i=i,a=parseFloat(new String(a).toLowerCase());break;case r.eContentType.ContentBoolean:i=i,a="true"===new String(a).toLowerCase()}if(i===a)return n}}return-1},e.prototype.removeItemWithPropertyValue=function(e,t){for(var n=0,o=0;o<this.items.length;o++){var i=this.items[o];if(i.properties[e]&&null!=i.properties[e].value){var a=i.properties[e].value,s=t;switch(i.properties[e].contentType){case r.eContentType.ContentString:a=a.toLowerCase(),s=s.toLowerCase();break;case r.eContentType.ContentNumber:a=a,s=parseFloat(new String(s).toLowerCase());break;case r.eContentType.ContentBoolean:a=a,s="true"===new String(s).toLowerCase()}a===s&&(this.items.splice(o,1),n++)}}return n},e.prototype.removeItemAtIndex=function(e){var t=0;return this.items[e]&&(this.items.splice(e,1),t=e),t},e}();t.FlowObjectDataArray=a},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||o(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),r(n(16),t),r(n(20),t),r(n(21),t),r(n(23),t),r(n(12),t),r(n(7),t),r(n(26),t),r(n(3),t),r(n(6),t),r(n(9),t),r(n(1),t),r(n(2),t),r(n(4),t),r(n(10),t),r(n(11),t),r(n(28),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowAttribute=void 0;var o=function(){function e(e,t){this.Name=e,this.Value=t}return Object.defineProperty(e.prototype,"name",{get:function(){return this.Name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},enumerable:!1,configurable:!0}),e}();t.FlowAttribute=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DragEvent=t.eDragEventType=t.modalDialogButton=void 0;var o,r=function(e,t){this.label=e,this.handler=t};t.modalDialogButton=r,function(e){e[e.unknown=0]="unknown",e[e.canvas=1]="canvas",e[e.table=2]="table",e[e.link=3]="link",e[e.dialog=4]="dialog"}(o=t.eDragEventType||(t.eDragEventType={}));var i=function(){function e(){this.type=o.unknown,this.sourceElement=null,this.targetElement=null,this.mouseX=0,this.mouseY=0,this.mouseOffsetX=0,this.mouseOffsetY=0}return e.start=function(t,n,o,r){var i=new e;return i.type=t,i.sourceElement=n,i.targetElement=null,i.mouseX=o,i.mouseY=r,i.mouseOffsetX=o,i.mouseOffsetY=r,i},e.prototype.drag=function(e,t){this.mouseX=e,this.mouseY=t},e.prototype.end=function(e,t,n){this.targetElement=e,this.mouseX=t,this.mouseY=n,this.type=o.unknown},e}();t.DragEvent=i},function(e,t,n){"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.eColumnComparator=void 0,function(e){e[e.equalTo=0]="equalTo",e[e.notEqualTo=1]="notEqualTo",e[e.startsWith=2]="startsWith",e[e.endsWith=3]="endsWith",e[e.contains=4]="contains",e[e.notContains=5]="notContains",e[e.in=6]="in",e[e.notIn=7]="notIn"}(o=t.eColumnComparator||(t.eColumnComparator={}));var r=function(){function e(e,t){var n=this;switch(this.comparator=e,e){case o.in:case o.notIn:var r=JSON.parse(t);this.value=new Map,r.forEach((function(e){n.value.set(e,e)}));break;default:this.value=t}}return e.prototype.getForStorage=function(){var e={};if(e.comparator=this.comparator,this.value instanceof Map){var t=[];this.value.forEach((function(e,n){t.push(n)})),e.value=JSON.stringify(t)}else e.value=this.value;return JSON.stringify(e)},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowDisplayColumn=void 0;var o=n(1),r=function(){function e(e){this.Column=e,this.ComponentType=e.componentType,this.ContentFormat=e.contentFormat,this.ContentType=o.eContentType[e.contentType],this.DeveloperName=e.developerName,this.DisplayOrder=e.order,this.Label=e.label,this.ReadOnly=!e.isEditable,this.TypeElememtPropertyToDisplayId=e.typeElememtPropertyToDisplayId,this.TypeElementPropertyId=e.typeElementPropertyId,this.Visible=e.isDisplayValue}return Object.defineProperty(e.prototype,"componentType",{get:function(){return this.ComponentType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"visible",{get:function(){return this.Visible},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"readOnly",{get:function(){return this.ReadOnly},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"displayOrder",{get:function(){return this.DisplayOrder},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElememtPropertyToDisplayId",{get:function(){return this.TypeElememtPropertyToDisplayId},enumerable:!1,configurable:!0}),e.prototype.iFlowDisplayColumn=function(){return this.Column},e}();t.FlowDisplayColumn=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowObjectDataProperty=void 0;var o=n(1),r=n(2),i=n(4),a=function(){function e(e){if(this.ContentFormat="",this.ContentType=o.eContentType.unknown,this.DeveloperName="",this.TypeElementId="",this.TypeElementPropertyId="",e)switch(this.DeveloperName=e.developerName,this.ContentType=o.eContentType[e.contentType],this.ContentFormat=e.contentFormat?e.contentFormat:"",this.TypeElementId=e.typeElementId?e.typeElementId:"",this.TypeElementPropertyId=e.typeElementPropertyId,this.ContentType){case o.eContentType.ContentObject:this.Value=e.objectData?new r.FlowObjectData(e.objectData):void 0;break;case o.eContentType.ContentList:this.value=e.objectData?new i.FlowObjectDataArray(e.objectData):new i.FlowObjectDataArray([]);break;default:this.value=e.contentValue?e.contentValue:""}}return e.newInstance=function(e,t,n){var r="",i=[];switch(t){case o.eContentType.ContentObject:var a=n;i.push(a.iObjectData());break;case o.eContentType.ContentList:i=n.iFlowObjectDataArray();break;default:r=n}return new this({contentFormat:"",contentType:o.eContentType[t],contentValue:r,developerName:e,objectData:i,typeElementId:"",typeElementPropertyId:""})},Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},set:function(e){this.contentFormat=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},set:function(e){this.ContentType=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},set:function(e){this.TypeElementPropertyId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){switch(this.contentType){case o.eContentType.ContentNumber:return parseFloat(this.Value?this.Value:"0");case o.eContentType.ContentBoolean:return"true"===new String(this.Value).toLowerCase();default:return this.Value}},set:function(e){this.Value=e},enumerable:!1,configurable:!0}),e.prototype.clone=function(){var t;switch(this.contentType){case o.eContentType.ContentList:t=new i.FlowObjectDataArray,this.value.items.forEach((function(e){t.addItem(e.clone(e.developerName))}));break;case o.eContentType.ContentObject:t=this.value.clone(this.value.developerName);break;default:t=this.value}return e.newInstance(this.developerName,this.contentType,t)},e.prototype.iFlowObjectDataProperty=function(){var e="",t=[];switch(this.ContentType){case o.eContentType.ContentObject:var n=this.Value;n&&n.developerName&&n.developerName.length>0&&t.push(n.iObjectData());break;case o.eContentType.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value}return{contentFormat:this.ContentFormat,contentType:o.eContentType[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementId:this.TypeElementId,typeElementPropertyId:this.TypeElementPropertyId}},Object.defineProperty(e.prototype,"displayString",{get:function(){var e="";if(this.Value)switch(this.ContentType){case o.eContentType.ContentString:case o.eContentType.ContentNumber:e=this.Value;break;case o.eContentType.ContentBoolean:e=!0===this.Value?"True":"False";break;case o.eContentType.ContentDateTime:var t=Date.parse(this.Value);if(!isNaN(t)){var n=new Date(t);return e.length<=10?n.toLocaleDateString():n.toLocaleString()}break;default:e=o.eContentType[this.ContentType]}else e="Undefined";return e},enumerable:!1,configurable:!0}),e}();t.FlowObjectDataProperty=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowOutcome=t.ePageActionType=t.ePageActionBindingType=void 0;var o=n(6);!function(e){e.Save="SAVE",e.PartialSave="PARTIAL_SAVE",e.NoSave="NO_SAVE"}(t.ePageActionBindingType||(t.ePageActionBindingType={})),function(e){e.New="NEW",e.Query="QUERY",e.Insert="INSERT",e.Update="UPDATE",e.Upsert="UPSERT",e.Delete="DELETE",e.Remove="REMOVE",e.Add="ADD",e.Edit="EDIT",e.Next="NEXT",e.Back="BACK",e.Done="DONE",e.Save="SAVE",e.Cancel="CANCEL",e.Apply="APPLY",e.Import="IMPORT",e.Close="CLOSE",e.Open="OPEN",e.Submit="SUBMIT",e.Escalate="ESCALATE",e.Reject="REJECT",e.Delegate="DELEGATE"}(t.ePageActionType||(t.ePageActionType={}));var r=function(){function e(e){if(this.DeveloperName=e.developerName,this.Id=e.id,this.IsBulkAction=e.isBulkAction,this.IsOut=e.isOut,this.Label=e.label,this.Order=e.order,this.PageActionBindingType=e.pageActionBindingType,this.PageActionType=e.pageActionType,this.PageObjectBindingId=e.pageObjectBindingId,this.Attributes={},e.attributes)for(var t=0,n=Object.keys(e.attributes);t<n.length;t++){var r=n[t];this.Attributes[r]=new o.FlowAttribute(r,e.attributes[r])}this.Outcome=e}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this.Id},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isBulkAction",{get:function(){return this.IsBulkAction},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isOut",{get:function(){return this.IsOut},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageActionBindingType",{get:function(){return this.PageActionBindingType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageActionType",{get:function(){return this.PageActionType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageObjectBindingId",{get:function(){return this.PageObjectBindingId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!1,configurable:!0}),e.prototype.iFlowOutcome=function(){return this.Outcome},e}();t.FlowOutcome=r},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0);n(25);var a=function(e){function t(t){var n=e.call(this,t)||this;return n.displayStyle={},n.menuItems=[],n.showContextMenu=n.showContextMenu.bind(n),n.hideContextMenu=n.hideContextMenu.bind(n),n.positionContextMenu=n.positionContextMenu.bind(n),n}return r(t,e),t.prototype.setMenu=function(e){this.menu=e},t.prototype.positionContextMenu=function(e,t){e<window.innerWidth/2?(this.displayStyle.left=e-10,this.displayStyle.right=void 0):(this.displayStyle.left=void 0,this.displayStyle.right=window.innerWidth-(e+10)),t<window.innerHeight/2?(this.displayStyle.top=t-10,this.displayStyle.bottom=void 0):(this.displayStyle.top=void 0,this.displayStyle.bottom=window.innerHeight-(t+10)+"px"),this.displayStyle.display="block"},t.prototype.showContextMenu=function(e,t,n){if(n.size>0){var o=[];n.forEach((function(e){o.push(e)})),this.menuItems=o,this.positionContextMenu(e,t),this.forceUpdate()}},t.prototype.hideContextMenu=function(){this.displayStyle.display="none",this.menuItems=[],this.forceUpdate()},t.prototype.render=function(){var e=this;return i.createElement("div",{className:"cm",onMouseLeave:this.hideContextMenu,style:{left:this.displayStyle.left,right:this.displayStyle.right,top:this.displayStyle.top,bottom:this.displayStyle.bottom,display:this.displayStyle.display},ref:function(t){return e.setMenu(t)}},i.createElement("ul",{className:"cm-list"},this.menuItems))},t}(i.Component);t.default=a},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&o(t,e,n);return r(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.eSortDirection=t.eFilterEvent=void 0;var s,l,c=i(n(0)),u=n(5),d=a(n(34)),p=a(n(35)),h=n(8);!function(e){e[e.none=0]="none",e[e.sort=1]="sort",e[e.filter=2]="filter"}(s=t.eFilterEvent||(t.eFilterEvent={})),function(e){e[e.none=0]="none",e[e.ascending=1]="ascending",e[e.descending=-1]="descending"}(l=t.eSortDirection||(t.eSortDirection={}));var f=function(){function e(e){this.items=new Map,this.parent=e,this.notify=this.notify.bind(this),this.getSortIcon=this.getSortIcon.bind(this),this.getFilterIcon=this.getFilterIcon.bind(this),this.sortClicked=this.sortClicked.bind(this),this.filterClicked=this.filterClicked.bind(this),this.saveFilter=this.saveFilter.bind(this),this.cancelFilter=this.cancelFilter.bind(this),this.matchesCriteria=this.matchesCriteria.bind(this)}return e.prototype.setDialog=function(e){this.dialog=e},e.prototype.notify=function(e,t){this.parent.filtersChanged(e,t)},e.prototype.get=function(e){return this.items.has(e)?this.items.get(e):void 0},e.prototype.has=function(e){return!!this.items.has(e)},e.prototype.sortClicked=function(e){this.items.has(e)||this.items.set(e,new d.default(e,this)),this.items.forEach((function(t){t.key!==e&&t.sortNone()})),this.items.get(e).sortToggle()},e.prototype.filterClicked=function(e){var t=this,n=this.parent;this.items.has(e)||this.items.set(e,new d.default(e,this));var o=this.parent.colMap.get(e);this.parent.messageBox.showMessageBox("Filter "+o.label,c.default.createElement(p.default,{root:n,parent:this,key:e,developerName:e,filter:this.items.get(e),ref:function(e){t.setDialog(e)}}),[new u.modalDialogButton("Apply",this.saveFilter),new u.modalDialogButton("Cancel",this.cancelFilter)])},e.prototype.filterClear=function(e){this.items.get(e).clearFilters()},e.prototype.saveFilter=function(){var e=this.dialog.filter.key;this.dialog.filter.criteria=this.dialog.newCriteria,this.items.set(e,this.dialog.filter),this.dialog=void 0,this.parent.messageBox.hideMessageBox(),this.notify(e,s.filter)},e.prototype.cancelFilter=function(){var e=this.dialog.filter.key;this.dialog=void 0,this.parent.messageBox.hideMessageBox(),this.notify(e,s.filter)},e.prototype.getSortIcon=function(e){var t=this;if(!this.items.has(e))return c.default.createElement("span",{className:"sft-column-header-flag glyphicon glyphicon-ban-circle",onClick:function(n){t.sortClicked(e)},title:"Not sorted - click to toggle"});switch(this.items.get(e).sort){case l.none:return c.default.createElement("span",{className:"sft-column-header-flag glyphicon glyphicon-ban-circle",onClick:function(n){t.sortClicked(e)},title:"Not sorted - click to toggle"});case l.ascending:return c.default.createElement("span",{className:"sft-column-header-flag sft-column-header-flag-hot glyphicon glyphicon-arrow-up",onClick:function(n){t.sortClicked(e)},title:"Ascending - click to toggle"});case l.descending:return c.default.createElement("span",{className:"sft-column-header-flag sft-column-header-flag-hot glyphicon glyphicon-arrow-down",onClick:function(n){t.sortClicked(e)},title:"Descending - click to toggle"})}},e.prototype.getFilterIcon=function(e){var t,n=this;return this.items.has(e)&&(null===(t=this.items.get(e).criteria)||void 0===t?void 0:t.length)>0?c.default.createElement(c.Fragment,null,c.default.createElement("span",{className:"sft-column-header-button sft-column-header-button-hot glyphicon glyphicon-search",onClick:function(t){n.filterClicked(e)},title:"Change filter"}),c.default.createElement("span",{className:"sft-column-header-button sft-column-header-button-hot glyphicon glyphicon-remove",onClick:function(t){n.filterClear(e)},title:"Clear filter"})):c.default.createElement("span",{className:"sft-column-header-button glyphicon glyphicon-search",onClick:function(t){n.filterClicked(e)}})},e.prototype.filter=function(e){var t=this,n=new Map;return e.forEach((function(e,o){t.matchesCriteria(e)&&n.set(o,void 0)})),n},e.prototype.matchesCriteria=function(e){var t=e.objectData,n=!0;return this.items.forEach((function(e){e.criteria.forEach((function(o){var r,i=t.properties[e.key].value.toLowerCase();switch("string"==typeof o.value&&(r=o.value.toLowerCase()),o.comparator){case h.eColumnComparator.equalTo:i!==r&&(n=!1);break;case h.eColumnComparator.notEqualTo:i===r&&(n=!1);break;case h.eColumnComparator.contains:i.indexOf(r)<0&&(n=!1);break;case h.eColumnComparator.startsWith:i.startsWith(r)||(n=!1);break;case h.eColumnComparator.endsWith:i.endsWith(r)||(n=!1);break;case h.eColumnComparator.notContains:i.indexOf(r)>=0&&(n=!1);break;case h.eColumnComparator.in:o.value.has(t.properties[e.key].value)||(n=!1);break;case h.eColumnComparator.notIn:o.value.has(t.properties[e.key].value)&&(n=!1);break;default:n=!1}}))})),n},e.prototype.getSortColumn=function(){var e;return this.items.forEach((function(t){t.sort!==l.none&&(e=t)})),e},e.prototype.sort=function(e,t){var n=this.getSortColumn(),o=new Map(Array.from(t).filter((function(t){if(e.has(t[0]))return!0})));if(n){var r=void 0;switch(this.parent.colMap.get(n.key).contentType){case u.eContentType.ContentDateTime:r=Array.from(o).sort((function(e,t){return e[1].objectData.properties[n.key].value-t[1].objectData.properties[n.key].value}));break;default:var i=new Intl.Collator(void 0,{numeric:!0,sensitivity:"base"});r=Array.from(o).sort((function(e,t){return i.compare(e[1].objectData.properties[n.key].value,t[1].objectData.properties[n.key].value)}))}n.sort===l.descending&&(r=r.reverse());var a=new Map(r);return a.forEach((function(e,t){a.set(t,void 0)})),a}return e},e.prototype.getForStorage=function(){var e=[];return this.items.forEach((function(t){e.push(t.getForStorage())})),JSON.stringify(e)},e.prototype.loadFromStorage=function(e){var t=this;this.items=new Map;var n=JSON.parse(e);n&&n.forEach((function(e){(e=JSON.parse(e)).key&&t.items.set(e.key,new d.default(e.key,t,e.sort,e.criteria))}))},e}();t.default=f},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||o(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),r(n(15),t)},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&i(t,e,n);return a(t,e),t},l=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},c=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var d=u(n(0)),p=n(5),h=u(n(12)),f=u(n(29)),m=u(n(30)),y=u(n(31));n(32);var g=u(n(33)),b=s(n(13)),v=u(n(38)),w=u(n(39)),I=u(n(40)),C=function(e){function t(t){var n=e.call(this,t)||this;return n.version="1.0.0",n.rowMap=new Map,n.currentRowMap=new Map,n.maxPageRows=5,n.currentRowPages=[],n.currentRowPage=0,n.selectedRowMap=new Map,n.rows=new Map,n.colMap=new Map,n.colValMap=new Map,n.cols=new Map,n.lastContent=d.default.createElement("div",null),n.filters=new b.default(n),n.handleMessage=n.handleMessage.bind(n),n.flowMoved=n.flowMoved.bind(n),n.showContextMenu=n.showContextMenu.bind(n),n.hideContextMenu=n.hideContextMenu.bind(n),n.buildCoreTable=n.buildCoreTable.bind(n),n.buildRibbon=n.buildRibbon.bind(n),n.buildFooter=n.buildFooter.bind(n),n.filtersChanged=n.filtersChanged.bind(n),n.toggleSelect=n.toggleSelect.bind(n),n.firstPage=n.firstPage.bind(n),n.previousPage=n.previousPage.bind(n),n.nextPage=n.nextPage.bind(n),n.lastPage=n.lastPage.bind(n),n.maxPerPageChanged=n.maxPerPageChanged.bind(n),n.doExport=n.doExport.bind(n),n.maxPageRows=parseInt(sessionStorage.getItem("sft-max-"+n.componentId)||n.getAttribute("PaginationSize",void 0)||"10"),sessionStorage.setItem("sft-max-"+n.componentId,n.maxPageRows.toString()),n}return r(t,e),t.prototype.filtersChanged=function(e,t){switch(this.headers.forceUpdate(),sessionStorage.setItem("sft-filters-"+this.componentId,this.filters.getForStorage()),t){case b.eFilterEvent.sort:this.sortRows(),this.paginateRows(),this.buildTableRows(),this.forceUpdate();break;case b.eFilterEvent.filter:this.filterRows(),this.sortRows(),this.paginateRows(),this.buildTableRows(),this.forceUpdate()}},t.prototype.maxPerPageChanged=function(e){this.maxPageRows=e||10,sessionStorage.setItem("sft-max-"+this.componentId,this.maxPageRows.toString()),this.paginateRows(),this.buildTableRows(),this.forceUpdate()},t.prototype.setRow=function(e,t){t?this.rows.set(e,t):this.rows.has(e)&&this.rows.delete(e)},t.prototype.setRibbon=function(e){this.ribbon=e},t.prototype.setHeaders=function(e){this.headers=e},t.prototype.setFooter=function(e){this.footer=e},t.prototype.flowMoved=function(e,t){return l(this,void 0,void 0,(function(){var n;return c(this,(function(o){return n=this,"FORWARD"===e.invokeType&&(this.loadingState!==p.eLoadingState.ready?window.setTimeout((function(){n.flowMoved(e,t)}),500):(this.maxPageRows=parseInt(sessionStorage.getItem("sft-max-"+this.componentId)||this.getAttribute("PaginationSize",void 0)||"10"),this.filters.loadFromStorage(sessionStorage.getItem("sft-filters-"+this.componentId)),this.buildCoreTable(),this.filterRows(),this.sortRows(),this.buildTableRows(),this.forceUpdate())),[2]}))}))},t.prototype.componentDidMount=function(){return l(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),manywho.eventManager.addDoneListener(this.flowMoved,this.componentId),this.maxPageRows=parseInt(sessionStorage.getItem("sft-max-"+this.componentId||!1)),this.filters.loadFromStorage(sessionStorage.getItem("sft-filters-"+this.componentId)),this.buildCoreTable(),this.filterRows(),this.sortRows(),this.buildTableRows(),this.forceUpdate(),[2]}}))}))},t.prototype.componentWillUnmount=function(){return l(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentWillUnmount.call(this)];case 1:return t.sent(),manywho.eventManager.removeDoneListener(this.componentId),[2]}}))}))},t.prototype.buildCoreTable=function(){var e=this;this.rowMap=new Map,this.rows=new Map;var t=this.model.displayColumns.sort((function(e,t){switch(!0){case e.DisplayOrder>t.DisplayOrder:return 1;case e.DisplayOrder===t.DisplayOrder:return 0;default:return-1}}));this.colMap=new Map,t.forEach((function(t){e.colMap.set(t.developerName,t),e.colValMap.set(t.developerName,new Map)})),this.ribbonElement=d.default.createElement(I.default,{root:this,ref:function(t){e.setRibbon(t)}}),this.headersElement=d.default.createElement(g.default,{root:this,ref:function(t){e.setHeaders(t)}}),this.footerElement=d.default.createElement(v.default,{root:this,ref:function(t){e.setFooter(t)}}),this.model.dataSource.items.forEach((function(t){!0===t.isSelected&&e.selectedRowMap.set(t.internalId,void 0);var n=new f.default;n.id=t.internalId,e.colMap.forEach((function(o){var r,i,a;n.columns.set(o.developerName,new m.default(o.developerName,null===(r=t.properties[o.developerName])||void 0===r?void 0:r.value)),e.colValMap.get(o.developerName).set(null===(i=t.properties[o.developerName])||void 0===i?void 0:i.value,null===(a=t.properties[o.developerName])||void 0===a?void 0:a.value)})),n.objectData=t,e.rowMap.set(n.id,n)})),this.filterRows(),this.sortRows(),this.paginateRows(),this.buildRibbon(),this.buildFooter()},t.prototype.filterRows=function(){var e=this;this.currentRowMap=new Map,this.rowMap.size>0&&(this.currentRowMap=this.filters.filter(this.rowMap)),this.selectedRowMap.forEach((function(t,n){e.currentRowMap.has(n)||e.selectedRowMap.delete(n)}))},t.prototype.sortRows=function(){this.currentRowMap.size>0&&(this.currentRowMap=this.filters.sort(this.currentRowMap,this.rowMap))},t.prototype.paginateRows=function(){var e=this;this.currentRowPages=[];var t=new Map;this.currentRowMap.forEach((function(n,o){t.size<e.maxPageRows?t.set(o,void 0):(e.currentRowPages.push(t),(t=new Map).set(o,void 0))})),this.currentRowPages.push(t),this.currentRowPage=0},t.prototype.firstPage=function(){this.currentRowPage=0,this.buildTableRows(),this.buildRibbon(),this.buildFooter(),this.forceUpdate()},t.prototype.previousPage=function(){this.currentRowPage>1?this.currentRowPage-=1:this.currentRowPage=0,this.buildTableRows(),this.buildRibbon(),this.buildFooter(),this.forceUpdate()},t.prototype.nextPage=function(){this.currentRowPage<this.currentRowPages.length-1?this.currentRowPage+=1:this.currentRowPage=this.currentRowPages.length-1,this.buildTableRows(),this.buildRibbon(),this.buildFooter(),this.forceUpdate()},t.prototype.lastPage=function(){this.currentRowPage=this.currentRowPages.length-1,this.buildTableRows(),this.buildRibbon(),this.buildFooter(),this.forceUpdate()},t.prototype.toggleSelectAll=function(e){var t=this;e.target.checked?this.currentRowMap.forEach((function(e,n){t.selectedRowMap.set(n,"")})):this.selectedRowMap.clear(),this.rows.forEach((function(e){e.forceUpdate()})),this.buildRibbon(),this.buildFooter(),this.saveSelected()},t.prototype.toggleSelect=function(e,t){e.target.checked?this.selectedRowMap.set(t,""):this.selectedRowMap.delete(t),this.rows.get(t).forceUpdate(),this.buildRibbon(),this.buildFooter(),this.saveSelected()},t.prototype.saveSelected=function(){return l(this,void 0,void 0,(function(){var e,t=this;return c(this,(function(n){switch(n.label){case 0:return e=new p.FlowObjectDataArray,this.selectedRowMap.forEach((function(n,o){var r=t.rowMap.get(o).objectData;r.isSelected=!0,e.addItem(r)})),[4,this.setStateValue(e)];case 1:return n.sent(),[2]}}))}))},t.prototype.loadSelected=function(){return l(this,void 0,void 0,(function(){var e,t=this;return c(this,(function(n){switch(n.label){case 0:return e=this.getStateValue(),this.selectedRowMap.forEach((function(n,o){var r=t.rowMap.get(o).objectData;r.isSelected=!0,e.addItem(r)})),[4,this.setStateValue(e)];case 1:return n.sent(),[2]}}))}))},t.prototype.buildTableRows=function(){var e=this;this.rowElements=[],this.currentRowPages&&this.currentRowPages.length>0&&this.currentRowPages[this.currentRowPage]&&this.currentRowPages[this.currentRowPage].forEach((function(t,n){e.rowElements.push(d.default.createElement(y.default,{key:n,root:e,id:n,ref:function(t){e.setRow(n,t)}}))})),this.buildRibbon(),this.buildFooter()},t.prototype.buildRibbon=function(){var e;null===(e=this.ribbon)||void 0===e||e.forceUpdate()},t.prototype.buildFooter=function(){var e;null===(e=this.footer)||void 0===e||e.forceUpdate()},t.prototype.showContextMenu=function(e){var t=this;e.preventDefault(),e.stopPropagation();var n=new Map;this.contextMenu&&(Object.keys(this.outcomes).forEach((function(e){var o,r,i=t.outcomes[e];!0===i.isBulkAction&&"OnSelect"!==i.developerName&&i.developerName.toLowerCase().startsWith("cm")&&("true"===(null===(o=i.attributes.RequiresSelected)||void 0===o?void 0:o.value)&&t.selectedRowMap.size<1||n.set(i.developerName,d.default.createElement("li",{className:"sft-cm-item",title:i.label||e,onClick:function(n){n.stopPropagation(),t.cmClick(e)}},d.default.createElement("span",{className:"glyphicon glyphicon-"+((null===(r=i.attributes.icon)||void 0===r?void 0:r.value)||"plus")+" sft-cm-item-icon"}),d.default.createElement("span",{className:"sft-cm-item-label"},i.label||e))))})),n.set("exportall",d.default.createElement("li",{className:"sft-cm-item",title:"Export All",onClick:function(e){e.stopPropagation(),t.doExport(t.rowMap)}},d.default.createElement("span",{className:"glyphicon glyphicon-floppy-save sft-cm-item-icon"}),d.default.createElement("span",{className:"sft-cm-item-label"},"Export All"))),n.set("exportshown",d.default.createElement("li",{className:"sft-cm-item",title:"Export Search Results",onClick:function(e){e.stopPropagation(),t.doExport(t.currentRowMap)}},d.default.createElement("span",{className:"glyphicon glyphicon-floppy-save sft-cm-item-icon"}),d.default.createElement("span",{className:"sft-cm-item-label"},"Export Search Results"))),this.selectedRowMap.size>0&&n.set("exportselected",d.default.createElement("li",{className:"sft-cm-item",title:"Export Selected Items",onClick:function(e){e.stopPropagation(),t.doExport(t.selectedRowMap)}},d.default.createElement("span",{className:"glyphicon glyphicon-floppy-save sft-cm-item-icon"}),d.default.createElement("span",{className:"sft-cm-item-label"},"Export Selected"))),this.contextMenu.showContextMenu(e.clientX,e.clientY,n),this.forceUpdate())},t.prototype.hideContextMenu=function(){return l(this,void 0,void 0,(function(){return c(this,(function(e){return this.contextMenu.hideContextMenu(),[2]}))}))},t.prototype.cmClick=function(e){this.doOutcome(e)},t.prototype.getTextValue=function(e){switch(e.contentType){case p.eContentType.ContentBoolean:return!0===e.value?"True":"False";case p.eContentType.ContentNumber:return e.value.toString();default:return e.value}},t.prototype.doOutcome=function(e,t){var n,o;return l(this,void 0,void 0,(function(){var r,i,a;return c(this,(function(s){switch(s.label){case 0:if(r=null===(n=this.rowMap.get(t))||void 0===n?void 0:n.objectData,!this.outcomes[e])return[3,4];if(!this.outcomes[e].attributes.uri)return[3,1];for(i=this.outcomes[e].attributes.uri.value,a=void 0;a=RegExp(/{{([^}]*)}}/).exec(i);)i=i.replace(a[0],r.properties[a[1]]?this.getTextValue(r.properties[a[1]]):"");return"_self"===(null===(o=this.outcomes[e].attributes.target)||void 0===o?void 0:o.value)?window.location.href=i:window.open().location.href=i,[3,3];case 1:return[4,this.triggerOutcome(e)];case 2:s.sent(),s.label=3;case 3:return[3,5];case 4:manywho.component.handleEvent(this,manywho.model.getComponent(this.componentId,this.flowKey),this.flowKey,null),s.label=5;case 5:return this.forceUpdate(),[2]}}))}))},t.prototype.doExport=function(e){return l(this,void 0,void 0,(function(){var t,n=this;return c(this,(function(o){return t=new Map,e.forEach((function(e,o){t.set(o,n.rowMap.get(o))})),w.default.export(this.colMap,t,"export.csv"),this.outcomes.OnExport&&this.triggerOutcome("OnExport"),[2]}))}))},t.prototype.render=function(){var e=this;if(this.loadingState!==p.eLoadingState.ready)return this.lastContent;var t="sft "+this.getAttribute("classes",""),n={width:"-webkit-fill-available",height:"-webkit-fill-available"};!1===this.model.visible&&(n.display="none"),this.model.width&&(n.width=this.model.width+"px"),this.model.height&&(n.height=this.model.height+"px");this.model.label;return this.lastContent=d.default.createElement("div",{className:t,style:n,onContextMenu:this.showContextMenu},d.default.createElement(p.FlowMessageBox,{parent:this,ref:function(t){e.messageBox=t}}),d.default.createElement(h.default,{parent:this,ref:function(t){e.contextMenu=t}}),this.ribbonElement,d.default.createElement("div",{className:"sft-body"},d.default.createElement("div",{className:"sft-scroller"},d.default.createElement("div",{className:"sft-scroller-body"},d.default.createElement("table",null,d.default.createElement("thead",null,this.headersElement),d.default.createElement("tbody",null,this.rowElements),d.default.createElement("tfoot",null))))),this.footerElement),this.lastContent},t}(p.FlowComponent);t.default=C,manywho.component.register("SearchFilterTable",C)},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowComponent=void 0;var s=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.dontLoadAllValues()];case 2:return t.sent(),[2,Promise.resolve()]}}))}))},t}(n(3).FlowBaseComponent);t.FlowComponent=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),manywho.eventManager||(manywho.eventManager={},manywho.eventManager.beforeSendListeners={},manywho.eventManager.doneListeners={},manywho.eventManager.failListeners={},manywho.eventManager.outcomeBeingTriggered,manywho.eventManager.history=[],manywho.eventManager.beforeSend=function(e,t){for(var n in manywho.eventManager.beforeSendListeners)manywho.eventManager.beforeSendListeners[n](e,t)},manywho.eventManager.done=function(e,t){for(var n in manywho.eventManager.doneListeners)manywho.eventManager.doneListeners[n](e,t)},manywho.eventManager.fail=function(e,t){for(var n in manywho.eventManager.failListeners)manywho.eventManager.failListeners[n](e,t)},manywho.eventManager.addBeforeSendListener=function(e,t){manywho.eventManager.beforeSendListeners[t]=e},manywho.eventManager.removeBeforeSendListener=function(e){delete manywho.eventManager.beforeSendListeners[e]},manywho.eventManager.addDoneListener=function(e,t){manywho.eventManager.doneListeners[t]=e},manywho.eventManager.removeDoneListener=function(e){delete manywho.eventManager.doneListeners[e]},manywho.eventManager.addFailListener=function(e,t){manywho.eventManager.failListeners[t]=e},manywho.eventManager.removeFailListener=function(e){delete manywho.eventManager.failListeners[e]},manywho.settings.initialize(null,{invoke:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.done,fail:manywho.eventManager.fail}}))},function(e,t,n){(function(t){var n=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,r=/^0b[01]+$/i,i=/^0o[0-7]+$/i,a=parseInt,s="object"==typeof t&&t&&t.Object===Object&&t,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),u=Object.prototype.toString,d=Math.max,p=Math.min,h=function(){return c.Date.now()};function f(e,t,n){var o,r,i,a,s,l,c=0,u=!1,f=!1,g=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function b(t){var n=o,i=r;return o=r=void 0,c=t,a=e.apply(i,n)}function v(e){return c=e,s=setTimeout(I,t),u?b(e):a}function w(e){var n=e-l;return void 0===l||n>=t||n<0||f&&e-c>=i}function I(){var e=h();if(w(e))return C(e);s=setTimeout(I,function(e){var n=t-(e-l);return f?p(n,i-(e-c)):n}(e))}function C(e){return s=void 0,g&&o?b(e):(o=r=void 0,a)}function E(){var e=h(),n=w(e);if(o=arguments,r=this,l=e,n){if(void 0===s)return v(l);if(f)return s=setTimeout(I,t),b(l)}return void 0===s&&(s=setTimeout(I,t)),a}return t=y(t)||0,m(n)&&(u=!!n.leading,i=(f="maxWait"in n)?d(y(n.maxWait)||0,t):i,g="trailing"in n?!!n.trailing:g),E.cancel=function(){void 0!==s&&clearTimeout(s),c=0,o=l=r=s=void 0},E.flush=function(){return void 0===s?a:C(h())},E}function m(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function y(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==u.call(e)}(e))return NaN;if(m(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=m(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(n,"");var s=r.test(e);return s||i.test(e)?a(e.slice(2),s?2:8):o.test(e)?NaN:+e}e.exports=function(e,t,n){var o=!0,r=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return m(n)&&(o="leading"in n?!!n.leading:o,r="trailing"in n?!!n.trailing:r),f(e,t,{leading:o,maxWait:t,trailing:r})}}).call(this,n(19))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowPage=void 0;var s=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.loadAllValues()];case 2:return t.sent(),[2,Promise.resolve()]}}))}))},t}(n(3).FlowBaseComponent);t.FlowPage=s},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowDialogBox=void 0;var s=n(0),l=n(7);n(22);var c=function(e){function t(t){var n=e.call(this,t)||this;return n.dragEvent=new l.DragEvent,n.dialogVisible=!1,n.dialogTitle="",n.dialogButtons=[],n.dialogOnClose=n.hideDialog,n.top=0,n.left=0,n.handleKeyUp=n.handleKeyUp.bind(n),n.handleOutsideClick=n.handleOutsideClick.bind(n),n.showDialog=n.showDialog.bind(n),n.hideDialog=n.hideDialog.bind(n),n}return r(t,e),t.prototype.setDialog=function(e){if(this.dialog=e,this.dialog){var t=this.dialog.offsetParent.clientWidth/2,n=this.dialog.offsetParent.clientHeight/2,o=this.dialog.clientWidth/2,r=this.dialog.clientHeight/2;this.left=t-o,this.top=n-r,this.dialog.classList.add("shown"),this.positionDialog()}},t.prototype.positionDialog=function(){this.dialog&&(this.dialog.style.left=this.left+"px",this.dialog.style.top=this.top+"px")},t.prototype.stopEventBubble=function(e){return e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),e.cancelBubble=!0,e.returnValue=!1,!1},t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.showDialog=function(e,t,n,o){return i(this,void 0,void 0,(function(){return a(this,(function(r){return this.dialogVisible=!0,this.dialogTitle=e,this.dialogContent=t,this.dialogOnClose=o||this.hideDialog,this.dialogButtons=n,this.forceUpdate(),[2]}))}))},t.prototype.hideDialog=function(e){return i(this,void 0,void 0,(function(){return a(this,(function(e){return this.dialogVisible=!1,this.dialogTitle="",this.dialogContent=void 0,this.dialogOnClose=void 0,this.dialogButtons=[],this.forceUpdate(),[2]}))}))},t.prototype.handleKeyUp=function(e){var t=this,n={27:function(){e.preventDefault(),t.hideDialog()}};n[e.keyCode]&&n[e.keyCode]()},t.prototype.handleOutsideClick=function(e){this.dialog||this.dialog.contains(e.target)||this.hideDialog()},t.prototype.render=function(){var e,t=this;if(!1===this.dialogVisible)e=s.createElement("div",null);else{for(var n=[],o=function(e){n.push(s.createElement("button",{className:"modal-dialog-button-bar-button",title:"Cancel",onMouseDown:function(t){t.stopPropagation(),e.handler()}},e.label))},r=0,i=this.dialogButtons;r<i.length;r++){o(i[r])}e=s.createElement("div",{className:"modal-redaction",onMouseMove:function(e){t.onMouseMove(e)},onMouseUp:function(e){t.onMouseUp(e)},onMouseDown:function(e){t.handleOutsideClick(e)},onContextMenu:function(e){e.preventDefault(),e.stopPropagation(),t.props.onContextMenu&&t.props.onContextMenu()}},s.createElement("div",{className:"modal-content",ref:function(e){return t.dialog=e}},s.createElement("div",{className:"modal-dialog"},s.createElement("div",{className:"modal-dialog-header",onMouseDown:function(e){t.onMouseDown(e)}},s.createElement("div",{style:{display:"flex",flexDirection:"row",flexGrow:1}},s.createElement("span",{className:"modal-dialog-header-title"},this.props.title)),s.createElement("div",{style:{display:"flex",flexDirection:"row",marginLeft:"auto",flexGrow:0}},s.createElement("span",{className:"glyphicon glyphicon-remove modal-dialog-header-button",style:{cursor:"pointer",color:"#fefefe",marginRight:"5px",fontSize:"14pt"},title:"Close",onMouseDown:function(e){e.stopPropagation(),t.props.onClose("cancel")}}))),s.createElement("div",{className:"modal-dialog-body"},s.createElement("div",{className:"modal-dialog-body-client"},this.props.children)),s.createElement("div",{className:"modal-dialog-button-bar"},n))))}return e},t.prototype.moveMe=function(e,t){this.left=e,this.top=t,this.positionDialog()},t.prototype.onMouseDown=function(e){var t=e.target.getBoundingClientRect(),n=e.clientY-t.top;this.dragEvent=l.DragEvent.start(l.eDragEventType.dialog,this,e.clientX-t.left,n)},t.prototype.onMouseMove=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.moveMe(e.clientX-this.dragEvent.mouseOffsetX,e.clientY-this.dragEvent.mouseOffsetY)},t.prototype.onMouseUp=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.dragEvent.end(null,e.clientX,e.clientY)},t}(s.Component);t.FlowDialogBox=c},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowMessageBox=void 0;var s=n(0),l=n(7);n(24);var c=function(e){function t(t){var n=e.call(this,t)||this;return n.dragEvent=new l.DragEvent,n.top=0,n.left=0,n.msgboxVisible=!1,n.msgboxTitle="",n.msgboxButtons=[],n.msgboxOnClose=n.hideMessageBox,n.handleKeyUp=n.handleKeyUp.bind(n),n.setDialog=n.setDialog.bind(n),n.showMessageBox=n.showMessageBox.bind(n),n.hideMessageBox=n.hideMessageBox.bind(n),n.positionDialog=n.positionDialog.bind(n),n}return r(t,e),t.prototype.setDialog=function(e){if(this.dialog=e,this.dialog){var t=this.dialog.offsetParent.clientWidth/2,n=this.dialog.offsetParent.clientHeight/2,o=this.dialog.clientWidth/2,r=this.dialog.clientHeight/2;this.left=t-o,this.top=n-r,this.dialog.classList.add("shown"),this.positionDialog()}},t.prototype.positionDialog=function(){this.dialog&&(this.dialog.style.left=this.left+"px",this.dialog.style.top=this.top+"px")},t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.showMessageBox=function(e,t,n,o){return i(this,void 0,void 0,(function(){return a(this,(function(r){return this.msgboxVisible=!0,this.msgboxTitle=e,this.msgboxContent=t,this.msgboxOnClose=o||this.hideMessageBox,this.msgboxButtons=n,this.forceUpdate(),[2]}))}))},t.prototype.hideMessageBox=function(e){return i(this,void 0,void 0,(function(){return a(this,(function(e){return this.msgboxVisible=!1,this.msgboxTitle="",this.msgboxContent=void 0,this.msgboxOnClose=void 0,this.msgboxButtons=[],this.forceUpdate(),[2]}))}))},t.prototype.stopEventBubble=function(e){return e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),e.cancelBubble=!0,e.returnValue=!1,!1},t.prototype.handleKeyUp=function(e){var t=this,n={27:function(){e.preventDefault(),t.hideMessageBox()}};n[e.keyCode]&&n[e.keyCode]()},t.prototype.render=function(){var e,t=this;if(!1===this.msgboxVisible)e=s.createElement("div",null);else{for(var n=[],o=function(e){n.push(s.createElement("button",{className:"modal-dialog-button-bar-button",title:"Cancel",onMouseDown:function(t){t.stopPropagation(),e.handler()}},e.label))},r=0,i=this.msgboxButtons;r<i.length;r++){o(i[r])}e=s.createElement("div",{className:"message-box-redaction",onMouseMove:function(e){t.onMouseMove(e)},onMouseUp:function(e){t.onMouseUp(e)},onContextMenu:function(e){e.preventDefault(),e.stopPropagation(),t.props.onContextMenu&&t.props.onContextMenu()}},s.createElement("div",{className:"message-box-content",ref:function(e){return t.setDialog(e)}},s.createElement("div",{className:"message-box-dialog"},s.createElement("div",{className:"message-box-dialog-header",onMouseDown:function(e){t.onMouseDown(e)}},s.createElement("div",{style:{display:"flex",flexDirection:"row",flexGrow:1}},s.createElement("span",{className:"message-box-dialog-header-title"},this.msgboxTitle)),s.createElement("div",{style:{display:"flex",flexDirection:"row",marginLeft:"auto",flexGrow:0}},s.createElement("span",{className:"glyphicon glyphicon-remove message-box-dialog-header-button",style:{cursor:"pointer",color:"#fefefe",marginRight:"5px",fontSize:"14pt"},title:"Close",onMouseDown:function(e){t.stopEventBubble(e),t.hideMessageBox()}}))),s.createElement("div",{className:"message-box-dialog-body"},this.msgboxContent),s.createElement("div",{className:"modal-dialog-button-bar"},n))))}return e},t.prototype.moveMe=function(e,t){this.left=e,this.top=t,this.positionDialog()},t.prototype.onMouseDown=function(e){var t=e.target.getBoundingClientRect(),n=e.clientY-t.top;this.dragEvent=l.DragEvent.start(l.eDragEventType.dialog,this,e.clientX-t.left,n)},t.prototype.onMouseMove=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.moveMe(e.clientX-this.dragEvent.mouseOffsetX,e.clientY-this.dragEvent.mouseOffsetY)},t.prototype.onMouseUp=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.dragEvent.end(null,e.clientX,e.clientY)},t}(s.Component);t.FlowMessageBox=c},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0);n(27);var a=function(e){function t(t){var n=e.call(this,t)||this;return n.icons={},n.selectedItem=n.props.onChangeValue,n.onchange=n.onchange.bind(n),n.addIcon=n.addIcon.bind(n),n.addIcons=n.addIcons.bind(n),n.addIcons(),n}return r(t,e),t.prototype.onchange=function(e){this.selectedItem=e.target.innerText,this.props.onChange&&this.props.onChange(this.selectedItem),this.forceUpdate()},t.prototype.addIcons=function(){this.addIcon("asterisk","Asterisk"),this.addIcon("plus","Plus"),this.addIcon("minus","Minus"),this.addIcon("eur","Eur"),this.addIcon("euro","Euro"),this.addIcon("cloud","Cloud"),this.addIcon("envelope","Envelope"),this.addIcon("pencil","Pencil"),this.addIcon("glass","Glass"),this.addIcon("music","Music"),this.addIcon("search","Search"),this.addIcon("heart","Heart"),this.addIcon("star","Star"),this.addIcon("star-empty","Star Empty"),this.addIcon("user","User"),this.addIcon("film","Film"),this.addIcon("th-large","Th Large"),this.addIcon("th","Th"),this.addIcon("th-list","Th List"),this.addIcon("ok","Ok"),this.addIcon("remove","Remove"),this.addIcon("zoom-in","Zoom In"),this.addIcon("zoom-out","Zoom Out"),this.addIcon("off","Off"),this.addIcon("signal","Signal"),this.addIcon("cog","Cog"),this.addIcon("trash","Trash"),this.addIcon("home","Home"),this.addIcon("file","File"),this.addIcon("time","Time"),this.addIcon("road","Road"),this.addIcon("download-alt","Download Alt"),this.addIcon("download","Download"),this.addIcon("upload","Upload"),this.addIcon("inbox","Inbox"),this.addIcon("play-circle","Play Circle"),this.addIcon("repeat","Repeat"),this.addIcon("refresh","Refresh"),this.addIcon("list-alt","List Alt"),this.addIcon("lock","Lock"),this.addIcon("flag","Flag"),this.addIcon("headphones","Headphones"),this.addIcon("volume-off","Volume Off"),this.addIcon("volume-down","Volume Down"),this.addIcon("volume-up","Volume Up"),this.addIcon("qrcode","Qrcode"),this.addIcon("barcode","Barcode"),this.addIcon("tag","Tag"),this.addIcon("tags","Tags"),this.addIcon("book","Book"),this.addIcon("bookmark","Bookmark"),this.addIcon("print","Print"),this.addIcon("camera","Camera"),this.addIcon("font","Font"),this.addIcon("bold","Bold"),this.addIcon("italic","Italic"),this.addIcon("text-height","Text Height"),this.addIcon("text-width","Text Width"),this.addIcon("align-left","Align Left"),this.addIcon("align-center","Align Center"),this.addIcon("align-right","Align Right"),this.addIcon("align-justify","Align Justify"),this.addIcon("list","List"),this.addIcon("indent-left","Indent Left"),this.addIcon("indent-right","Indent Right"),this.addIcon("facetime-video","Facetime Video"),this.addIcon("picture","Picture"),this.addIcon("map-marker","Map Marker"),this.addIcon("adjust","Adjust"),this.addIcon("tint","Tint"),this.addIcon("edit","Edit"),this.addIcon("share","Share"),this.addIcon("check","Check"),this.addIcon("move","Move"),this.addIcon("step-backward","Step Backward"),this.addIcon("fast-backward","Fast Backward"),this.addIcon("backward","Backward"),this.addIcon("play","Play"),this.addIcon("pause","Pause"),this.addIcon("stop","Stop"),this.addIcon("forward","Forward"),this.addIcon("fast-forward","Fast Forward"),this.addIcon("step-forward","Step Forward"),this.addIcon("eject","Eject"),this.addIcon("chevron-left","Chevron Left"),this.addIcon("chevron-right","Chevron Right"),this.addIcon("plus-sign","Plus Sign"),this.addIcon("minus-sign","Minus Sign"),this.addIcon("remove-sign","Remove Sign"),this.addIcon("ok-sign","Ok Sign"),this.addIcon("question-sign","Question Sign"),this.addIcon("info-sign","Info Sign"),this.addIcon("screenshot","Screenshot"),this.addIcon("remove-circle","Remove Circle"),this.addIcon("ok-circle","Ok Circle"),this.addIcon("ban-circle","Ban Circle"),this.addIcon("arrow-left","Arrow Left"),this.addIcon("arrow-right","Arrow Right"),this.addIcon("arrow-up","Arrow Up"),this.addIcon("arrow-down","Arrow Down"),this.addIcon("share-alt","Share Alt"),this.addIcon("resize-full","Resize Full"),this.addIcon("resize-small","Resize Small"),this.addIcon("exclamation-sign","Exclamation Sign"),this.addIcon("gift","Gift"),this.addIcon("leaf","Leaf"),this.addIcon("fire","Fire"),this.addIcon("eye-open","Eye Open"),this.addIcon("eye-close","Eye Close"),this.addIcon("warning-sign","Warning Sign"),this.addIcon("plane","Plane"),this.addIcon("calendar","Calendar"),this.addIcon("random","Random"),this.addIcon("comment","Comment"),this.addIcon("magnet","Magnet"),this.addIcon("chevron-up","Chevron Up"),this.addIcon("chevron-down","Chevron Down"),this.addIcon("retweet","Retweet"),this.addIcon("shopping-cart","Shopping Cart"),this.addIcon("folder-close","Folder Close"),this.addIcon("folder-open","Folder Open"),this.addIcon("resize-vertical","Resize Vertical"),this.addIcon("resize-horizontal","Resize Horizontal"),this.addIcon("hdd","Hdd"),this.addIcon("bullhorn","Bullhorn"),this.addIcon("bell","Bell"),this.addIcon("certificate","Certificate"),this.addIcon("thumbs-up","Thumbs Up"),this.addIcon("thumbs-down","Thumbs Down"),this.addIcon("hand-right","Hand Right"),this.addIcon("hand-left","Hand Left"),this.addIcon("hand-up","Hand Up"),this.addIcon("hand-down","Hand Down"),this.addIcon("circle-arrow-right","Circle Arrow Right"),this.addIcon("circle-arrow-left","Circle Arrow Left"),this.addIcon("circle-arrow-up","Circle Arrow Up"),this.addIcon("circle-arrow-down","Circle Arrow Down"),this.addIcon("globe","Globe"),this.addIcon("wrench","Wrench"),this.addIcon("tasks","Tasks"),this.addIcon("filter","Filter"),this.addIcon("briefcase","Briefcase"),this.addIcon("fullscreen","Fullscreen"),this.addIcon("dashboard","Dashboard"),this.addIcon("paperclip","Paperclip"),this.addIcon("heart-empty","Heart Empty"),this.addIcon("link","Link"),this.addIcon("phone","Phone"),this.addIcon("pushpin","Pushpin"),this.addIcon("usd","Usd"),this.addIcon("gbp","Gbp"),this.addIcon("sort","Sort"),this.addIcon("sort-by-alphabet","Sort By Alphabet"),this.addIcon("sort-by-alphabet-alt","Sort By Alphabet Alt"),this.addIcon("sort-by-order","Sort By Order"),this.addIcon("sort-by-order-alt","Sort By Order Alt"),this.addIcon("sort-by-attributes","Sort By Attributes"),this.addIcon("sort-by-attributes-alt","Sort By Attributes Alt"),this.addIcon("unchecked","Unchecked"),this.addIcon("expand","Expand"),this.addIcon("collapse-down","Collapse Down"),this.addIcon("collapse-up","Collapse Up"),this.addIcon("log-in","Log In"),this.addIcon("flash","Flash"),this.addIcon("log-out","Log Out"),this.addIcon("new-window","New Window"),this.addIcon("record","Record"),this.addIcon("save","Save"),this.addIcon("open","Open"),this.addIcon("saved","Saved"),this.addIcon("import","Import"),this.addIcon("export","Export"),this.addIcon("send","Send"),this.addIcon("floppy-disk","Floppy Disk"),this.addIcon("floppy-saved","Floppy Saved"),this.addIcon("floppy-remove","Floppy Remove"),this.addIcon("floppy-save","Floppy Save"),this.addIcon("floppy-open","Floppy Open"),this.addIcon("credit-card","Credit Card"),this.addIcon("transfer","Transfer"),this.addIcon("cutlery","Cutlery"),this.addIcon("header","Header"),this.addIcon("compressed","Compressed"),this.addIcon("earphone","Earphone"),this.addIcon("phone-alt","Phone Alt"),this.addIcon("tower","Tower"),this.addIcon("stats","Stats"),this.addIcon("sd-video","Sd Video"),this.addIcon("hd-video","Hd Video"),this.addIcon("subtitles","Subtitles"),this.addIcon("sound-stereo","Sound Stereo"),this.addIcon("sound-dolby","Sound Dolby"),this.addIcon("sound-5-1","Sound 5 1"),this.addIcon("sound-6-1","Sound 6 1"),this.addIcon("sound-7-1","Sound 7 1"),this.addIcon("copyright-mark","Copyright Mark"),this.addIcon("registration-mark","Registration Mark"),this.addIcon("cloud-download","Cloud Download"),this.addIcon("cloud-upload","Cloud Upload"),this.addIcon("tree-conifer","Tree Conifer"),this.addIcon("tree-deciduous","Tree Deciduous"),this.addIcon("cd","Cd"),this.addIcon("save-file","Save File"),this.addIcon("open-file","Open File"),this.addIcon("level-up","Level Up"),this.addIcon("copy","Copy"),this.addIcon("paste","Paste"),this.addIcon("alert","Alert"),this.addIcon("equalizer","Equalizer"),this.addIcon("king","King"),this.addIcon("queen","Queen"),this.addIcon("pawn","Pawn"),this.addIcon("bishop","Bishop"),this.addIcon("knight","Knight"),this.addIcon("baby-formula","Baby Formula"),this.addIcon("tent","Tent"),this.addIcon("blackboard","Blackboard"),this.addIcon("bed","Bed"),this.addIcon("apple","Apple"),this.addIcon("erase","Erase"),this.addIcon("hourglass","Hourglass"),this.addIcon("lamp","Lamp"),this.addIcon("duplicate","Duplicate"),this.addIcon("piggy-bank","Piggy Bank"),this.addIcon("scissors","Scissors"),this.addIcon("bitcoin","Bitcoin"),this.addIcon("yen","Yen"),this.addIcon("ruble","Ruble"),this.addIcon("scale","Scale"),this.addIcon("ice-lolly","Ice Lolly"),this.addIcon("ice-lolly-tasted","Ice Lolly Tasted"),this.addIcon("education","Education"),this.addIcon("option-horizontal","Option Horizontal"),this.addIcon("option-vertical","Option Vertical"),this.addIcon("menu-hamburger","Menu Hamburger"),this.addIcon("modal-window","Modal Window"),this.addIcon("oil","Oil"),this.addIcon("grain","Grain"),this.addIcon("sunglasses","Sunglasses"),this.addIcon("text-size","Text Size"),this.addIcon("text-color","Text Color"),this.addIcon("text-background","Text Background"),this.addIcon("object-align-top","Object Align Top"),this.addIcon("object-align-bottom","Object Align Bottom"),this.addIcon("object-align-horizontal","Object Align Horizontal"),this.addIcon("object-align-left","Object Align Left"),this.addIcon("object-align-vertical","Object Align Vertical"),this.addIcon("object-align-right","Object Align Right"),this.addIcon("triangle-right","Triangle Right"),this.addIcon("triangle-left","Triangle Left"),this.addIcon("triangle-bottom","Triangle Bottom"),this.addIcon("triangle-top","Triangle Top"),this.addIcon("console","Console"),this.addIcon("superscript","Superscript"),this.addIcon("subscript","Subscript"),this.addIcon("menu-left","Menu Left"),this.addIcon("menu-right","Menu Right"),this.addIcon("menu-down","Menu Down"),this.addIcon("menu-up","Menu Up")},t.prototype.addIcon=function(e,t){this.icons[e]={name:e,label:t}},t.prototype.render=function(){for(var e=this,t=[],n=0,o=Object.keys(this.icons);n<o.length;n++){var r=o[n],a="glyphicon glyphicon-"+this.icons[r].name+" icon-picker-icon";t.push(i.createElement("li",{onClick:function(t){e.onchange(t)}},i.createElement("span",{className:a}),this.icons[r].name))}return i.createElement("div",{className:"btn-group"},i.createElement("button",{type:"button",className:"btn btn-default dropdown-toggle","data-toggle":"dropdown"},i.createElement("span",{className:"glyphicon glyphicon-"+this.selectedItem}),i.createElement("span",{className:"caret"})),i.createElement("ul",{className:"dropdown-menu",role:"menu"},t))},t}(i.Component);t.default=a},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowChart=t.FlowChartColumnDefinition=t.eFlowChartType=void 0;var s,l=n(0),c=n(3),u=n(1);!function(e){e[e.BarChart=0]="BarChart",e[e.ColumnChart=1]="ColumnChart",e[e.GeoChart=2]="GeoChart",e[e.PieChart=3]="PieChart",e[e.DonutChart=4]="DonutChart"}(s=t.eFlowChartType||(t.eFlowChartType={}));var d=function(e,t){this.developerName=e,this.type=t};t.FlowChartColumnDefinition=d;var p=function(e){function t(t){var n=e.call(this,t)||this;return n.apiKey="",n.beginChartsApi=n.beginChartsApi.bind(n),n.apiLoaded=n.apiLoaded.bind(n),n.drawChart=n.drawChart.bind(n),n.flowMoved=n.flowMoved.bind(n),n.apiKey=n.getAttribute("APIKey",""),n}return r(t,e),t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.dontLoadAllValues()];case 2:return t.sent(),manywho.eventManager.addDoneListener(this.flowMoved,this.componentId),this.beginChartsApi(),[2]}}))}))},t.prototype.componentWillUnmount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentWillUnmount.call(this)];case 1:return t.sent(),manywho.eventManager.removeDoneListener(this.componentId),[2]}}))}))},t.prototype.flowMoved=function(e,t){return i(this,void 0,void 0,(function(){var n;return a(this,(function(o){return n=this,"FORWARD"===e.invokeType&&(this.loadingState!==c.eLoadingState.ready?window.setTimeout((function(){n.flowMoved(e,t)}),500):(manywho.model.parseEngineResponse(e,this.props.flowKey),this.beginChartsApi())),[2]}))}))},t.prototype.beginChartsApi=function(){if("undefined"==typeof google||void 0===google.charts)if(void 0===window.G13ChartLoading){var e=document.createElement("script");e.src="https://www.gstatic.com/charts/loader.js",e.addEventListener("load",this.apiLoaded),window.document.body.appendChild(e),window.G13ChartLoading=!0}else window.setTimeout(this.beginChartsApi,300);else this.apiLoaded()},t.prototype.apiLoaded=function(){var e;(null===google||void 0===google?void 0:google.charts)&&(null===(e=null===google||void 0===google?void 0:google.visualization)||void 0===e?void 0:e.GeoChart)?this.drawChart():(google.charts.load("current",{packages:["corechart","geochart"],mapsApiKey:this.apiKey}),google.charts.setOnLoadCallback(this.drawChart))},t.prototype.buildData=function(e){var t=this;this.model.dataSource&&this.model.dataSource.items.forEach((function(n){var o=[];t.propertyNames.forEach((function(e){var t=n.properties[e.developerName];e.type===u.eContentType.ContentNumber?o.push(parseInt(t.value)):o.push(t.value)})),e.push(o)}))},t.prototype.drawChart=function(){var e=[];if(e.push(this.columnNames),this.buildData(e),this.chartData=google.visualization.arrayToDataTable(e),!this.chart)switch(this.chartType){case s.BarChart:this.chart=new google.visualization.BarChart(document.getElementById(this.componentId));break;case s.ColumnChart:this.chart=new google.visualization.ColumnChart(document.getElementById(this.componentId));break;case s.GeoChart:this.chart=new google.visualization.GeoChart(document.getElementById(this.componentId));break;case s.PieChart:case s.DonutChart:this.chart=new google.visualization.PieChart(document.getElementById(this.componentId))}this.chart.draw(this.chartData,this.options)},t.prototype.render=function(){return l.createElement("div",{id:this.componentId})},t}(c.FlowBaseComponent);t.FlowChart=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){this.columns=new Map};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(e,t){this.name=e,this.originalValue=t,this.newValue=t};t.default=o},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=i(n(0)),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){var e,t=this,n=this.props.root,o=null===(e=n.rowMap.get(this.props.id))||void 0===e?void 0:e.objectData,r=[];Object.keys(n.outcomes).forEach((function(e){if(!1===n.outcomes[e].isBulkAction){var t=void 0,i=void 0;(!n.outcomes[e].attributes.display||n.outcomes[e].attributes.display.value.indexOf("text")>=0)&&(i=a.default.createElement("span",{className:"sft-table-cell-button-label"},n.outcomes[e].label)),n.outcomes[e].attributes.display&&n.outcomes[e].attributes.display.value.indexOf("icon")>=0&&(t=a.default.createElement("span",{className:"sft-table-cell-button-icon glyphicon glyphicon-"+(n.outcomes[e].attributes.icon.value||"plus")})),r.push(a.default.createElement("div",{className:"sft-table-cell-button",title:n.outcomes[e].label,onClick:function(t){n.doOutcome(e,o.internalId)}},t,i))}}));var i=[];return i.push(a.default.createElement("td",{className:"sft-table-cell"},a.default.createElement("input",{className:"sft-checkbox",type:"checkbox",onClick:function(e){n.toggleSelect(e,t.props.id)},checked:n.selectedRowMap.has(this.props.id)}))),r.length>0&&i.push(a.default.createElement("td",{className:"sft-table-cell"},a.default.createElement("div",{className:"sft-table-cell-buttons"},r))),n.colMap.forEach((function(e){i.push(a.default.createElement("td",{className:"sft-table-cell"},a.default.createElement("span",{className:"sft-table-cell-text"},o.properties[e.developerName].value)))})),a.default.createElement("tr",{className:"sft-table-row"},i)},t}(a.default.Component);t.default=s},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=i(n(0)),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.render=function(){var e=[],t=this.props.root,n=[];return Object.keys(t.outcomes).forEach((function(e){!1===t.outcomes[e].isBulkAction&&n.push(e)})),t.colMap.size>0&&(e.push(a.default.createElement("th",{className:"sft-check-header"},a.default.createElement("input",{className:"sft-checkbox",type:"checkbox",onClick:function(e){t.toggleSelectAll(e)}}))),n.length>0&&e.push(a.default.createElement("th",{className:"sft-column-header"},a.default.createElement("div",{className:"sft-column-header-title"},a.default.createElement("span",{className:"sft-column-header-title-label"},"Actions")))),t.colMap.forEach((function(n){var o=t.filters.getSortIcon(n.developerName),r=t.filters.getFilterIcon(n.developerName);e.push(a.default.createElement("th",{className:"sft-column-header"},a.default.createElement("div",{className:"sft-column-header-wrapper"},a.default.createElement("div",{className:"sft-column-header-top"},a.default.createElement("div",{className:"sft-column-header-title"},a.default.createElement("span",{className:"sft-column-header-title-label"},n.label))),a.default.createElement("div",{className:"sft-column-header-bottom"},a.default.createElement("div",{className:"sft-column-header-flags"},o),a.default.createElement("div",{className:"sft-column-header-buttons"},r)))))}))),a.default.createElement("tr",{className:"sft-column-headers"},e)},t}(a.default.Component);t.default=s},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(8)),i=n(13),a=function(){function e(e,t,n,o){var a=this;void 0===n&&(n=i.eSortDirection.none),void 0===o&&(o=[]),this.sort=i.eSortDirection.none,this.criteria=[],this.key=e,this.parent=t,this.sort=n,o.forEach((function(e){e=JSON.parse(e),a.criteria.push(new r.default(e.comparator,e.value))})),this.notify=this.notify.bind(this)}return e.prototype.clearFilters=function(){this.criteria=[],this.notify(i.eFilterEvent.filter)},e.prototype.notify=function(e){this.parent.notify(this.key,e)},e.prototype.sortAscending=function(){this.sort=i.eSortDirection.ascending,this.notify(i.eFilterEvent.sort)},e.prototype.sortDescending=function(){this.sort=i.eSortDirection.descending,this.notify(i.eFilterEvent.sort)},e.prototype.sortToggle=function(){switch(this.sort){case i.eSortDirection.none:case i.eSortDirection.descending:this.sort=i.eSortDirection.ascending;break;default:this.sort=i.eSortDirection.descending}this.notify(i.eFilterEvent.sort)},e.prototype.sortNone=function(){this.sort=i.eSortDirection.none,this.notify(i.eFilterEvent.sort)},e.prototype.getForStorage=function(){var e={};return e.key=this.key,e.sort=this.sort,e.criteria=[],this.criteria.forEach((function(t){e.criteria.push(t.getForStorage())})),JSON.stringify(e)},e}();t.default=a},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&i(t,e,n);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=l(n(0)),u=s(n(8)),d=l(n(36)),p=function(e){function t(t){var n=e.call(this,t)||this;return n.filter=n.props.filter,n.newCriteria=[],n.filter.criteria.forEach((function(e){n.newCriteria.push(e)})),n.addCriteria=n.addCriteria.bind(n),n}return r(t,e),t.prototype.addCriteria=function(){this.newCriteria.push(new u.default(u.eColumnComparator.equalTo,"")),this.forceUpdate()},t.prototype.getOptions=function(e){var t=[];return t.push(c.default.createElement("option",{value:u.eColumnComparator.equalTo,selected:e.comparator===u.eColumnComparator.equalTo},"Equals"),c.default.createElement("option",{value:u.eColumnComparator.notEqualTo,selected:e.comparator===u.eColumnComparator.notEqualTo},"Not Equal To"),c.default.createElement("option",{value:u.eColumnComparator.contains,selected:e.comparator===u.eColumnComparator.contains},"Contains"),c.default.createElement("option",{value:u.eColumnComparator.notContains,selected:e.comparator===u.eColumnComparator.notContains},"Does Not Contain"),c.default.createElement("option",{value:u.eColumnComparator.startsWith,selected:e.comparator===u.eColumnComparator.startsWith},"Starts With"),c.default.createElement("option",{value:u.eColumnComparator.endsWith,selected:e.comparator===u.eColumnComparator.endsWith},"Ends With"),c.default.createElement("option",{value:u.eColumnComparator.in,selected:e.comparator===u.eColumnComparator.in},"Is one of"),c.default.createElement("option",{value:u.eColumnComparator.notIn,selected:e.comparator===u.eColumnComparator.notIn},"Is Not One Of")),t},t.prototype.getColumnUniques=function(e,t){var n=this.props.root;return c.default.createElement(d.default,{allItems:n.colValMap.get(e),selectedItems:t.value})},t.prototype.prepCriteriaValue=function(e){switch(e.comparator){case u.eColumnComparator.in:case u.eColumnComparator.notIn:e.value=new Map;break;default:"string"!=typeof e.value&&(e.value="")}},t.prototype.render=function(){var e=this,t=[];return 0===this.newCriteria.length?t.push(c.default.createElement("div",{className:"sft-fcf-row"},c.default.createElement("span",{className:"sft-fcf-label"},"No Criteria defined"))):this.newCriteria.forEach((function(n){var o,r=e.getOptions(n);switch(n.comparator){case u.eColumnComparator.in:case u.eColumnComparator.notIn:o=e.getColumnUniques(e.props.developerName,n);break;default:o=c.default.createElement("input",{type:"text",className:"sft-fcf-input",defaultValue:n.value,onChange:function(e){n.value=e.target.value}})}t.push(c.default.createElement("div",{className:"sft-fcf-row"},c.default.createElement("select",{className:"sft-fcf-select",onChange:function(t){n.comparator=parseInt(t.target.options[t.target.selectedIndex].value),e.prepCriteriaValue(n),e.forceUpdate()}},r),o,c.default.createElement("span",{className:"sft-fcf-button glyphicon glyphicon-remove-sign",title:"Remove criteria",onClick:function(t){e.newCriteria=e.newCriteria.filter((function(e){return e!==n})),e.forceUpdate()}})))})),t.push(c.default.createElement("div",{className:"sft-fcf-buttons"},c.default.createElement("span",{className:"sft-fcf-button glyphicon glyphicon-plus-sign",title:"Add criteria",onClick:this.addCriteria}))),c.default.createElement("div",{className:"modal-dialog-content"},t)},t}(c.default.Component);t.default=p},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=i(n(0));n(37);var s=function(e){function t(t){var n=e.call(this,t)||this;return n.expanded=!1,n.showCheckboxes=n.showCheckboxes.bind(n),n}return r(t,e),t.prototype.showCheckboxes=function(){var e=document.getElementById("checkboxes");this.expanded?(e.style.display="none",this.expanded=!1):(e.style.display="flex",this.expanded=!0)},t.prototype.render=function(){var e=this,t=[],n=new Intl.Collator(void 0,{numeric:!0,sensitivity:"base"});return Array.from(this.props.allItems.keys()).sort((function(e,t){return n.compare(e,t)})).forEach((function(n){t.push(a.default.createElement("div",{className:"checkbox-row"},a.default.createElement("div",{className:"checkbox-checkbox-wrapper"},a.default.createElement("input",{type:"checkbox",id:n,key:n,className:"sft-checkbox",checked:e.props.selectedItems.has(n),onClick:function(t){e.props.selectedItems.has(n)?e.props.selectedItems.delete(n):e.props.selectedItems.set(n,n),e.forceUpdate()}})),a.default.createElement("div",{className:"checkbox-label-wrapper"},a.default.createElement("span",{className:"checkbox-row-label"},n))))})),a.default.createElement("div",{className:"multiselect"},a.default.createElement("div",{className:"selectBox",onClick:this.showCheckboxes},a.default.createElement("select",null,a.default.createElement("option",null,"Select an option")),a.default.createElement("div",{className:"overSelect"})),a.default.createElement("div",{className:"checkboxScroller"},a.default.createElement("div",{className:"checkboxes",id:"checkboxes"},t)))},t}(a.default.Component);t.default=s},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=i(n(0)),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.componentDidMount=function(){this.forceUpdate(),this.maxPerPageChanged=this.maxPerPageChanged.bind(this)},t.prototype.maxPerPageChanged=function(e){this.props.root.maxPerPageChanged(parseInt(this.maxPerPage.options[this.maxPerPage.selectedIndex].value))},t.prototype.render=function(){var e,t,n,o,r=this,i=this.props.root,s="Selected "+i.selectedRowMap.size+" of "+i.currentRowMap.size+" items from a total dataset of "+i.rowMap.size,l="page "+(i.currentRowPage+1)+" of "+i.currentRowPages.length;i.currentRowPage>0?(e=a.default.createElement("span",{className:"glyphicon glyphicon-fast-backward sft-footer-pagination-button",title:"First page",onClick:i.firstPage}),t=a.default.createElement("span",{className:"glyphicon glyphicon-step-backward sft-footer-pagination-button",title:"Previous page",onClick:i.previousPage})):(e=a.default.createElement("span",{className:"glyphicon glyphicon-fast-backward sft-footer-pagination-button sft-footer-pagination-button-disabled"}),t=a.default.createElement("span",{className:"glyphicon glyphicon-step-backward sft-footer-pagination-button sft-footer-pagination-button-disabled"})),i.currentRowPage<i.currentRowPages.length-1?(o=a.default.createElement("span",{className:"glyphicon glyphicon-fast-forward sft-footer-pagination-button",title:"Last page",onClick:i.lastPage}),n=a.default.createElement("span",{className:"glyphicon glyphicon-step-forward sft-footer-pagination-button",title:"Next page",onClick:i.nextPage})):(o=a.default.createElement("span",{className:"glyphicon glyphicon-fast-forward sft-footer-pagination-button sft-footer-pagination-button-disabled"}),n=a.default.createElement("span",{className:"glyphicon glyphicon-step-forward sft-footer-pagination-button sft-footer-pagination-button-disabled"}));var c=[];c.push(10,20,50,100),c.indexOf(i.maxPageRows)<0&&c.push(i.maxPageRows),c=c.sort((function(e,t){return e-t}));var u=[];c.forEach((function(e){u.push(a.default.createElement("option",{value:e,selected:i.maxPageRows===e},e))}));var d=a.default.createElement("select",{className:"sft-footer-select",onChange:this.maxPerPageChanged,ref:function(e){r.maxPerPage=e}},u);return a.default.createElement("div",{className:"sft-footer"},a.default.createElement("div",{className:"sft-footer-summary"},a.default.createElement("span",{className:"sft-footer-summary-label"},s)),a.default.createElement("div",{className:"sft-footer-spacer"}),a.default.createElement("div",{className:"sft-footer-perpage"},a.default.createElement("div",{className:"sft-footer-perpage-label"},"Items per page"),a.default.createElement("div",{className:"sft-footer-perpage-dropdown"},d)),a.default.createElement("div",{className:"sft-footer-pagination"},e,t,a.default.createElement("span",{className:"sft-footer-pagination-label"},l),n,o))},t}(a.default.Component);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(5),r=function(){function e(){}return e.export=function(e,t,n){var o=this,r="",i="",a="";t.forEach((function(t){0===i.length&&(i=o.buildHeaders(e,t.objectData)),a=o.buildRow(e,t.objectData),r+=a}));var s=new Blob([i+r],{type:"text/csv"});if(navigator.msSaveBlob)navigator.msSaveBlob(s,n);else{var l=document.createElement("a");if(void 0!==l.download){var c=URL.createObjectURL(s);l.setAttribute("href",c),l.setAttribute("download",n),l.style.visibility="hidden",document.body.appendChild(l),l.click(),document.body.removeChild(l)}}},e.buildHeaders=function(e,t){var n="";return e.forEach((function(e){switch(e.contentType){case o.eContentType.ContentList:t.properties[e.developerName].value.items.forEach((function(e){n.length>0&&(n+=","),n+='"'+e.properties.ATTRIBUTE_DISPLAY_NAME.value+'"'}));break;default:n.length>0&&(n+=","),n+='"'+e.label+'"'}})),n+="\r\n"},e.buildRow=function(e,t){var n="";return e.forEach((function(e){switch(e.contentType){case o.eContentType.ContentList:t.properties[e.developerName].value.items.forEach((function(e){n.length>0&&(n+=","),n+='"'+e.properties.ATTRIBUTE_VALUE.value+'"'}));break;default:n.length>0&&(n+=","),n+='"'+t.properties[e.developerName].value+'"'}})),n+="\r\n"},e}();t.default=r},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=i(n(0)),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.render=function(){var e=this.props.root,t=[],n=[],o="true"===e.getAttribute("canExport","true").toLowerCase();return!0===o&&n.push(a.default.createElement("div",{className:"sft-ribbon-button-wrapper",onClick:function(t){t.stopPropagation(),e.doExport(e.rowMap)}},a.default.createElement("span",{key:"exportAll",className:"glyphicon glyphicon-floppy-save sft-ribbon-button-icon",title:"Export All"}),a.default.createElement("span",{className:"sft-ribbon-button-label"},"Export All"))),e.rowMap.size>e.currentRowMap.size&&!0===o&&n.push(a.default.createElement("div",{className:"sft-ribbon-button-wrapper",onClick:function(t){t.stopPropagation(),e.doExport(e.currentRowMap)}},a.default.createElement("span",{key:"exportShown",className:"glyphicon glyphicon-floppy-save sft-ribbon-button-icon",title:"Export Shown"}),a.default.createElement("span",{className:"sft-ribbon-button-label"},"Export Shown"))),Object.keys(e.outcomes).forEach((function(o){var r,i,s,l=e.outcomes[o];l.isBulkAction&&"OnSelect"!==l.developerName&&"OnChange"!==l.developerName&&!l.developerName.toLowerCase().startsWith("cm")&&("true"===(null===(r=l.attributes.RequiresSelected)||void 0===r?void 0:r.value)?e.selectedRowMap.size>0&&t.push(a.default.createElement("div",{className:"sft-ribbon-button-wrapper",onClick:function(t){e.doOutcome(o,void 0)}},a.default.createElement("span",{key:o,className:"glyphicon glyphicon-"+((null===(i=l.attributes.icon)||void 0===i?void 0:i.value)||"plus")+" sft-ribbon-button-icon",title:l.label||o}),a.default.createElement("span",{className:"sft-ribbon-button-label"},l.label||o))):n.push(a.default.createElement("div",{className:"sft-ribbon-button-wrapper",onClick:function(t){e.doOutcome(o,void 0)}},a.default.createElement("span",{key:o,className:"glyphicon glyphicon-"+((null===(s=l.attributes.icon)||void 0===s?void 0:s.value)||"plus")+" sft-ribbon-button-icon",title:l.label||o}),a.default.createElement("span",{className:"sft-ribbon-button-label"},l.label||o))))})),e.selectedRowMap.size>0&&!0===o&&t.push(a.default.createElement("div",{className:"sft-ribbon-button-wrapper",onClick:function(t){t.stopPropagation(),e.doExport(e.selectedRowMap)}},a.default.createElement("span",{key:"exportSelected",className:"glyphicon glyphicon-floppy-save sft-ribbon-button-icon",title:"Export Selected"}),a.default.createElement("span",{className:"sft-ribbon-button-label"},"Export Selected"))),a.default.createElement("div",{className:"sft-ribbon"},a.default.createElement("div",{className:"sft-ribbon-left-wrapper"},a.default.createElement("div",{className:"sft-ribbon-title-wrapper"},a.default.createElement("span",{className:"sft-ribbon-title"},"Available actions:")),a.default.createElement("div",{className:"sft-ribbon-hbuttons-wrapper"},t)),a.default.createElement("div",{className:"sft-ribbon-right-wrapper"},a.default.createElement("div",{className:"sft-ribbon-title-wrapper"},a.default.createElement("span",{className:"sft-ribbon-title"})),a.default.createElement("div",{className:"sft-ribbon-hbuttons-wrapper"},n)))},t}(a.default.Component);t.default=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dGaWVsZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dPYmplY3REYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRmxvd0Jhc2VDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zsb3ctY29tcG9uZW50LW1vZGVsL2xpYi9GbG93T2JqZWN0RGF0YUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRmxvd0NvbXBvbmVudE1vZGVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRmxvd0F0dHJpYnV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0RpYWxvZ3MvQ29tbW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9Db2x1bW5Dcml0ZXJpYS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dEaXNwbGF5Q29sdW1uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRmxvd09iamVjdERhdGFQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dPdXRjb21lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRGlhbG9ncy9GbG93Q29udGV4dE1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbHVtbkZpbHRlcnMudHN4Iiwid2VicGFjazovLy8uL3NyYy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL1NlYXJjaEZpbHRlclRhYmxlLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zsb3ctY29tcG9uZW50LW1vZGVsL2xpYi9FdmVudE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC50aHJvdHRsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRmxvd1BhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zsb3ctY29tcG9uZW50LW1vZGVsL2xpYi9EaWFsb2dzL0Zsb3dEaWFsb2dCb3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zsb3ctY29tcG9uZW50LW1vZGVsL2xpYi9EaWFsb2dzL0Zsb3dNZXNzYWdlQm94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvSWNvblBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dDaGFydC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUm93SXRlbS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQ2VsbEl0ZW0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NlYXJjaEZpbHRlclRhYmxlUm93LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvU2VhcmNoRmlsdGVyVGFibGVIZWFkZXJzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvQ29sdW1uRmlsdGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9GaWx0ZXJDb25maWdGb3JtLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvTXVsdGlTZWxlY3QudHN4Iiwid2VicGFjazovLy8uL3NyYy9TZWFyY2hGaWx0ZXJUYWJsZUZvb3Rlci50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL01vZGVsRXhwb3J0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NlYXJjaEZpbHRlclRhYmxlUmliYm9uLnRzeCJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlJlYWN0IiwiRmxvd0ZpZWxkIiwiZUNvbnRlbnRUeXBlIiwiRmxvd09iamVjdERhdGFfMSIsIkZsb3dPYmplY3REYXRhQXJyYXlfMSIsImZpZWxkIiwidGhpcyIsIkNvbnRlbnRUeXBlIiwidW5rbm93biIsIkRldmVsb3Blck5hbWUiLCJUeXBlRWxlbWVudERldmVsb3Blck5hbWUiLCJUeXBlRWxlbWVudElkIiwiVHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWUiLCJUeXBlRWxlbWVudFByb3BlcnR5SWQiLCJWYWx1ZUVsZW1lbnRJZCIsImNvbnRlbnRUeXBlIiwiZGV2ZWxvcGVyTmFtZSIsInR5cGVFbGVtZW50RGV2ZWxvcGVyTmFtZSIsInR5cGVFbGVtZW50SWQiLCJ0eXBlRWxlbWVudFByb3BlcnR5RGV2ZWxvcGVyTmFtZSIsInR5cGVFbGVtZW50UHJvcGVydHlJZCIsInZhbHVlRWxlbWVudElkIiwiQ29udGVudE9iamVjdCIsIlZhbHVlIiwib2JqZWN0RGF0YSIsIkZsb3dPYmplY3REYXRhIiwidW5kZWZpbmVkIiwiQ29udGVudExpc3QiLCJGbG93T2JqZWN0RGF0YUFycmF5IiwiY29udGVudFZhbHVlIiwiY29uZmlndXJhYmxlIiwic2V0IiwiaUZsb3dGaWVsZCIsIm9kIiwicHVzaCIsImlPYmplY3REYXRhIiwiaUZsb3dPYmplY3REYXRhQXJyYXkiLCJGbG93T2JqZWN0RGF0YVByb3BlcnR5XzEiLCJkYXRhIiwiRXh0ZXJuYWxJZCIsIkludGVybmFsSWQiLCJJc1NlbGVjdGVkIiwiT3JkZXIiLCJQcm9wZXJ0aWVzIiwiaW50ZXJuYWxJZCIsImV4dGVybmFsSWQiLCJvcmRlciIsImlzU2VsZWN0ZWQiLCJwcm9wZXJ0aWVzIiwibGVuZ3RoIiwiX2kiLCJfYSIsIkZsb3dPYmplY3REYXRhUHJvcGVydHkiLCJjb25zb2xlIiwibG9nIiwibmV3SW5zdGFuY2UiLCJtYW55d2hvIiwidXRpbHMiLCJndWlkIiwiYWRkUHJvcGVydHkiLCJuZXdQcm9wZXJ0eSIsInJlbW92ZVByb3BlcnR5IiwiY2xvbmUiLCJuZXdUeXBlTmFtZSIsIl90aGlzIiwia2V5cyIsImZvckVhY2giLCJuZXdQcm9wIiwic2VsZWN0ZWQiLCJwcm9wcyIsImlGbG93T2JqZWN0RGF0YVByb3BlcnR5Iiwib3V0cHV0IiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwiX18iLCJjb25zdHJ1Y3RvciIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiX19nZW5lcmF0b3IiLCJib2R5IiwiZiIsInkiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiaXRlcmF0b3IiLCJ2Iiwib3AiLCJUeXBlRXJyb3IiLCJwb3AiLCJGbG93QmFzZUNvbXBvbmVudCIsImVMb2FkaW5nU3RhdGUiLCJGbG93QXR0cmlidXRlXzEiLCJGbG93RGlzcGxheUNvbHVtbl8xIiwiRmxvd0ZpZWxkXzEiLCJGbG93T3V0Y29tZV8xIiwidGhyb3R0bGUiLCJfc3VwZXIiLCJGaWVsZHMiLCJBdHRyaWJ1dGVzIiwiT3V0Y29tZXMiLCJzZW5kQ29sbGFib3JhdGlvbk1lc3NhZ2UiLCJfc2VuZENvbGxhYm9yYXRpb25NZXNzYWdlIiwiTG9hZGluZ1N0YXRlIiwiaW5pdGl0aWFsaXppbmciLCJsb2FkQWxsVmFsdWVzIiwiZG9udExvYWRBbGxWYWx1ZXMiLCJ1cGRhdGVWYWx1ZXMiLCJ0cmlnZ2VyT3V0Y29tZSIsIkNvbXBvbmVudElkIiwiaWQiLCJQYXJlbnRJZCIsInBhcmVudElkIiwiRmxvd0tleSIsImZsb3dLZXkiLCJsb2FkTW9kZWwiLCJsb2FkQXR0cmlidXRlcyIsImxvYWRPdXRjb21lcyIsInJlY2VpdmVNZXNzYWdlIiwiZ2V0U3RhdGVWYWx1ZSIsInNldFN0YXRlVmFsdWUiLCJnZXRTdGF0ZVZhbHVlVHlwZSIsIm9uQmVmb3JlU2VuZCIsIm9uRG9uZSIsImNhbGN1bGF0ZVZhbHVlIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImJhc2VVcmwiLCJzZXR0aW5ncyIsImdsb2JhbCIsImxvY2F0aW9uIiwib3JpZ2luIiwiU3RhdGVJZCIsImV4dHJhY3RTdGF0ZUlkIiwiVGVuYW50SWQiLCJleHRyYWN0VGVuYW50SWQiLCJpbnZva2V1cmwiLCJ1cmwiLCJ1c2VydXJsIiwidmFsdWV1cmwiLCJpbml0aXRpYWxpemVkIiwicmVhZHkiLCJNb2RlbCIsIlVzZXIiLCJocmVmIiwiSXNEZXNpZ25UaW1lIiwiSlNPTiIsInBhcnNlIiwic2Vzc2lvblN0b3JhZ2UiLCJmbG93VXNlciIsImF1dGhlbnRpY2F0aW9uVG9rZW4iLCJnZXRBdHRyaWJ1dGUiLCJhdHRyaWJ1dGVOYW1lIiwiZGVmYXVsdFZhbHVlIiwiYXR0cmlidXRlcyIsInhociIsInJlcXVlc3QiLCJvYyIsImdldE91dGNvbWVCeUlkIiwibWFwRWxlbWVudEludm9rZVJlcXVlc3QiLCJzZWxlY3RlZE91dGNvbWVJZCIsIm9jdCIsImV2ZW50TWFuYWdlciIsIm91dGNvbWVCZWluZ1RyaWdnZXJlZCIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsInN0cmlwcGVkIiwicmVwbGFjZSIsInZhbCIsInN0cmlwcGVkQml0cyIsInNwbGl0IiwicG9zIiwiZmllbGRzIiwiZWxlIiwib3V0Y29tZV8xIiwiaW52b2tlVHlwZSIsIm1vZGVsIiwicGFyc2VFbmdpbmVSZXNwb25zZSIsInByZXNlcnZlU3RhdGUiLCJhdHRyIiwidGFyZ2V0VXJsIiwiX2IiLCJ0b0xvd2VyQ2FzZSIsImNsb3NlIiwiQXV0b09wZW5VcmwiLCJvcGVuIiwiYWxlcnQiLCJBdXRvTmF2VXJsIiwicHJpbnQiLCJjb21wb25lbnREaWRNb3VudCIsIm1vdW50aW5nIiwiYWRkRG9uZUxpc3RlbmVyIiwiY29tcG9uZW50SWQiLCJhZGRCZWZvcmVTZW5kTGlzdGVuZXIiLCJtb3VudGVkIiwicmVtb3ZlTG9hZGluZ0luZGljYXRvciIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVtb3ZlQmVmb3JlU2VuZExpc3RlbmVyIiwicmVtb3ZlRG9uZUxpc3RlbmVyIiwibG9hZE91dGNvbWUiLCJvdXRjb21lSWQiLCJvdXRjb21lIiwiZ2V0T3V0Y29tZSIsIkZsb3dPdXRjb21lIiwib3V0cyIsImdldE91dGNvbWVzIiwib3V0c18xIiwib3V0c18yIiwib3V0Y29tZXMiLCJnZXRDb21wb25lbnQiLCJhdHRycyIsIkZsb3dBdHRyaWJ1dGUiLCJjb250ZW50IiwiZGF0YVNvdXJjZSIsImRpc3BsYXlDb2x1bW5zIiwiZW5hYmxlZCIsImlzRW5hYmxlZCIsImhlaWdodCIsImhlbHBJbmZvIiwiaGludEluZm8iLCJoaW50VmFsdWUiLCJqb2luVXJpIiwiam9pblVSSSIsIm1heFNpemUiLCJtdWx0aVNlbGVjdCIsImlzTXVsdGlTZWxlY3QiLCJyZWFkT25seSIsImlzRWRpdGFibGUiLCJyZXF1aXJlZCIsImlzUmVxdWlyZWQiLCJzaXplIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJ2aXNpYmxlIiwiaXNWaXNpYmxlIiwid2lkdGgiLCJkcyIsImRzXzEiLCJhZGRJdGVtIiwiY29scyIsImNvbHVtbnMiLCJjb2xzXzEiLCJjb2wiLCJGbG93RGlzcGxheUNvbHVtbiIsImxvYWRWYWx1ZSIsInZhbHVlTmFtZSIsImxvYWRpbmciLCJjYWxsUmVxdWVzdE9sZCIsImdldFJlc3VsdEJvZHlUZXh0IiwicmVzcG9uc2UiLCJ0ZXh0Iiwic3Vic3RyIiwiY2FsbFJlcXVlc3QiLCJtZXRob2QiLCJyZXN1bHRzIiwiaGVhZGVycyIsInRlbmFudElkIiwiY3JlZGVudGlhbHMiLCJmZXRjaCIsImpzb24iLCJlcnJvclRleHQiLCJzdGF0dXMiLCJjb25uZWN0aW9uIiwic3RhdGUiLCJnZXRBdXRoZW50aWNhdGlvblRva2VuIiwidXNlcnZhbCIsInUiLCJtYXAiLCJkaXJlY3RvcnlJZCIsImRpcmVjdG9yeU5hbWUiLCJlbWFpbCIsImZpcnN0TmFtZSIsImdyb3VwSWQiLCJncm91cE5hbWUiLCJpcEFkZHJlc3MiLCJsYW5ndWFnZSIsImxhc3ROYW1lIiwicm9sZUlkIiwicm9sZU5hbWUiLCJ1c2VyTmFtZSIsImZsb3dTdGF0ZSIsImZsb3dNb2RlbCIsInNlbGVjdGVkTW9kZWxJdGVtcyIsImdldFNlbGVjdGVkSXRlbXMiLCJpdGVtcyIsImN0IiwiaWdub3JlU3RhdGUiLCJvbGRTdGF0ZSIsIm5ld1N0YXRlIiwib2JqZWN0RGF0YUFycmF5IiwibG9hZGluZ1N0YXRlIiwic2F2aW5nIiwic3RyaW5naWZ5Iiwic2V0Q29tcG9uZW50IiwidG9JU09TdHJpbmciLCJjb2xsYWJvcmF0aW9uIiwiaXNJbml0aWFsaXplZCIsImV2ZW50SGFuZGxlZCIsImEiLCJ2YWx1ZXMiLCJ1cGRhdGVGaWVsZHMiLCJtZXNzYWdlIiwib3V0Y29tZU5hbWUiLCJtb3ZpbmciLCJpRmxvd091dGNvbWUiLCJjb21wb25lbnQiLCJvbk91dGNvbWUiLCJtb3ZlVG8iLCJmbG93RWxlbWVudElkIiwiaW5mbyIsInJlc3AiLCJzdGF0ZUlkIiwiZ2V0U3RhdGUiLCJjdXJyZW50TWFwRWxlbWVudElkIiwicGFnZVJlcXVlc3QiLCJwYWdlQ29tcG9uZW50SW5wdXRSZXNwb25zZXMiLCJwYWdlQ29tcG9uZW50SWQiLCJzZWxlY3RlZE1hcEVsZW1lbnRJZCIsInN0YXRlVG9rZW4iLCJ0b2tlbiIsImVuZ2luZSIsInJlbmRlciIsIm5vdyIsIkRhdGUiLCJ0aW1lc3RhbXAiLCJnZXRIb3VycyIsInNsaWNlIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJqb2luIiwibGF1bmNoRmxvd1NpbGVudCIsInRlbmFudCIsImZsb3dJZCIsInBsYXllciIsImlucHV0cyIsImxhdW5jaEZsb3dUYWIiLCJjb21wb25lbnREaWRVcGRhdGUiLCJhY3Rpb24iLCJ0b1VwcGVyQ2FzZSIsImZpZWxkTmFtZSIsIm1zZyIsImhhbmRsZU1lc3NhZ2UiLCJDb21wb25lbnQiLCJlU29ydE9yZGVyIiwiYXJyYXkiLCJJdGVtcyIsIml0ZW0iLCJzb3J0IiwiYXNjZW5kaW5nIiwidmFsQSIsInZhbEIiLCJDb250ZW50TnVtYmVyIiwicGFyc2VGbG9hdCIsIkNvbnRlbnREYXRlVGltZSIsImNsZWFySXRlbXMiLCJvYmoiLCJnZXRJdGVtV2l0aFByb3BlcnR5TmFtZSIsImZpbmRQcm9wZXJ0eSIsIndpdGhWYWx1ZSIsInJldHVyblByb3BlcnR5IiwiY29tcGFyZVRvIiwiQ29udGVudFN0cmluZyIsIkNvbnRlbnRCb29sZWFuIiwiU3RyaW5nIiwiZ2V0SXRlbVdpdGhQcm9wZXJ0eVZhbHVlIiwiZ2V0SW5kZXhPZkl0ZW1XaXRoUHJvcGVydHlWYWx1ZSIsInJlbW92ZUl0ZW1XaXRoUHJvcGVydHlWYWx1ZSIsIm1vZGlmaWVkQ291bnQiLCJzcGxpY2UiLCJyZW1vdmVJdGVtQXRJbmRleCIsImluZGV4IiwiX19jcmVhdGVCaW5kaW5nIiwiayIsImsyIiwiX19leHBvcnRTdGFyIiwiTmFtZSIsIkRyYWdFdmVudCIsImVEcmFnRXZlbnRUeXBlIiwibW9kYWxEaWFsb2dCdXR0b24iLCJoYW5kbGVyIiwidHlwZSIsInNvdXJjZUVsZW1lbnQiLCJ0YXJnZXRFbGVtZW50IiwibW91c2VYIiwibW91c2VZIiwibW91c2VPZmZzZXRYIiwibW91c2VPZmZzZXRZIiwic3RhcnQiLCJldnQiLCJkcmFnIiwiZW5kIiwidGFyZ2V0IiwiZUNvbHVtbkNvbXBhcmF0b3IiLCJjb21wYXJhdG9yIiwiaW4iLCJub3RJbiIsInZhbHMiLCJNYXAiLCJnZXRGb3JTdG9yYWdlIiwiY29sdW1uIiwiQ29sdW1uIiwiQ29tcG9uZW50VHlwZSIsImNvbXBvbmVudFR5cGUiLCJDb250ZW50Rm9ybWF0IiwiY29udGVudEZvcm1hdCIsIkRpc3BsYXlPcmRlciIsIkxhYmVsIiwiUmVhZE9ubHkiLCJUeXBlRWxlbWVtdFByb3BlcnR5VG9EaXNwbGF5SWQiLCJ0eXBlRWxlbWVtdFByb3BlcnR5VG9EaXNwbGF5SWQiLCJWaXNpYmxlIiwiaXNEaXNwbGF5VmFsdWUiLCJpRmxvd0Rpc3BsYXlDb2x1bW4iLCJjdiIsIm9iamQiLCJpc05hTiIsImR0IiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJlUGFnZUFjdGlvblR5cGUiLCJlUGFnZUFjdGlvbkJpbmRpbmdUeXBlIiwiSWQiLCJJc0J1bGtBY3Rpb24iLCJpc0J1bGtBY3Rpb24iLCJJc091dCIsImlzT3V0IiwiUGFnZUFjdGlvbkJpbmRpbmdUeXBlIiwicGFnZUFjdGlvbkJpbmRpbmdUeXBlIiwiUGFnZUFjdGlvblR5cGUiLCJwYWdlQWN0aW9uVHlwZSIsIlBhZ2VPYmplY3RCaW5kaW5nSWQiLCJwYWdlT2JqZWN0QmluZGluZ0lkIiwiT3V0Y29tZSIsIkZsb3dDb250ZXh0TWVudSIsImRpc3BsYXlTdHlsZSIsIm1lbnVJdGVtcyIsInNob3dDb250ZXh0TWVudSIsImhpZGVDb250ZXh0TWVudSIsInBvc2l0aW9uQ29udGV4dE1lbnUiLCJzZXRNZW51IiwibWVudSIsImlubmVyV2lkdGgiLCJsZWZ0IiwicmlnaHQiLCJpbm5lckhlaWdodCIsInRvcCIsImJvdHRvbSIsImRpc3BsYXkiLCJtZW51SXRlbUFycmF5XzEiLCJmb3JjZVVwZGF0ZSIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJvbk1vdXNlTGVhdmUiLCJzdHlsZSIsInJlZiIsImVsZW1lbnQiLCJkZWZhdWx0IiwiZUZpbHRlckV2ZW50IiwiZVNvcnREaXJlY3Rpb24iLCJwYXJlbnQiLCJub3RpZnkiLCJnZXRTb3J0SWNvbiIsImdldEZpbHRlckljb24iLCJzb3J0Q2xpY2tlZCIsImZpbHRlckNsaWNrZWQiLCJzYXZlRmlsdGVyIiwiY2FuY2VsRmlsdGVyIiwibWF0Y2hlc0NyaXRlcmlhIiwic2V0RGlhbG9nIiwiZGlhbG9nIiwiZXZlbnQiLCJmaWx0ZXJzQ2hhbmdlZCIsImhhcyIsInNvcnROb25lIiwic29ydFRvZ2dsZSIsInJvb3QiLCJjb2xNYXAiLCJtZXNzYWdlQm94Iiwic2hvd01lc3NhZ2VCb3giLCJmaWx0ZXIiLCJmaWx0ZXJDbGVhciIsImNsZWFyRmlsdGVycyIsImNyaXRlcmlhIiwibmV3Q3JpdGVyaWEiLCJoaWRlTWVzc2FnZUJveCIsIm9uQ2xpY2siLCJ0aXRsZSIsIm5vbmUiLCJkZXNjZW5kaW5nIiwiRnJhZ21lbnQiLCJzb3VyY2UiLCJtYXRjaGVzIiwib2JqRGF0YSIsImNyaXQiLCJlcXVhbFRvIiwibm90RXF1YWxUbyIsImNvbnRhaW5zIiwiaW5kZXhPZiIsIm5vdENvbnRhaW5zIiwiZ2V0U29ydENvbHVtbiIsInNvcnRDb2x1bW4iLCJjYW5kaWRhdGVzIiwiZnJvbSIsInNvcnRlZCIsIkludGwiLCJDb2xsYXRvciIsIm51bWVyaWMiLCJzZW5zaXRpdml0eSIsImNvbXBhcmUiLCJyZXZlcnNlIiwiZmlsdGVycyIsImxvYWRGcm9tU3RvcmFnZSIsInNyYyIsInZlcnNpb24iLCJyb3dNYXAiLCJjdXJyZW50Um93TWFwIiwibWF4UGFnZVJvd3MiLCJjdXJyZW50Um93UGFnZXMiLCJjdXJyZW50Um93UGFnZSIsInNlbGVjdGVkUm93TWFwIiwicm93cyIsImNvbFZhbE1hcCIsImxhc3RDb250ZW50IiwiZmxvd01vdmVkIiwiYnVpbGRDb3JlVGFibGUiLCJidWlsZFJpYmJvbiIsImJ1aWxkRm9vdGVyIiwidG9nZ2xlU2VsZWN0IiwiZmlyc3RQYWdlIiwicHJldmlvdXNQYWdlIiwibmV4dFBhZ2UiLCJsYXN0UGFnZSIsIm1heFBlclBhZ2VDaGFuZ2VkIiwiZG9FeHBvcnQiLCJwYXJzZUludCIsImdldEl0ZW0iLCJzZXRJdGVtIiwidG9TdHJpbmciLCJzb3J0Um93cyIsInBhZ2luYXRlUm93cyIsImJ1aWxkVGFibGVSb3dzIiwiZmlsdGVyUm93cyIsIm1heCIsInNldFJvdyIsImRlbGV0ZSIsInNldFJpYmJvbiIsInJpYmJvbiIsInNldEhlYWRlcnMiLCJzZXRGb290ZXIiLCJmb290ZXIiLCJtZSIsInNldFRpbWVvdXQiLCJyaWJib25FbGVtZW50IiwiaGVhZGVyc0VsZW1lbnQiLCJmb290ZXJFbGVtZW50Iiwibm9kZSIsImN1cnJlbnRQYWdlIiwidG9nZ2xlU2VsZWN0QWxsIiwiY2hlY2tlZCIsImNsZWFyIiwicm93Iiwic2F2ZVNlbGVjdGVkIiwic2VsZWN0ZWRJdGVtcyIsInRJdGVtIiwibG9hZFNlbGVjdGVkIiwicm93RWxlbWVudHMiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImxpc3RJdGVtcyIsImNvbnRleHRNZW51IiwiY21DbGljayIsImNsaWVudFgiLCJjbGllbnRZIiwiZG9PdXRjb21lIiwiZ2V0VGV4dFZhbHVlIiwic2VsZWN0ZWRJdGVtIiwibWF0Y2giLCJSZWdFeHAiLCJleGVjIiwiaGFuZGxlRXZlbnQiLCJvcGRhdGEiLCJleHBvcnQiLCJjbGFzc2VzIiwib25Db250ZXh0TWVudSIsIkZsb3dNZXNzYWdlQm94IiwiRmxvd0NvbXBvbmVudCIsInJlZ2lzdGVyIiwiU2VhcmNoRmlsdGVyVGFibGUiLCJiZWZvcmVTZW5kTGlzdGVuZXJzIiwiZG9uZUxpc3RlbmVycyIsImZhaWxMaXN0ZW5lcnMiLCJoaXN0b3J5IiwiYmVmb3JlU2VuZCIsImZhaWwiLCJhZGRGYWlsTGlzdGVuZXIiLCJyZW1vdmVGYWlsTGlzdGVuZXIiLCJpbml0aWFsaXplIiwiaW52b2tlIiwicmVUcmltIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzT2N0YWwiLCJmcmVlUGFyc2VJbnQiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJzZWxmIiwiRnVuY3Rpb24iLCJvYmplY3RUb1N0cmluZyIsIm5hdGl2ZU1heCIsIk1hdGgiLCJuYXRpdmVNaW4iLCJtaW4iLCJkZWJvdW5jZSIsImZ1bmMiLCJ3YWl0Iiwib3B0aW9ucyIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsInRyYWlsaW5nIiwiaW52b2tlRnVuYyIsInRpbWUiLCJhcmdzIiwibGVhZGluZ0VkZ2UiLCJ0aW1lckV4cGlyZWQiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRyYWlsaW5nRWRnZSIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiYXJndW1lbnRzIiwidG9OdW1iZXIiLCJpc09iamVjdCIsImNhbmNlbCIsImNsZWFyVGltZW91dCIsImZsdXNoIiwiaXNPYmplY3RMaWtlIiwiaXNTeW1ib2wiLCJvdGhlciIsInZhbHVlT2YiLCJpc0JpbmFyeSIsInRlc3QiLCJGbG93UGFnZSIsIkZsb3dEaWFsb2dCb3giLCJDb21tb25fMSIsImRyYWdFdmVudCIsImRpYWxvZ1Zpc2libGUiLCJkaWFsb2dUaXRsZSIsImRpYWxvZ0J1dHRvbnMiLCJkaWFsb2dPbkNsb3NlIiwiaGlkZURpYWxvZyIsImhhbmRsZUtleVVwIiwiaGFuZGxlT3V0c2lkZUNsaWNrIiwic2hvd0RpYWxvZyIsInBhcmVudFhDZW50ZXIiLCJvZmZzZXRQYXJlbnQiLCJjbGllbnRXaWR0aCIsInBhcmVudFlDZW50ZXIiLCJjbGllbnRIZWlnaHQiLCJkaWFsb2dYT2Zmc2V0IiwiZGlhbG9nWU9mZnNldCIsImNsYXNzTGlzdCIsImFkZCIsInBvc2l0aW9uRGlhbG9nIiwic3RvcEV2ZW50QnViYmxlIiwiY2FuY2VsQnViYmxlIiwicmV0dXJuVmFsdWUiLCJidXR0b25zIiwib25DbG9zZSIsImRpYWxvZ0NvbnRlbnQiLCIyNyIsImtleUNvZGUiLCJfbG9vcF8xIiwiYnV0dG9uIiwib25Nb3VzZURvd24iLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VVcCIsImZsZXhEaXJlY3Rpb24iLCJmbGV4R3JvdyIsIm1hcmdpbkxlZnQiLCJjdXJzb3IiLCJjb2xvciIsIm1hcmdpblJpZ2h0IiwiZm9udFNpemUiLCJjaGlsZHJlbiIsIm1vdmVNZSIsImNsaWVudFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJtc2dib3hWaXNpYmxlIiwibXNnYm94VGl0bGUiLCJtc2dib3hCdXR0b25zIiwibXNnYm94T25DbG9zZSIsIm1zZ2JveENvbnRlbnQiLCJJY29uUGlja2VyIiwiaWNvbnMiLCJvbkNoYW5nZVZhbHVlIiwib25jaGFuZ2UiLCJhZGRJY29uIiwiYWRkSWNvbnMiLCJpbm5lclRleHQiLCJvbkNoYW5nZSIsIm9wdCIsImNsc18xIiwicm9sZSIsIkZsb3dDaGFydCIsIkZsb3dDaGFydENvbHVtbkRlZmluaXRpb24iLCJlRmxvd0NoYXJ0VHlwZSIsIkZsb3dCYXNlQ29tcG9uZW50XzEiLCJhcGlLZXkiLCJiZWdpbkNoYXJ0c0FwaSIsImFwaUxvYWRlZCIsImRyYXdDaGFydCIsImdvb2dsZSIsImNoYXJ0cyIsIkcxM0NoYXJ0TG9hZGluZyIsInNjcmlwdCIsImRvY3VtZW50IiwiYXBwZW5kQ2hpbGQiLCJ2aXN1YWxpemF0aW9uIiwiR2VvQ2hhcnQiLCJsb2FkIiwicGFja2FnZXMiLCJtYXBzQXBpS2V5Iiwic2V0T25Mb2FkQ2FsbGJhY2siLCJidWlsZERhdGEiLCJkYXRhVGFibGUiLCJwcm9wZXJ0eU5hbWVzIiwicHJvcCIsImNvbHVtbk5hbWVzIiwiY2hhcnREYXRhIiwiYXJyYXlUb0RhdGFUYWJsZSIsImNoYXJ0IiwiY2hhcnRUeXBlIiwiQmFyQ2hhcnQiLCJnZXRFbGVtZW50QnlJZCIsIkNvbHVtbkNoYXJ0IiwiUGllQ2hhcnQiLCJEb251dENoYXJ0IiwiZHJhdyIsIm9yaWdpbmFsVmFsdWUiLCJuZXdWYWx1ZSIsImljb24iLCJzb3J0SWNvbiIsImZpbHRlckljb24iLCJzb3J0QXNjZW5kaW5nIiwic29ydERlc2NlbmRpbmciLCJhZGRDcml0ZXJpYSIsImdldE9wdGlvbnMiLCJnZXRDb2x1bW5VbmlxdWVzIiwiYWxsSXRlbXMiLCJwcmVwQ3JpdGVyaWFWYWx1ZSIsImNyaXRCb3giLCJzZWxlY3RlZEluZGV4IiwiZXhwYW5kZWQiLCJzaG93Q2hlY2tib3hlcyIsImNoZWNrYm94ZXMiLCJjaGVja0JveGVzIiwiY29sbGF0b3IiLCJtYXhQZXJQYWdlIiwicHJldlBhZ2UiLCJzdW1tYXJ5IiwicGFnIiwib3B0cyIsInBlclBhZ2UiLCJmaWxlTmFtZSIsImJ1aWxkSGVhZGVycyIsImJ1aWxkUm93IiwiYmxvYiIsIkJsb2IiLCJuYXZpZ2F0b3IiLCJtc1NhdmVCbG9iIiwibGluayIsImRvd25sb2FkIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwic2V0QXR0cmlidXRlIiwidmlzaWJpbGl0eSIsImNsaWNrIiwicmVtb3ZlQ2hpbGQiLCJsZWZ0QnV0dG9ucyIsInJpZ2h0QnV0dG9ucyIsImNhbkV4cG9ydCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMs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K0JBQ0tBLFVBQVUsNEJBRVYsZ0NBQ0lBLFVBQVUsc0JBTWxCLCtCQUNJQSxVQUFVLCtCQUVUK1UsTUFNekIsRUFwTEEsQ0FBcUQsVUFBTTViLFciLCJmaWxlIjoic2Z0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE0KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93RmllbGQgPSBleHBvcnRzLmVDb250ZW50VHlwZSA9IHZvaWQgMDtcclxudmFyIEZsb3dPYmplY3REYXRhXzEgPSByZXF1aXJlKFwiLi9GbG93T2JqZWN0RGF0YVwiKTtcclxudmFyIEZsb3dPYmplY3REYXRhQXJyYXlfMSA9IHJlcXVpcmUoXCIuL0Zsb3dPYmplY3REYXRhQXJyYXlcIik7XHJcbnZhciBlQ29udGVudFR5cGU7XHJcbihmdW5jdGlvbiAoZUNvbnRlbnRUeXBlKSB7XHJcbiAgICBlQ29udGVudFR5cGVbZUNvbnRlbnRUeXBlW1widW5rbm93blwiXSA9IDBdID0gXCJ1bmtub3duXCI7XHJcbiAgICBlQ29udGVudFR5cGVbZUNvbnRlbnRUeXBlW1wiQ29udGVudFN0cmluZ1wiXSA9IDFdID0gXCJDb250ZW50U3RyaW5nXCI7XHJcbiAgICBlQ29udGVudFR5cGVbZUNvbnRlbnRUeXBlW1wiQ29udGVudE51bWJlclwiXSA9IDJdID0gXCJDb250ZW50TnVtYmVyXCI7XHJcbiAgICBlQ29udGVudFR5cGVbZUNvbnRlbnRUeXBlW1wiQ29udGVudE9iamVjdFwiXSA9IDNdID0gXCJDb250ZW50T2JqZWN0XCI7XHJcbiAgICBlQ29udGVudFR5cGVbZUNvbnRlbnRUeXBlW1wiQ29udGVudEJvb2xlYW5cIl0gPSA0XSA9IFwiQ29udGVudEJvb2xlYW5cIjtcclxuICAgIGVDb250ZW50VHlwZVtlQ29udGVudFR5cGVbXCJDb250ZW50TGlzdFwiXSA9IDVdID0gXCJDb250ZW50TGlzdFwiO1xyXG4gICAgZUNvbnRlbnRUeXBlW2VDb250ZW50VHlwZVtcIkNvbnRlbnRQYXNzd29yZFwiXSA9IDZdID0gXCJDb250ZW50UGFzc3dvcmRcIjtcclxuICAgIGVDb250ZW50VHlwZVtlQ29udGVudFR5cGVbXCJDb250ZW50Q29udGVudFwiXSA9IDddID0gXCJDb250ZW50Q29udGVudFwiO1xyXG4gICAgZUNvbnRlbnRUeXBlW2VDb250ZW50VHlwZVtcIkNvbnRlbnREYXRlVGltZVwiXSA9IDhdID0gXCJDb250ZW50RGF0ZVRpbWVcIjtcclxuICAgIGVDb250ZW50VHlwZVtlQ29udGVudFR5cGVbXCJDb250ZW50RW5jcnlwdGVkXCJdID0gOV0gPSBcIkNvbnRlbnRFbmNyeXB0ZWRcIjtcclxufSkoZUNvbnRlbnRUeXBlID0gZXhwb3J0cy5lQ29udGVudFR5cGUgfHwgKGV4cG9ydHMuZUNvbnRlbnRUeXBlID0ge30pKTtcclxudmFyIEZsb3dGaWVsZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZsb3dGaWVsZChmaWVsZCkge1xyXG4gICAgICAgIHRoaXMuQ29udGVudFR5cGUgPSBlQ29udGVudFR5cGUudW5rbm93bjtcclxuICAgICAgICB0aGlzLkRldmVsb3Blck5hbWUgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuVHlwZUVsZW1lbnREZXZlbG9wZXJOYW1lID0gXCJcIjtcclxuICAgICAgICB0aGlzLlR5cGVFbGVtZW50SWQgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWUgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkID0gXCJcIjtcclxuICAgICAgICB0aGlzLlZhbHVlRWxlbWVudElkID0gXCJcIjtcclxuICAgICAgICBpZiAoZmllbGQpIHtcclxuICAgICAgICAgICAgdGhpcy5Db250ZW50VHlwZSA9IGVDb250ZW50VHlwZVtmaWVsZC5jb250ZW50VHlwZV07XHJcbiAgICAgICAgICAgIHRoaXMuRGV2ZWxvcGVyTmFtZSA9IGZpZWxkLmRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnREZXZlbG9wZXJOYW1lID0gZmllbGQudHlwZUVsZW1lbnREZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgICAgICB0aGlzLlR5cGVFbGVtZW50SWQgPSBmaWVsZC50eXBlRWxlbWVudElkO1xyXG4gICAgICAgICAgICB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlEZXZlbG9wZXJOYW1lID0gZmllbGQudHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkID0gZmllbGQudHlwZUVsZW1lbnRQcm9wZXJ0eUlkO1xyXG4gICAgICAgICAgICB0aGlzLlZhbHVlRWxlbWVudElkID0gZmllbGQudmFsdWVFbGVtZW50SWQ7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5Db250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudE9iamVjdDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlZhbHVlID0gZmllbGQub2JqZWN0RGF0YSA/IG5ldyBGbG93T2JqZWN0RGF0YV8xLkZsb3dPYmplY3REYXRhKGZpZWxkLm9iamVjdERhdGEpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudExpc3Q6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5WYWx1ZSA9IGZpZWxkLm9iamVjdERhdGEgJiYgZmllbGQub2JqZWN0RGF0YVswXSA/IG5ldyBGbG93T2JqZWN0RGF0YUFycmF5XzEuRmxvd09iamVjdERhdGFBcnJheShmaWVsZC5vYmplY3REYXRhKSA6IG5ldyBGbG93T2JqZWN0RGF0YUFycmF5XzEuRmxvd09iamVjdERhdGFBcnJheShbXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuVmFsdWUgPSBmaWVsZC5jb250ZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0ZpZWxkLnByb3RvdHlwZSwgXCJjb250ZW50VHlwZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkNvbnRlbnRUeXBlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RmllbGQucHJvdG90eXBlLCBcImRldmVsb3Blck5hbWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5EZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RmllbGQucHJvdG90eXBlLCBcInR5cGVFbGVtZW50RGV2ZWxvcGVyTmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlR5cGVFbGVtZW50RGV2ZWxvcGVyTmFtZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0ZpZWxkLnByb3RvdHlwZSwgXCJ0eXBlRWxlbWVudElkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVHlwZUVsZW1lbnRJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0ZpZWxkLnByb3RvdHlwZSwgXCJ0eXBlRWxlbWVudFByb3BlcnR5RGV2ZWxvcGVyTmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlEZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RmllbGQucHJvdG90eXBlLCBcInR5cGVFbGVtZW50UHJvcGVydHlJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0ZpZWxkLnByb3RvdHlwZSwgXCJ2YWx1ZUVsZW1lbnRJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlZhbHVlRWxlbWVudElkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RmllbGQucHJvdG90eXBlLCBcInZhbHVlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVmFsdWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLlZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRmxvd0ZpZWxkLnByb3RvdHlwZS5pRmxvd0ZpZWxkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjb250ZW50VmFsdWUgPSBcIlwiO1xyXG4gICAgICAgIHZhciBvYmplY3REYXRhID0gW107XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLkNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnRPYmplY3Q6XHJcbiAgICAgICAgICAgICAgICB2YXIgb2QgPSB0aGlzLlZhbHVlO1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0RGF0YS5wdXNoKG9kLmlPYmplY3REYXRhKCkpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnRMaXN0OlxyXG4gICAgICAgICAgICAgICAgdmFyIG9kYSA9IHRoaXMuVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBvYmplY3REYXRhID0gb2RhLmlGbG93T2JqZWN0RGF0YUFycmF5KCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRWYWx1ZSA9IHRoaXMuVmFsdWUgPyB0aGlzLlZhbHVlIDogXCJcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb3V0cHV0ID0ge1xyXG4gICAgICAgICAgICBjb250ZW50VHlwZTogZUNvbnRlbnRUeXBlW3RoaXMuQ29udGVudFR5cGVdLFxyXG4gICAgICAgICAgICBjb250ZW50VmFsdWU6IGNvbnRlbnRWYWx1ZSxcclxuICAgICAgICAgICAgZGV2ZWxvcGVyTmFtZTogdGhpcy5EZXZlbG9wZXJOYW1lLFxyXG4gICAgICAgICAgICBvYmplY3REYXRhOiBvYmplY3REYXRhLFxyXG4gICAgICAgICAgICB0eXBlRWxlbWVudERldmVsb3Blck5hbWU6IHRoaXMuVHlwZUVsZW1lbnREZXZlbG9wZXJOYW1lLFxyXG4gICAgICAgICAgICB0eXBlRWxlbWVudElkOiB0aGlzLlR5cGVFbGVtZW50SWQsXHJcbiAgICAgICAgICAgIHR5cGVFbGVtZW50UHJvcGVydHlEZXZlbG9wZXJOYW1lOiB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlEZXZlbG9wZXJOYW1lLFxyXG4gICAgICAgICAgICB0eXBlRWxlbWVudFByb3BlcnR5SWQ6IHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkLFxyXG4gICAgICAgICAgICB2YWx1ZUVsZW1lbnRJZDogdGhpcy5WYWx1ZUVsZW1lbnRJZCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZsb3dGaWVsZDtcclxufSgpKTtcclxuZXhwb3J0cy5GbG93RmllbGQgPSBGbG93RmllbGQ7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuRmxvd09iamVjdERhdGEgPSB2b2lkIDA7XHJcbnZhciBGbG93T2JqZWN0RGF0YVByb3BlcnR5XzEgPSByZXF1aXJlKFwiLi9GbG93T2JqZWN0RGF0YVByb3BlcnR5XCIpO1xyXG52YXIgRmxvd09iamVjdERhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGbG93T2JqZWN0RGF0YShkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5EZXZlbG9wZXJOYW1lID0gXCJcIjtcclxuICAgICAgICB0aGlzLkV4dGVybmFsSWQgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuSW50ZXJuYWxJZCA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5Jc1NlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5PcmRlciA9IDA7XHJcbiAgICAgICAgdGhpcy5UeXBlRWxlbWVudElkID0gXCJcIjtcclxuICAgICAgICB0aGlzLlByb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhWzBdKSB7XHJcbiAgICAgICAgICAgIHZhciBvYmplY3REYXRhID0gZGF0YVswXTtcclxuICAgICAgICAgICAgdGhpcy5EZXZlbG9wZXJOYW1lID0gb2JqZWN0RGF0YS5kZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgICAgICB0aGlzLkludGVybmFsSWQgPSBvYmplY3REYXRhLmludGVybmFsSWQ7XHJcbiAgICAgICAgICAgIHRoaXMuRXh0ZXJuYWxJZCA9IG9iamVjdERhdGEuZXh0ZXJuYWxJZDtcclxuICAgICAgICAgICAgdGhpcy5PcmRlciA9IG9iamVjdERhdGEub3JkZXI7XHJcbiAgICAgICAgICAgIHRoaXMuSXNTZWxlY3RlZCA9IG9iamVjdERhdGEuaXNTZWxlY3RlZDtcclxuICAgICAgICAgICAgdGhpcy5UeXBlRWxlbWVudElkID0gb2JqZWN0RGF0YS50eXBlRWxlbWVudElkO1xyXG4gICAgICAgICAgICBpZiAob2JqZWN0RGF0YS5wcm9wZXJ0aWVzICYmIG9iamVjdERhdGEucHJvcGVydGllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gb2JqZWN0RGF0YS5wcm9wZXJ0aWVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlByb3BlcnRpZXNbcHJvcGVydHkuZGV2ZWxvcGVyTmFtZV0gPSBuZXcgRmxvd09iamVjdERhdGFQcm9wZXJ0eV8xLkZsb3dPYmplY3REYXRhUHJvcGVydHkocHJvcGVydHkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm51bGwgZGF0YVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd09iamVjdERhdGEucHJvdG90eXBlLCBcImRldmVsb3Blck5hbWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5EZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGV2ZWxvcGVyTmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLkRldmVsb3Blck5hbWUgPSBkZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUsIFwiZXh0ZXJuYWxJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkV4dGVybmFsSWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChleHRlcm5hbElkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuRXh0ZXJuYWxJZCA9IGV4dGVybmFsSWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPYmplY3REYXRhLnByb3RvdHlwZSwgXCJpbnRlcm5hbElkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuSW50ZXJuYWxJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGludGVybmFsSWQpIHtcclxuICAgICAgICAgICAgdGhpcy5JbnRlcm5hbElkID0gaW50ZXJuYWxJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd09iamVjdERhdGEucHJvdG90eXBlLCBcImlzU2VsZWN0ZWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Jc1NlbGVjdGVkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoaXNTZWxlY3RlZCkge1xyXG4gICAgICAgICAgICB0aGlzLklzU2VsZWN0ZWQgPSBpc1NlbGVjdGVkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUsIFwib3JkZXJcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5PcmRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG9yZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuT3JkZXIgPSBvcmRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd09iamVjdERhdGEucHJvdG90eXBlLCBcInR5cGVFbGVtZW50SWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5UeXBlRWxlbWVudElkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodHlwZUVsZW1lbnRJZCkge1xyXG4gICAgICAgICAgICB0aGlzLlR5cGVFbGVtZW50SWQgPSB0eXBlRWxlbWVudElkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUsIFwicHJvcGVydGllc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlByb3BlcnRpZXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRmxvd09iamVjdERhdGEubmV3SW5zdGFuY2UgPSBmdW5jdGlvbiAoZGV2ZWxvcGVyTmFtZSkge1xyXG4gICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICBkZXZlbG9wZXJOYW1lOiBkZXZlbG9wZXJOYW1lLFxyXG4gICAgICAgICAgICBleHRlcm5hbElkOiBcIlwiLFxyXG4gICAgICAgICAgICBpbnRlcm5hbElkOiBtYW55d2hvLnV0aWxzLmd1aWQoKSxcclxuICAgICAgICAgICAgaXNTZWxlY3RlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIG9yZGVyOiAwLFxyXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXSxcclxuICAgICAgICAgICAgdHlwZUVsZW1lbnRJZDogXCJcIlxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKFtkYXRhXSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGEucHJvdG90eXBlLmFkZFByb3BlcnR5ID0gZnVuY3Rpb24gKG5ld1Byb3BlcnR5KSB7XHJcbiAgICAgICAgdGhpcy5Qcm9wZXJ0aWVzW25ld1Byb3BlcnR5LmRldmVsb3Blck5hbWVdID0gbmV3UHJvcGVydHk7XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGEucHJvdG90eXBlLnJlbW92ZVByb3BlcnR5ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLlByb3BlcnRpZXNba2V5XTtcclxuICAgIH07XHJcbiAgICBGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAobmV3VHlwZU5hbWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjbG9uZSA9IEZsb3dPYmplY3REYXRhLm5ld0luc3RhbmNlKG5ld1R5cGVOYW1lIHx8IHRoaXMuRGV2ZWxvcGVyTmFtZSk7XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5wcm9wZXJ0aWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIG5ld1Byb3AgPSBfdGhpcy5wcm9wZXJ0aWVzW2tleV0uY2xvbmUoKTtcclxuICAgICAgICAgICAgY2xvbmUucHJvcGVydGllc1trZXldID0gbmV3UHJvcDtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGEucHJvdG90eXBlLmlPYmplY3REYXRhID0gZnVuY3Rpb24gKHNlbGVjdGVkKSB7XHJcbiAgICAgICAgdmFyIHByb3BzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKHRoaXMucHJvcGVydGllcyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBrZXkgPSBfYVtfaV07XHJcbiAgICAgICAgICAgIHByb3BzLnB1c2godGhpcy5wcm9wZXJ0aWVzW2tleV0uaUZsb3dPYmplY3REYXRhUHJvcGVydHkoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvYmplY3REYXRhID0ge1xyXG4gICAgICAgICAgICBkZXZlbG9wZXJOYW1lOiB0aGlzLmRldmVsb3Blck5hbWUsXHJcbiAgICAgICAgICAgIGV4dGVybmFsSWQ6IHRoaXMuZXh0ZXJuYWxJZCxcclxuICAgICAgICAgICAgaW50ZXJuYWxJZDogdGhpcy5pbnRlcm5hbElkLFxyXG4gICAgICAgICAgICBpc1NlbGVjdGVkOiBzZWxlY3RlZCB8fCB0aGlzLmlzU2VsZWN0ZWQsXHJcbiAgICAgICAgICAgIG9yZGVyOiB0aGlzLm9yZGVyLFxyXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBwcm9wcyxcclxuICAgICAgICAgICAgdHlwZUVsZW1lbnRJZDogdGhpcy5UeXBlRWxlbWVudElkXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gb2JqZWN0RGF0YTtcclxuICAgIH07XHJcbiAgICBGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUuaUZsb3dPYmplY3REYXRhQXJyYXkgPSBmdW5jdGlvbiAoc2VsZWN0ZWQpIHtcclxuICAgICAgICB2YXIgb3V0cHV0ID0gW107XHJcbiAgICAgICAgb3V0cHV0LnB1c2godGhpcy5pT2JqZWN0RGF0YShzZWxlY3RlZCkpO1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZsb3dPYmplY3REYXRhO1xyXG59KCkpO1xyXG5leHBvcnRzLkZsb3dPYmplY3REYXRhID0gRmxvd09iamVjdERhdGE7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkZsb3dCYXNlQ29tcG9uZW50ID0gZXhwb3J0cy5lTG9hZGluZ1N0YXRlID0gdm9pZCAwO1xyXG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XHJcbnJlcXVpcmUoXCIuL0V2ZW50TWFuYWdlclwiKTtcclxudmFyIEZsb3dBdHRyaWJ1dGVfMSA9IHJlcXVpcmUoXCIuL0Zsb3dBdHRyaWJ1dGVcIik7XHJcbnZhciBGbG93RGlzcGxheUNvbHVtbl8xID0gcmVxdWlyZShcIi4vRmxvd0Rpc3BsYXlDb2x1bW5cIik7XHJcbnZhciBGbG93RmllbGRfMSA9IHJlcXVpcmUoXCIuL0Zsb3dGaWVsZFwiKTtcclxudmFyIEZsb3dPYmplY3REYXRhXzEgPSByZXF1aXJlKFwiLi9GbG93T2JqZWN0RGF0YVwiKTtcclxudmFyIEZsb3dPYmplY3REYXRhQXJyYXlfMSA9IHJlcXVpcmUoXCIuL0Zsb3dPYmplY3REYXRhQXJyYXlcIik7XHJcbnZhciBGbG93T3V0Y29tZV8xID0gcmVxdWlyZShcIi4vRmxvd091dGNvbWVcIik7XHJcbnZhciB0aHJvdHRsZSA9IHJlcXVpcmUoJ2xvZGFzaC50aHJvdHRsZScpO1xyXG52YXIgZUxvYWRpbmdTdGF0ZTtcclxuKGZ1bmN0aW9uIChlTG9hZGluZ1N0YXRlKSB7XHJcbiAgICBlTG9hZGluZ1N0YXRlW2VMb2FkaW5nU3RhdGVbXCJyZWFkeVwiXSA9IDBdID0gXCJyZWFkeVwiO1xyXG4gICAgZUxvYWRpbmdTdGF0ZVtlTG9hZGluZ1N0YXRlW1wibG9hZGluZ1wiXSA9IDFdID0gXCJsb2FkaW5nXCI7XHJcbiAgICBlTG9hZGluZ1N0YXRlW2VMb2FkaW5nU3RhdGVbXCJzYXZpbmdcIl0gPSAyXSA9IFwic2F2aW5nXCI7XHJcbiAgICBlTG9hZGluZ1N0YXRlW2VMb2FkaW5nU3RhdGVbXCJtb3ZpbmdcIl0gPSAzXSA9IFwibW92aW5nXCI7XHJcbiAgICBlTG9hZGluZ1N0YXRlW2VMb2FkaW5nU3RhdGVbXCJpbml0aXRpYWxpemluZ1wiXSA9IDRdID0gXCJpbml0aXRpYWxpemluZ1wiO1xyXG4gICAgZUxvYWRpbmdTdGF0ZVtlTG9hZGluZ1N0YXRlW1wiaW5pdGl0aWFsaXplZFwiXSA9IDVdID0gXCJpbml0aXRpYWxpemVkXCI7XHJcbiAgICBlTG9hZGluZ1N0YXRlW2VMb2FkaW5nU3RhdGVbXCJtb3VudGluZ1wiXSA9IDZdID0gXCJtb3VudGluZ1wiO1xyXG4gICAgZUxvYWRpbmdTdGF0ZVtlTG9hZGluZ1N0YXRlW1wibW91bnRlZFwiXSA9IDddID0gXCJtb3VudGVkXCI7XHJcbn0pKGVMb2FkaW5nU3RhdGUgPSBleHBvcnRzLmVMb2FkaW5nU3RhdGUgfHwgKGV4cG9ydHMuZUxvYWRpbmdTdGF0ZSA9IHt9KSk7XHJcbi8vZXhwb3J0IHR5cGUgZUxvYWRpbmdTdGF0ZSA9IFwicmVhZHlcIiB8IFwibG9hZGluZ1wiIHwgXCJzYXZpbmdcIiB8IFwibW92aW5nXCIgfCBcImluaXRpdGlhbGl6aW5nXCIgfCBcImluaXRpdGlhbGl6ZWRcIiB8IFwibW91bnRpbmdcIiB8IFwibW91bnRlZFwiO1xyXG52YXIgRmxvd0Jhc2VDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRmxvd0Jhc2VDb21wb25lbnQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBGbG93QmFzZUNvbXBvbmVudChwcm9wcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLkZpZWxkcyA9IHt9O1xyXG4gICAgICAgIF90aGlzLkF0dHJpYnV0ZXMgPSB7fTtcclxuICAgICAgICBfdGhpcy5PdXRjb21lcyA9IHt9O1xyXG4gICAgICAgIC8vc2VuZHMgYSBjb2xsYWJvcmF0aW9uIG1lc3NhZ2UgYnV0IGxpbWl0ZWQgdG8gMSBjYWxsIGV2ZXJ5IDEwMG1zXHJcbiAgICAgICAgX3RoaXMuc2VuZENvbGxhYm9yYXRpb25NZXNzYWdlID0gdGhyb3R0bGUoX3RoaXMuX3NlbmRDb2xsYWJvcmF0aW9uTWVzc2FnZSwgMTAwLCBudWxsKTtcclxuICAgICAgICBfdGhpcy5GaWVsZHMgPSB7fTtcclxuICAgICAgICBfdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLmluaXRpdGlhbGl6aW5nO1xyXG4gICAgICAgIF90aGlzLmxvYWRBbGxWYWx1ZXMgPSBfdGhpcy5sb2FkQWxsVmFsdWVzLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLmRvbnRMb2FkQWxsVmFsdWVzID0gX3RoaXMuZG9udExvYWRBbGxWYWx1ZXMuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMudXBkYXRlVmFsdWVzID0gX3RoaXMudXBkYXRlVmFsdWVzLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLnRyaWdnZXJPdXRjb21lID0gX3RoaXMudHJpZ2dlck91dGNvbWUuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuQ29tcG9uZW50SWQgPSBfdGhpcy5wcm9wcy5pZDtcclxuICAgICAgICBfdGhpcy5QYXJlbnRJZCA9IF90aGlzLnByb3BzLnBhcmVudElkO1xyXG4gICAgICAgIF90aGlzLkZsb3dLZXkgPSBfdGhpcy5wcm9wcy5mbG93S2V5O1xyXG4gICAgICAgIF90aGlzLkF0dHJpYnV0ZXMgPSB7fTtcclxuICAgICAgICBfdGhpcy5sb2FkTW9kZWwgPSBfdGhpcy5sb2FkTW9kZWwuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMubG9hZEF0dHJpYnV0ZXMgPSBfdGhpcy5sb2FkQXR0cmlidXRlcy5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5sb2FkT3V0Y29tZXMgPSBfdGhpcy5sb2FkT3V0Y29tZXMuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMucmVjZWl2ZU1lc3NhZ2UgPSBfdGhpcy5yZWNlaXZlTWVzc2FnZS5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5nZXRTdGF0ZVZhbHVlID0gX3RoaXMuZ2V0U3RhdGVWYWx1ZS5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5zZXRTdGF0ZVZhbHVlID0gX3RoaXMuc2V0U3RhdGVWYWx1ZS5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5nZXRTdGF0ZVZhbHVlVHlwZSA9IF90aGlzLmdldFN0YXRlVmFsdWVUeXBlLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLnNlbmRDb2xsYWJvcmF0aW9uTWVzc2FnZSA9IF90aGlzLnNlbmRDb2xsYWJvcmF0aW9uTWVzc2FnZS5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5vbkJlZm9yZVNlbmQgPSBfdGhpcy5vbkJlZm9yZVNlbmQuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMub25Eb25lID0gX3RoaXMub25Eb25lLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLmNhbGN1bGF0ZVZhbHVlID0gX3RoaXMuY2FsY3VsYXRlVmFsdWUuYmluZChfdGhpcyk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBfdGhpcy5yZWNlaXZlTWVzc2FnZSwgZmFsc2UpO1xyXG4gICAgICAgIF90aGlzLmxvYWRNb2RlbCgpO1xyXG4gICAgICAgIF90aGlzLmxvYWRBdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgX3RoaXMubG9hZE91dGNvbWVzKCk7XHJcbiAgICAgICAgdmFyIGJhc2VVcmwgPSBcIlwiO1xyXG4gICAgICAgIGlmICgoIW1hbnl3aG8uc2V0dGluZ3MuZ2xvYmFsKCdwbGF0Zm9ybS51cmknKSkgJiYgKG1hbnl3aG8uc2V0dGluZ3MuZ2xvYmFsKCdwbGF0Zm9ybS51cmknKS5sZW5ndGggPD0gMCkpIHtcclxuICAgICAgICAgICAgYmFzZVVybCA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gfHwgJ2h0dHBzOi8vZmxvdy5tYW55d2hvLmNvbSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF90aGlzLlN0YXRlSWQgPSBtYW55d2hvLnV0aWxzLmV4dHJhY3RTdGF0ZUlkKF90aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgIF90aGlzLlRlbmFudElkID0gbWFueXdoby51dGlscy5leHRyYWN0VGVuYW50SWQoX3RoaXMucHJvcHMuZmxvd0tleSk7XHJcbiAgICAgICAgX3RoaXMuaW52b2tldXJsID0gYmFzZVVybCArIFwiL2FwaS9ydW4vMS9zdGF0ZS9cIiArIF90aGlzLlN0YXRlSWQ7XHJcbiAgICAgICAgX3RoaXMudXJsID0gYmFzZVVybCArIFwiL2FwaS9ydW4vMS9zdGF0ZS9cIiArIF90aGlzLlN0YXRlSWQgKyBcIi92YWx1ZXNcIjtcclxuICAgICAgICBfdGhpcy51c2VydXJsID0gYmFzZVVybCArIFwiL2FwaS9ydW4vMS9zdGF0ZS9cIiArIF90aGlzLlN0YXRlSWQgKyBcIi92YWx1ZXMvMDNkYzQxZGQtMWM2Yi00YjMzLWJmNjEtY2JkMWQwNzc4ZmZmXCI7XHJcbiAgICAgICAgX3RoaXMudmFsdWV1cmwgPSBiYXNlVXJsICsgXCIvYXBpL3J1bi8xL3N0YXRlL1wiICsgX3RoaXMuU3RhdGVJZCArIFwiL3ZhbHVlcy9uYW1lXCI7XHJcbiAgICAgICAgX3RoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5pbml0aXRpYWxpemVkO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwidGVuYW50SWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5UZW5hbnRJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcInN0YXRlSWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5TdGF0ZUlkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiZmxvd0tleVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkZsb3dLZXk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJjb21wb25lbnRJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkNvbXBvbmVudElkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwicGFyZW50SWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5QYXJlbnRJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcImlzUmVhZHlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5Mb2FkaW5nU3RhdGUgPT09IGVMb2FkaW5nU3RhdGUucmVhZHkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJsb2FkaW5nU3RhdGVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Mb2FkaW5nU3RhdGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJvdXRjb21lc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLk91dGNvbWVzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0cmlidXRlc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkF0dHJpYnV0ZXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJmaWVsZHNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5GaWVsZHM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJtb2RlbFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLk1vZGVsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwidXNlclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlVzZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJqb2luVVJJXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiaXNEZXNpZ25UaW1lXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuSXNEZXNpZ25UaW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiYXV0aGVudGljYXRpb25Ub2tlblwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLmZsb3dVc2VyKS5hdXRoZW50aWNhdGlvblRva2VuO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSwgZGVmYXVsdFZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZSB8fCAnJztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLm9uQmVmb3JlU2VuZCA9IGZ1bmN0aW9uICh4aHIsIHJlcXVlc3QpIHtcclxuICAgICAgICBpZiAocmVxdWVzdCkge1xyXG4gICAgICAgICAgICB2YXIgb2MgPSB0aGlzLmdldE91dGNvbWVCeUlkKHJlcXVlc3QubWFwRWxlbWVudEludm9rZVJlcXVlc3Quc2VsZWN0ZWRPdXRjb21lSWQpO1xyXG4gICAgICAgICAgICB2YXIgb2N0ID0gbWFueXdoby5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkO1xyXG4gICAgICAgICAgICBpZiAob2MpIHtcclxuICAgICAgICAgICAgICAgIGlmICghb2N0IHx8IG9jdC5pZCAhPT0gb2MuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5vdXRjb21lQmVpbmdUcmlnZ2VyZWQgPSBvYztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbWFueXdoby5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyB0aGlzIHRha2VzIGEgc3RyaW5nIGNvbnRhaW5pbmcgZWl0aGVyIGEgbGl0ZXJhbCB2YWx1ZSBvciB0aGUgbmFtZSBvZiBhIGZpZWxkIHN1cnJvdW5kZWQgd2l0aCB7ey4ufX1cclxuICAgIC8vIGlmIGl0J3MgbGl0ZXJhbCBpdCBqdXN0IHJldHVybnMgb3RoZXJ3aXNlIGl0IGdldHMgdGhlIHZhbHVlLlxyXG4gICAgLy8gaXQgY2FuIGdvIGRvd24gbGV2ZWxzIGxpa2UgdmFsLmF0dHJpYnV0ZS5zdWJ2YWwgZXRjXHJcbiAgICAvLyBOT1RFOiB0aGVyZSdzIGEgZ29vZCBjaGFuY2UgdGltaW5nIHdpc2UgdGhhdCB0aGVyZSBhcmUgbm8gZmllbGRzIHlldFxyXG4gICAgLy8gc28gd2UganVzdCByZXR1cm4gdmFsdWUgaWYgYW55IGVycm9ycyBhcmUgZW5jb3VudGVyZWQgbGlrZSB2YWwgPT09IG51bGxcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5jYWxjdWxhdGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIC8vIGlzIGl0IHJlcGxhY2VhYmxlPyAgc3RhcnRzIGFuZCBlbmRzIHdpdGgge3t9fVxyXG4gICAgICAgIGlmICh2YWx1ZS5zdGFydHNXaXRoKCd7eycpICYmIHZhbHVlLmVuZHNXaXRoKCd9fScpKSB7XHJcbiAgICAgICAgICAgIC8vIHZhbHVlIHBvaW50cyB0byBhIGZpZWxkLCBnZXQgaXQncyB2YWx1ZVxyXG4gICAgICAgICAgICB2YXIgc3RyaXBwZWQgPSB2YWx1ZS5yZXBsYWNlKCd7eycsICcnKTtcclxuICAgICAgICAgICAgc3RyaXBwZWQgPSBzdHJpcHBlZC5yZXBsYWNlKCd9fScsICcnKTtcclxuICAgICAgICAgICAgdmFyIHZhbCA9IHZvaWQgMDtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xyXG4gICAgICAgICAgICAvLyBpdCBjb3VsZCBiZSBhIHN1YiBmaWVsZCB3aXRoIHBhcmVudC5jaGlsZFxyXG4gICAgICAgICAgICB2YXIgc3RyaXBwZWRCaXRzID0gc3RyaXBwZWQuc3BsaXQoJy4nKTtcclxuICAgICAgICAgICAgLy8gbG9vcCBvdmVyIGJpdHNcclxuICAgICAgICAgICAgZm9yICh2YXIgcG9zID0gMDsgcG9zIDwgc3RyaXBwZWRCaXRzLmxlbmd0aDsgcG9zKyspIHtcclxuICAgICAgICAgICAgICAgIC8vIHBvcyAwIHdpbGwgc2V0IHZhbCBmb3IgYW55IGNoaWxkIGVsZW1lbnRzXHJcbiAgICAgICAgICAgICAgICBpZiAocG9zID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZighdGhpcy5maWVsZHNbc3RyaXBwZWRCaXRzW3Bvc11dKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgYXdhaXQgdGhpcy5sb2FkVmFsdWUoc3RyaXBwZWRCaXRzW3Bvc10pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IHRoaXMuZmllbGRzW3N0cmlwcGVkQml0c1twb3NdXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVGhlIFZhbHVlIFsnICsgc3RyaXBwZWRCaXRzW3Bvc10gKyAnXSB3YXMgbm90IGZvdW5kLCBoYXZlIHlvdSBpbmNsdWRlZCBpdCBpbiB5b3VyIGZsb3cnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsLkNvbnRlbnRUeXBlICE9PSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudE9iamVjdCAmJiB2YWwuQ29udGVudFR5cGUgIT09IEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZGlkIGJpdHMgMCBnZXQgYSB2YWw/XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlID0gdmFsLnZhbHVlLnByb3BlcnRpZXNbc3RyaXBwZWRCaXRzW3Bvc11dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlLmNvbnRlbnRUeXBlID09PSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudE9iamVjdCB8fCBlbGUuY29udGVudFR5cGUgPT09IEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IHZhbC52YWx1ZS5wcm9wZXJ0aWVzW3N0cmlwcGVkQml0c1twb3NdXS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbC52YWx1ZS5wcm9wZXJ0aWVzW3N0cmlwcGVkQml0c1twb3NdXS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLm9uRG9uZSA9IGZ1bmN0aW9uICh4aHIsIHJlcXVlc3QpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvdXRjb21lXzE7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHhoci5pbnZva2VUeXBlID09PSAnRk9SV0FSRCcpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby5tb2RlbC5wYXJzZUVuZ2luZVJlc3BvbnNlKHhociwgdGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkTW9kZWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkQXR0cmlidXRlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRPdXRjb21lcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnByZXNlcnZlU3RhdGUoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYW55d2hvLmV2ZW50TWFuYWdlci5vdXRjb21lQmVpbmdUcmlnZ2VyZWQgJiYgbWFueXdoby5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGNvbWVfMSA9IG1hbnl3aG8uZXZlbnRNYW5hZ2VyLm91dGNvbWVCZWluZ1RyaWdnZXJlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG1hbnl3aG8uZXZlbnRNYW5hZ2VyLm91dGNvbWVCZWluZ1RyaWdnZXJlZC5hdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0ciwgdGFyZ2V0VXJsLCBfYSwgdXJsLCB3bmQsIHVybCwgd25kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIgPSBtYW55d2hvLmV2ZW50TWFuYWdlci5vdXRjb21lQmVpbmdUcmlnZ2VyZWQuYXR0cmlidXRlc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gYXR0ci5uYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXV0b2Nsb3NlXCI6IHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXV0b29wZW5cIjogcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhdXRvbmF2XCI6IHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXV0b21vdmVcIjogcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhdXRvcHJpbnRcIjogcmV0dXJuIFszIC8qYnJlYWsqLywgMTBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHIudmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0cnVlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDExXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRVcmwgPSBvdXRjb21lXzEuYXR0cmlidXRlcy5BdXRvT3BlblVybCB8fCB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGFyZ2V0VXJsICYmIHRhcmdldFVybC52YWx1ZS5sZW5ndGggPiAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jYWxjdWxhdGVWYWx1ZSh0YXJnZXRVcmwudmFsdWUpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd25kID0gd2luZG93Lm9wZW4odXJsLCBcIl9ibGFua1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIk5vICdBdXRvT3BlblVybCcgc3BlY2lmaWVkIGluIHRoZSBvdXRjb21lJ3MgYXR0cmlidXRlc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMyAvKmJyZWFrKi8sIDExXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRVcmwgPSBvdXRjb21lXzEuYXR0cmlidXRlcy5BdXRvTmF2VXJsIHx8IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0YXJnZXRVcmwgJiYgdGFyZ2V0VXJsLnZhbHVlLmxlbmd0aCA+IDApKSByZXR1cm4gWzMgLypicmVhayovLCA4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNhbGN1bGF0ZVZhbHVlKHRhcmdldFVybC52YWx1ZSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3bmQgPSB3aW5kb3cub3Blbih1cmwsIFwiX2JsYW5rXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiTm8gJ0F1dG9OYXZVcmwnIHNwZWNpZmllZCBpbiB0aGUgb3V0Y29tZSdzIGF0dHJpYnV0ZXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA5OiByZXR1cm4gWzMgLypicmVhayovLCAxMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5wcmludCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDExXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTE6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdHVybiBvZiBtb3ZpbmcgZmxhZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUucmVhZHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLm91dGNvbWVCZWluZ1RyaWdnZXJlZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUubW91bnRpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWRkIG91dGNvbWUgbWFuYWdlciBzdHVmZlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5hZGREb25lTGlzdGVuZXIodGhpcy5vbkRvbmUsIHRoaXMuY29tcG9uZW50SWQgKyBcIl9jb3JlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5hZGRCZWZvcmVTZW5kTGlzdGVuZXIodGhpcy5vbkJlZm9yZVNlbmQsIHRoaXMuY29tcG9uZW50SWQgKyBcIl9jb3JlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVzZXJ2ZSBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnByZXNlcnZlU3RhdGUoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVzZXJ2ZSBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5tb3VudGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLnV0aWxzLnJlbW92ZUxvYWRpbmdJbmRpY2F0b3IoJ2xvYWRlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUucHJlc2VydmVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5tb3VudGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zZXRTdGF0ZVZhbHVlKHRoaXMuZ2V0U3RhdGVWYWx1ZSgpKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZsb3dNb2RlbCA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KHRoaXMuQ29tcG9uZW50SWQsIHRoaXMuRmxvd0tleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZsb3dTdGF0ZSA9IG1hbnl3aG8uc3RhdGUuZ2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsIHRoaXMuZmxvd0tleSkgfHwge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGZsb3dNb2RlbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGZsb3dNb2RlbC5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NvbnRlbnRPYmplY3QnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb2JqZWN0RGF0YTogYW55O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmxvd1N0YXRlLm9iamVjdERhdGEgJiYgZmxvd1N0YXRlLm9iamVjdERhdGFbMF0gJiYgZmxvd1N0YXRlLm9iamVjdERhdGFbMF0ucHJvcGVydGllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhID0gZmxvd1N0YXRlLm9iamVjdERhdGFbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmplY3REYXRhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb2Q6IEZsb3dPYmplY3REYXRhICA9IG5ldyBGbG93T2JqZWN0RGF0YShbb2JqZWN0RGF0YV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZVZhbHVlKG9kLHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZihmbG93TW9kZWwub2JqZWN0RGF0YSAmJiBmbG93TW9kZWwub2JqZWN0RGF0YVswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgb2JqZWN0RGF0YSA9IGZsb3dNb2RlbC5vYmplY3REYXRhWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2Vsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5tb3VudGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vb2JqZWN0RGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqZWN0RGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xldCBvZDogRmxvd09iamVjdERhdGEgID0gbmV3IEZsb3dPYmplY3REYXRhKFtvYmplY3REYXRhXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYXdhaXQgdGhpcy5zZXRTdGF0ZVZhbHVlKG9kLHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NvbnRlbnRMaXN0JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpc3REYXRhOiBhbnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmbG93U3RhdGUub2JqZWN0RGF0YSAmJiBmbG93U3RhdGUub2JqZWN0RGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0RGF0YSA9IGZsb3dTdGF0ZS5vYmplY3REYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdERhdGEgPSBmbG93TW9kZWwub2JqZWN0RGF0YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3REYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShsaXN0RGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldFN0YXRlVmFsdWUobmV3IEZsb3dPYmplY3REYXRhQXJyYXkobGlzdERhdGEpLHRydWUpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZVZhbHVlKGZsb3dNb2RlbC5jb250ZW50VmFsdWUsdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5tb3VudGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLnJlbW92ZUJlZm9yZVNlbmRMaXN0ZW5lcih0aGlzLmNvbXBvbmVudElkICsgXCJfY29yZVwiKTtcclxuICAgICAgICAgICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLnJlbW92ZURvbmVMaXN0ZW5lcih0aGlzLmNvbXBvbmVudElkICsgXCJfY29yZVwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5sb2FkT3V0Y29tZSA9IGZ1bmN0aW9uIChvdXRjb21lSWQpIHtcclxuICAgICAgICBpZiAob3V0Y29tZUlkKSB7XHJcbiAgICAgICAgICAgIHZhciBvdXRjb21lID0gbWFueXdoby5tb2RlbC5nZXRPdXRjb21lKG91dGNvbWVJZCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgaWYgKG91dGNvbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuT3V0Y29tZXNbb3V0Y29tZS5kZXZlbG9wZXJOYW1lXSA9IG5ldyBGbG93T3V0Y29tZV8xLkZsb3dPdXRjb21lKG91dGNvbWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuT3V0Y29tZXNbb3V0Y29tZS5kZXZlbG9wZXJOYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUubG9hZE91dGNvbWVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuT3V0Y29tZXMgPSB7fTtcclxuICAgICAgICAvLyBhZGQgdGhlIG91dGNvbWVzIGZyb20gdGhpcyBjb21wb25lbnRcclxuICAgICAgICB2YXIgb3V0cyA9IG1hbnl3aG8ubW9kZWwuZ2V0T3V0Y29tZXModGhpcy5wcm9wcy5pZCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG91dHNfMSA9IG91dHM7IF9pIDwgb3V0c18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgb3V0Y29tZSA9IG91dHNfMVtfaV07XHJcbiAgICAgICAgICAgIHRoaXMuT3V0Y29tZXNbb3V0Y29tZS5kZXZlbG9wZXJOYW1lXSA9IG5ldyBGbG93T3V0Y29tZV8xLkZsb3dPdXRjb21lKG91dGNvbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhbmQgdGhlIG9uZXMgZnJvbSB0aGUgcGFyZW50IHBhZ2VcclxuICAgICAgICBvdXRzID0gbWFueXdoby5tb2RlbC5nZXRPdXRjb21lcygnJywgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICBmb3IgKHZhciBfYSA9IDAsIG91dHNfMiA9IG91dHM7IF9hIDwgb3V0c18yLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgICAgICB2YXIgb3V0Y29tZSA9IG91dHNfMltfYV07XHJcbiAgICAgICAgICAgIHRoaXMuT3V0Y29tZXNbb3V0Y29tZS5kZXZlbG9wZXJOYW1lXSA9IG5ldyBGbG93T3V0Y29tZV8xLkZsb3dPdXRjb21lKG91dGNvbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUuZ2V0T3V0Y29tZUJ5SWQgPSBmdW5jdGlvbiAob3V0Y29tZUlkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgb2M7XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5vdXRjb21lcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5vdXRjb21lc1trZXldLmlkID09PSBvdXRjb21lSWQpIHtcclxuICAgICAgICAgICAgICAgIG9jID0gX3RoaXMub3V0Y29tZXNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICghb2MpIHtcclxuICAgICAgICAgICAgb2MgPSB0aGlzLmxvYWRPdXRjb21lKG91dGNvbWVJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvYztcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUubG9hZEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG1vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5Db21wb25lbnRJZCwgdGhpcy5GbG93S2V5KTtcclxuICAgICAgICBpZiAobW9kZWwpIHtcclxuICAgICAgICAgICAgLy8gYWRkIHRoZSBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIHZhciBhdHRycyA9IG1vZGVsLmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgICAgIGlmIChhdHRycykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKGF0dHJzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQXR0cmlidXRlc1trZXldID0gbmV3IEZsb3dBdHRyaWJ1dGVfMS5GbG93QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmxvYWRNb2RlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLkNvbXBvbmVudElkLCB0aGlzLkZsb3dLZXkpO1xyXG4gICAgICAgIGlmIChtb2RlbCkge1xyXG4gICAgICAgICAgICB0aGlzLk1vZGVsID0ge1xyXG4gICAgICAgICAgICAgICAgY29udGVudFR5cGU6IG1vZGVsLmNvbnRlbnRUeXBlLFxyXG4gICAgICAgICAgICAgICAgY29udGVudDogbW9kZWwuY29udGVudCxcclxuICAgICAgICAgICAgICAgIGRhdGFTb3VyY2U6IG5ldyBGbG93T2JqZWN0RGF0YUFycmF5XzEuRmxvd09iamVjdERhdGFBcnJheShbXSksXHJcbiAgICAgICAgICAgICAgICBkZXZlbG9wZXJOYW1lOiBtb2RlbC5kZXZlbG9wZXJOYW1lLFxyXG4gICAgICAgICAgICAgICAgZGlzcGxheUNvbHVtbnM6IFtdLFxyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogbW9kZWwuaXNFbmFibGVkLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBtb2RlbC5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBoZWxwSW5mbzogbW9kZWwuaGVscEluZm8sXHJcbiAgICAgICAgICAgICAgICBoaW50SW5mbzogbW9kZWwuaGludFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgam9pblVyaTogdGhpcy5qb2luVVJJLFxyXG4gICAgICAgICAgICAgICAgbGFiZWw6IG1vZGVsLmxhYmVsLFxyXG4gICAgICAgICAgICAgICAgbWF4U2l6ZTogbW9kZWwubWF4U2l6ZSxcclxuICAgICAgICAgICAgICAgIG11bHRpU2VsZWN0OiBtb2RlbC5pc011bHRpU2VsZWN0LFxyXG4gICAgICAgICAgICAgICAgcmVhZE9ubHk6ICFtb2RlbC5pc0VkaXRhYmxlLFxyXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IG1vZGVsLmlzUmVxdWlyZWQsXHJcbiAgICAgICAgICAgICAgICBzaXplOiBtb2RlbC5zaXplLFxyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvbk1lc3NhZ2U6IG1vZGVsLnZhbGlkYXRpb25NZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgdmlzaWJsZTogbW9kZWwuaXNWaXNpYmxlLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IG1vZGVsLndpZHRoLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyBnZXQgdGhlIGRhdGFzb3VyY2UgdmFsdWUgbmFtZVxyXG4gICAgICAgICAgICB2YXIgZHMgPSBtb2RlbC5vYmplY3REYXRhO1xyXG4gICAgICAgICAgICBpZiAoZHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgZHNfMSA9IGRzOyBfaSA8IGRzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9kID0gZHNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Nb2RlbC5kYXRhU291cmNlLmFkZEl0ZW0obmV3IEZsb3dPYmplY3REYXRhXzEuRmxvd09iamVjdERhdGEoW29kXSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBjb2xzID0gbW9kZWwuY29sdW1ucztcclxuICAgICAgICAgICAgaWYgKGNvbHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgY29sc18xID0gY29sczsgX2EgPCBjb2xzXzEubGVuZ3RoOyBfYSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbCA9IGNvbHNfMVtfYV07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Nb2RlbC5kaXNwbGF5Q29sdW1ucy5wdXNoKG5ldyBGbG93RGlzcGxheUNvbHVtbl8xLkZsb3dEaXNwbGF5Q29sdW1uKGNvbCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5sb2FkVmFsdWUgPSBmdW5jdGlvbiAodmFsdWVOYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5sb2FkaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNhbGxSZXF1ZXN0T2xkKHRoaXMudmFsdWV1cmwgKyBcIi9cIiArIHZhbHVlTmFtZSwgJ0dFVCcsIHt9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkZpZWxkc1t2YWx1ZS5kZXZlbG9wZXJOYW1lXSA9IG5ldyBGbG93RmllbGRfMS5GbG93RmllbGQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5yZWFkeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMuRmllbGRzW3ZhbHVlLmRldmVsb3Blck5hbWVdXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmdldFJlc3VsdEJvZHlUZXh0ID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzcG9uc2UudGV4dCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0LnN0YXJ0c1dpdGgoXCJcXFwiXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5zdWJzdHIoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHQuZW5kc1dpdGgoXCJcXFwiXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5zdWJzdHIoMCwgdGV4dC5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5jYWxsUmVxdWVzdCA9IGZ1bmN0aW9uICh1cmwsIG1ldGhvZCwgZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdHMsIHJlcXVlc3Q7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Lm1ldGhvZCA9IG1ldGhvZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogdGhpcy5hdXRoZW50aWNhdGlvblRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJNYW55V2hvVGVuYW50XCI6IHRoaXMudGVuYW50SWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5jcmVkZW50aWFscyA9IFwic2FtZS1vcmlnaW5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJQT1NUXCIgfHwgbWV0aG9kID09PSBcIlBVVFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmJvZHkgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGZldGNoKHVybCwgcmVxdWVzdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIganNvbiwgZXJyb3JUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5nZXRSZXN1bHRCb2R5VGV4dChyZXNwb25zZSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24gPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5wYXJzZShqc29uKS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvYWRlZCBWYWx1ZXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdHNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmdldFJlc3VsdEJvZHlUZXh0KHJlc3BvbnNlKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JUZXh0ID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuJ3QgbG9hZCB2YWx1ZXMgLSBcIiArIGVycm9yVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdHNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5jYWxsUmVxdWVzdE9sZCA9IGZ1bmN0aW9uICh1cmwsIG1ldGhvZCwgZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG91dHB1dCwgeGhyO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBtYW55d2hvLmNvbm5lY3Rpb24ucmVxdWVzdCh0aGlzLCBudWxsLCB1cmwsIG1ldGhvZCwgdGhpcy5UZW5hbnRJZCwgdGhpcy5TdGF0ZUlkLCBtYW55d2hvLnN0YXRlLmdldEF1dGhlbnRpY2F0aW9uVG9rZW4odGhpcy5GbG93S2V5KSwgZGF0YSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgeGhyID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgeGhyXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmxvYWRBbGxWYWx1ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWVzLCB1c2VydmFsLCB1LCBwcm9wcztcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLmxvYWRpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuRmllbGRzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY2FsbFJlcXVlc3RPbGQodGhpcy51cmwsICdHRVQnLCB7fSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAodmFsdWVzIHx8IFtdKS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5GaWVsZHNbdmFsdWUuZGV2ZWxvcGVyTmFtZV0gPSBuZXcgRmxvd0ZpZWxkXzEuRmxvd0ZpZWxkKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY2FsbFJlcXVlc3RPbGQodGhpcy51c2VydXJsLCAnR0VUJywge30pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJ2YWwgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFueXdoby5jb25uZWN0aW9uLnJlcXVlc3QodGhpcywgXCJcIiwgdGhpcy51c2VydXJsICwgJ0dFVCcsIHRoaXMuVGVuYW50SWQsIHRoaXMuU3RhdGVJZCwgbWFueXdoby5zdGF0ZS5nZXRBdXRoZW50aWNhdGlvblRva2VuKHRoaXMuRmxvd0tleSksIHt9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJ2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBuZXcgRmxvd0ZpZWxkXzEuRmxvd0ZpZWxkKHVzZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMgPSB1LnZhbHVlLnByb3BlcnRpZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLlVzZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0b3J5SWQ6IHByb3BzWydEaXJlY3RvcnkgSWQnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RvcnlOYW1lOiBwcm9wc1snRGlyZWN0b3J5IE5hbWUnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogcHJvcHNbJ0VtYWlsJ10udmFsdWUgfHwgJ21hcmsnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogcHJvcHNbJ0ZpcnN0IE5hbWUnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cElkOiBwcm9wc1snUHJpbWFyeSBHcm91cCBJZCddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwTmFtZTogcHJvcHNbJ1ByaW1hcnkgR3JvdXAgTmFtZSddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBwcm9wc1snVXNlciBJRCddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlwQWRkcmVzczogcHJvcHNbJ0lQIEFkZHJlc3MnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZTogcHJvcHNbJ0xhbmd1YWdlJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWU6IHByb3BzWydMYXN0IE5hbWUnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogcHJvcHNbJ0xvY2F0aW9uJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZUlkOiBwcm9wc1snUm9sZSBJZCddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVOYW1lOiBwcm9wc1snUm9sZSBOYW1lJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBwcm9wc1snU3RhdHVzJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlck5hbWU6IHByb3BzWydVc2VybmFtZSddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUucmVhZHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5kb250TG9hZEFsbFZhbHVlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB1c2VydmFsLCB1LCBwcm9wcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLmxvYWRpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY2FsbFJlcXVlc3RPbGQodGhpcy51c2VydXJsLCAnR0VUJywge30pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJ2YWwgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFueXdoby5jb25uZWN0aW9uLnJlcXVlc3QodGhpcywgXCJcIiwgdGhpcy51c2VydXJsICwgJ0dFVCcsIHRoaXMuVGVuYW50SWQsIHRoaXMuU3RhdGVJZCwgbWFueXdoby5zdGF0ZS5nZXRBdXRoZW50aWNhdGlvblRva2VuKHRoaXMuRmxvd0tleSksIHt9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJ2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBuZXcgRmxvd0ZpZWxkXzEuRmxvd0ZpZWxkKHVzZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMgPSB1LnZhbHVlLnByb3BlcnRpZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLlVzZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0b3J5SWQ6IHByb3BzWydEaXJlY3RvcnkgSWQnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RvcnlOYW1lOiBwcm9wc1snRGlyZWN0b3J5IE5hbWUnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogcHJvcHNbJ0VtYWlsJ10udmFsdWUgfHwgJ21hcmsnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogcHJvcHNbJ0ZpcnN0IE5hbWUnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cElkOiBwcm9wc1snUHJpbWFyeSBHcm91cCBJZCddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwTmFtZTogcHJvcHNbJ1ByaW1hcnkgR3JvdXAgTmFtZSddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBwcm9wc1snVXNlciBJRCddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlwQWRkcmVzczogcHJvcHNbJ0lQIEFkZHJlc3MnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZTogcHJvcHNbJ0xhbmd1YWdlJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWU6IHByb3BzWydMYXN0IE5hbWUnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogcHJvcHNbJ0xvY2F0aW9uJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZUlkOiBwcm9wc1snUm9sZSBJZCddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVOYW1lOiBwcm9wc1snUm9sZSBOYW1lJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBwcm9wc1snU3RhdHVzJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlck5hbWU6IHByb3BzWydVc2VybmFtZSddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUucmVhZHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5nZXRTdGF0ZVZhbHVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBmbG93U3RhdGUgPSBtYW55d2hvLnN0YXRlLmdldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCB0aGlzLmZsb3dLZXkpIHx8IHt9O1xyXG4gICAgICAgIHZhciBmbG93TW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLkNvbXBvbmVudElkLCB0aGlzLkZsb3dLZXkpO1xyXG4gICAgICAgIGlmIChmbG93TW9kZWwpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChmbG93TW9kZWwuY29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0NvbnRlbnRPYmplY3QnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmbG93U3RhdGUub2JqZWN0RGF0YSAmJiBmbG93U3RhdGUub2JqZWN0RGF0YVswXSAmJiBmbG93U3RhdGUub2JqZWN0RGF0YVswXS5wcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG93T2JqZWN0RGF0YV8xLkZsb3dPYmplY3REYXRhKFtmbG93U3RhdGUub2JqZWN0RGF0YVswXV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkTW9kZWxJdGVtcyA9IHRoaXMubW9kZWwuZGF0YVNvdXJjZS5nZXRTZWxlY3RlZEl0ZW1zKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZE1vZGVsSXRlbXMuaXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkTW9kZWxJdGVtcy5pdGVtc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdDb250ZW50TGlzdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsb3dTdGF0ZS5vYmplY3REYXRhICYmIGZsb3dTdGF0ZS5vYmplY3REYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG93T2JqZWN0RGF0YUFycmF5XzEuRmxvd09iamVjdERhdGFBcnJheShmbG93U3RhdGUub2JqZWN0RGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRNb2RlbEl0ZW1zID0gdGhpcy5tb2RlbC5kYXRhU291cmNlLmdldFNlbGVjdGVkSXRlbXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkTW9kZWxJdGVtcy5pdGVtcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRNb2RlbEl0ZW1zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZsb3dTdGF0ZS5jb250ZW50VmFsdWUgPyBmbG93U3RhdGUuY29udGVudFZhbHVlIDogXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmdldFN0YXRlVmFsdWVUeXBlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBmbG93TW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLkNvbXBvbmVudElkLCB0aGlzLkZsb3dLZXkpO1xyXG4gICAgICAgIHZhciBjdCA9IGZsb3dNb2RlbC5jb250ZW50VHlwZTtcclxuICAgICAgICByZXR1cm4gRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlW2N0XTtcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUuc2V0U3RhdGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgaWdub3JlU3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvbGRTdGF0ZSwgZmxvd01vZGVsLCBmbG93U3RhdGUsIG5ld1N0YXRlLCBvYmplY3REYXRhLCBvYmplY3REYXRhQXJyYXk7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLkxvYWRpbmdTdGF0ZSA9PT0gZUxvYWRpbmdTdGF0ZS5tb3VudGluZyB8fCB0aGlzLkxvYWRpbmdTdGF0ZSA9PT0gZUxvYWRpbmdTdGF0ZS5yZWFkeSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9sZFN0YXRlID0gdGhpcy5sb2FkaW5nU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLnNhdmluZztcclxuICAgICAgICAgICAgICAgICAgICBmbG93TW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLkNvbXBvbmVudElkLCB0aGlzLkZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZsb3dTdGF0ZSA9IG1hbnl3aG8uc3RhdGUuZ2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsIHRoaXMuZmxvd0tleSkgfHwge307XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGUgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsb3dNb2RlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGZsb3dNb2RlbC5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQ29udGVudE9iamVjdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0RGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmlzU2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhID0gdmFsdWUuaUZsb3dPYmplY3REYXRhQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0RGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqZWN0RGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHsgXCJvYmplY3REYXRhXCI6IG9iamVjdERhdGEgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25ld1N0YXRlID0geyBvYmplY3REYXRhIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby5zdGF0ZS5zZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgbmV3U3RhdGUsIHRoaXMuZmxvd0tleSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdDb250ZW50TGlzdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0RGF0YUFycmF5ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0RGF0YUFycmF5ID0gdmFsdWUuaUZsb3dPYmplY3REYXRhQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0RGF0YUFycmF5ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmplY3REYXRhQXJyYXkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGUgPSB7IFwib2JqZWN0RGF0YVwiOiBvYmplY3REYXRhQXJyYXkgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCBuZXdTdGF0ZSwgdGhpcy5mbG93S2V5LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NvbnRlbnREYXRlJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHsgXCJjb250ZW50VmFsdWVcIjogdmFsdWUudG9JU09TdHJpbmcoKSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbnl3aG8uc3RhdGUuc2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsIG5ld1N0YXRlLCB0aGlzLmZsb3dLZXksIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZmxvd1N0YXRlLmNvbnRlbnRWYWx1ZSA9ICh2YWx1ZSBhcyBEYXRlKS50b0lTT1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHsgXCJjb250ZW50VmFsdWVcIjogdmFsdWUgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCBuZXdTdGF0ZSwgdGhpcy5mbG93S2V5LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2Zsb3dTdGF0ZS5jb250ZW50VmFsdWUgPSB2YWx1ZSBhcyBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBvbGRTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAvL21hbnl3aG8uY29tcG9uZW50LmhhbmRsZUV2ZW50KHRoaXMsbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5Db21wb25lbnRJZCx0aGlzLkZsb3dLZXkpLHRoaXMuRmxvd0tleSxudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2F3YWl0IG1hbnl3aG8uZW5naW5lLnN5bmModGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWFueXdoby5jb2xsYWJvcmF0aW9uLmlzSW5pdGlhbGl6ZWQodGhpcy5mbG93S2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21hbnl3aG8uY29sbGFib3JhdGlvbi5zeW5jKHRoaXMuZmxvd0tleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlRmllbGRzLmZvckVhY2goKGZpZWxkOiBJRmxvd0ZpZWxkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIG1hbnl3aG8uY29sbGFib3JhdGlvbi5wdXNoKHRoaXMuQ29tcG9uZW50SWQse1wibWVzc2FnZVwiOiB7XCJhY3Rpb25cIjpcIlJFRlJFU0hfRklFTERcIixcImZpZWxkTmFtZVwiOiBmaWVsZC5kZXZlbG9wZXJOYW1lIH19LHRoaXMuZmxvd0tleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9tYW55d2hvLmNvbXBvbmVudC5oYW5kbGVFdmVudCh0aGlzLG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsIHRoaXMuZmxvd0tleSksdGhpcy5GbG93S2V5LCB0aGlzLmV2ZW50SGFuZGxlZCk7XHJcbiAgICAgICAgICAgICAgICAvL21hbnl3aG8uZW5naW5lLnN5bmModGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5ldmVudEhhbmRsZWQgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwicGluZ1wiKTtcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlVmFsdWVzID0gZnVuY3Rpb24gKHZhbHVlcykge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHVwZGF0ZUZpZWxkcywgX2ksIF9hLCBmaWVsZDtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLnNhdmluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRmllbGRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXMuY29uc3RydWN0b3IubmFtZSA9PT0gRmxvd0ZpZWxkXzEuRmxvd0ZpZWxkLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUZpZWxkcy5wdXNoKHZhbHVlcy5pRmxvd0ZpZWxkKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChfaSA9IDAsIF9hID0gdmFsdWVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUZpZWxkcy5wdXNoKGZpZWxkLmlGbG93RmllbGQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jYWxsUmVxdWVzdE9sZCh0aGlzLnVybCwgJ1BPU1QnLCB1cGRhdGVGaWVsZHMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hd2FpdCBtYW55d2hvLmNvbm5lY3Rpb24ucmVxdWVzdCh0aGlzLCBudWxsLCB0aGlzLnVybCAsICdQT1NUJywgdGhpcy5UZW5hbnRJZCwgdGhpcy5TdGF0ZUlkLCBtYW55d2hvLnN0YXRlLmdldEF1dGhlbnRpY2F0aW9uVG9rZW4odGhpcy5GbG93S2V5KSwgdXBkYXRlRmllbGRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tYW55d2hvLmNvbXBvbmVudC5oYW5kbGVFdmVudCh0aGlzLG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KHRoaXMuQ29tcG9uZW50SWQsdGhpcy5GbG93S2V5KSx0aGlzLkZsb3dLZXksbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYXdhaXQgbWFueXdoby5lbmdpbmUuc3luYyh0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFueXdoby5jb2xsYWJvcmF0aW9uLmlzSW5pdGlhbGl6ZWQodGhpcy5mbG93S2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tYW55d2hvLmNvbGxhYm9yYXRpb24uc3luYyh0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby5jb2xsYWJvcmF0aW9uLnB1c2goX3RoaXMuQ29tcG9uZW50SWQsIHsgXCJtZXNzYWdlXCI6IHsgXCJhY3Rpb25cIjogXCJSRUZSRVNIX0ZJRUxEXCIsIFwiZmllbGROYW1lXCI6IGZpZWxkLmRldmVsb3Blck5hbWUgfSB9LCBfdGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5yZWFkeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLl9zZW5kQ29sbGFib3JhdGlvbk1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIGlmIChtYW55d2hvLmNvbGxhYm9yYXRpb24uaXNJbml0aWFsaXplZCh0aGlzLmZsb3dLZXkpKSB7XHJcbiAgICAgICAgICAgIC8vbWFueXdoby5jb2xsYWJvcmF0aW9uLnN5bmModGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgbWFueXdoby5jb2xsYWJvcmF0aW9uLnB1c2godGhpcy5Db21wb25lbnRJZCwgeyBcIm1lc3NhZ2VcIjogbWVzc2FnZSB9LCB0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvL3RyaWdnZXJzIHRoZSBzcGVjaWZpZWQgb3V0Y29tZSwgb3B0aW9uYWxseSBwYXNzZXMgYSBkYXRhIG9iamVjdCBcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS50cmlnZ2VyT3V0Y29tZSA9IGZ1bmN0aW9uIChvdXRjb21lTmFtZSwgZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG9jO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUubW92aW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3V0Y29tZXNbb3V0Y29tZU5hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYyA9IHRoaXMub3V0Y29tZXNbb3V0Y29tZU5hbWVdLmlGbG93T3V0Y29tZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb2MpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBtYW55d2hvLmNvbXBvbmVudC5vbk91dGNvbWUob2MsIGRhdGEsIHRoaXMuRmxvd0tleSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nKCdDb3VsZCBub3QgZmluZCBvdXRjb21lICcgKyBvdXRjb21lTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vdHJpZ2dlcnMgdGhlIHNwZWNpZmllZCBvdXRjb21lLCBvcHRpb25hbGx5IHBhc3NlcyBhIGRhdGEgb2JqZWN0IFxyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLm1vdmVUbyA9IGZ1bmN0aW9uIChmbG93RWxlbWVudElkLCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYmFzZVVybCwgaW52b2tldXJsLCBpbmZvLCByZXF1ZXN0LCByZXNwO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUubW92aW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNlVXJsID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW52b2tldXJsID0gYmFzZVVybCArIFwiL2FwaS9ydW4vMS9zdGF0ZS9cIiArIHRoaXMuc3RhdGVJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5mbyA9IG1hbnl3aG8uc3RhdGUuZ2V0U3RhdGUodGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmN1cnJlbnRNYXBFbGVtZW50SWQgPSBpbmZvLmN1cnJlbnRNYXBFbGVtZW50SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuaW52b2tlVHlwZSA9ICdOQVZJR0FURSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QubWFwRWxlbWVudEludm9rZVJlcXVlc3QgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5tYXBFbGVtZW50SW52b2tlUmVxdWVzdC5zZWxlY3RlZE91dGNvbWVJZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QucGFnZVJlcXVlc3QgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlQ29tcG9uZW50SW5wdXRSZXNwb25zZXM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHBhZ2VDb21wb25lbnRJZDogdGhpcy5jb21wb25lbnRJZCwgY29udGVudFZhbHVlOiBudWxsLCBvYmplY3REYXRhOiBudWxsIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnNlbGVjdGVkTWFwRWxlbWVudElkID0gZmxvd0VsZW1lbnRJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5zdGF0ZUlkID0gdGhpcy5zdGF0ZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnN0YXRlVG9rZW4gPSBpbmZvLnRva2VuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBtYW55d2hvLmNvbm5lY3Rpb24ucmVxdWVzdCh0aGlzLCBudWxsLCBpbnZva2V1cmwsICdQT1NUJywgdGhpcy50ZW5hbnRJZCwgdGhpcy5zdGF0ZUlkLCBtYW55d2hvLnN0YXRlLmdldEF1dGhlbnRpY2F0aW9uVG9rZW4odGhpcy5mbG93S2V5KSwgcmVxdWVzdCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby5tb2RlbC5wYXJzZUVuZ2luZVJlc3BvbnNlKHJlc3AsIHRoaXMuZmxvd0tleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIG1hbnl3aG8uZW5naW5lLnJlbmRlcih0aGlzLmZsb3dLZXkpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgdmFyIHRpbWUgPSBbKCcwJyArIG5vdy5nZXRIb3VycygpKS5zbGljZSgtMiksICgnMCcgKyBub3cuZ2V0TWludXRlcygpKS5zbGljZSgtMiksXHJcbiAgICAgICAgICAgICgnMCcgKyBub3cuZ2V0U2Vjb25kcygpKS5zbGljZSgtMildO1xyXG4gICAgICAgIHZhciB0aW1lc3RhbXAgPSAnWycgKyB0aW1lLmpvaW4oJzonKSArICddICc7XHJcbiAgICAgICAgY29uc29sZS5sb2codGltZXN0YW1wICsgbWVzc2FnZSk7XHJcbiAgICB9O1xyXG4gICAgLy9oZWxwZXIgdG8gc2lsZW50bHkgbGF1bmNoIGEgZmxvd1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmxhdW5jaEZsb3dTaWxlbnQgPSBmdW5jdGlvbiAodGVuYW50LCBmbG93SWQsIHBsYXllciwgb2JqZWN0RGF0YSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGJhc2VVcmwsIHVybCwgZGF0YTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgYmFzZVVybCA9IG1hbnl3aG8uc2V0dGluZ3MuZ2xvYmFsKCdwbGF0Zm9ybS51cmknKSB8fCAnaHR0cHM6Ly9mbG93Lm1hbnl3aG8uY29tJztcclxuICAgICAgICAgICAgICAgIHVybCA9IGJhc2VVcmwgKyBcIi9hcGkvcnVuLzEvc3RhdGVcIjtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSB7fTtcclxuICAgICAgICAgICAgICAgIGRhdGEuaWQgPSBmbG93SWQ7XHJcbiAgICAgICAgICAgICAgICBkYXRhLmRldmVsb3Blck5hbWUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgZGF0YS5pbnB1dHMgPSBvYmplY3REYXRhID8gb2JqZWN0RGF0YS5pRmxvd09iamVjdERhdGFBcnJheSgpIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIG1hbnl3aG8uY29ubmVjdGlvbi5yZXF1ZXN0KHRoaXMsIFwiXCIsIHVybCwgJ1BPU1QnLCB0aGlzLlRlbmFudElkLCBcIlwiLCBtYW55d2hvLnN0YXRlLmdldEF1dGhlbnRpY2F0aW9uVG9rZW4odGhpcy5GbG93S2V5KSwgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvL2hlbHBlciB0byBvcGVuIGEgc3BlY2lmaWMgZmxvdyBpbiBhIG5ldyB0YWJcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5sYXVuY2hGbG93VGFiID0gZnVuY3Rpb24gKHRlbmFudCwgZmxvd0lkLCBwbGF5ZXIsIG9iamVjdERhdGEpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBiYXNlVXJsLCB1cmw7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIGJhc2VVcmwgPSBtYW55d2hvLnNldHRpbmdzLmdsb2JhbCgncGxhdGZvcm0udXJpJykgfHwgJ2h0dHBzOi8vZmxvdy5ib29taS5jb20nO1xyXG4gICAgICAgICAgICAgICAgdXJsID0gYmFzZVVybCArICcvJyArIHRlbmFudCArICcvcGxheS8nICsgcGxheWVyICsgJz9mbG93LWlkPScgKyBmbG93SWQ7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cub3Blbih1cmwsICdfbmV3Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvL3RoaXMgd2lsbCBnZXQgdHJpZ2dlcmVkIGJ5IHRoZSBjb2xsYWJvcmF0aW9uIGVuZ2luZVxyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSwgbWVzc2FnZSwgX2E7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0gbWFueXdoby5zdGF0ZS5nZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgdGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZSkgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBzdGF0ZS5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRNb2RlbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby5zdGF0ZS5zZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgeyBcIm1lc3NhZ2VcIjoge30gfSwgdGhpcy5mbG93S2V5LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobWVzc2FnZSAmJiBtZXNzYWdlLmFjdGlvbikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IG1lc3NhZ2UuYWN0aW9uLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1JFRlJFU0hfRklFTERTJzogcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdSRUZSRVNIX0ZJRUxEJzogcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmxvYWRBbGxWYWx1ZXMoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2FkVmFsdWUobWVzc2FnZS5maWVsZE5hbWUpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzMgLypicmVhayovLCA2XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMiAvKnJldHVybiovLCBtZXNzYWdlXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLy90aGlzIGlzIHVzZWQgYnkgb3RoZXIgY29tcG9uZW50cyB3aG8gbWlnaHQgd2FudCB0byBzZW5kIGluIGEgZ2VuZXJpYyB3aW5kb3cgbWVzc2FnZVxyXG4gICAgLy9ub3RoaW5nIHRvIGRvIHdpdGggY29sbGFib3JhdGlvblxyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLnJlY2VpdmVNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBtc2csIF9hO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1lc3NhZ2UuZGF0YSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA9IG1lc3NhZ2UuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtc2cuYWN0aW9uKSByZXR1cm4gWzMgLypicmVhayovLCA5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBtc2cuYWN0aW9uLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ09VVENPTUUnOiByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1JFRlJFU0hfRklFTERTJzogcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdSRUZSRVNIX0ZJRUxEJzogcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnRyaWdnZXJPdXRjb21lKG1zZy5kYXRhKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2FkQWxsVmFsdWVzKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA5XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9hZFZhbHVlKG1zZy5maWVsZE5hbWUpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmhhbmRsZU1lc3NhZ2UobXNnKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZU1lc3NhZ2UgPSBmdW5jdGlvbiAobXNnKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmxvd0Jhc2VDb21wb25lbnQ7XHJcbn0oUmVhY3QuQ29tcG9uZW50KSk7XHJcbmV4cG9ydHMuRmxvd0Jhc2VDb21wb25lbnQgPSBGbG93QmFzZUNvbXBvbmVudDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93T2JqZWN0RGF0YUFycmF5ID0gZXhwb3J0cy5lU29ydE9yZGVyID0gdm9pZCAwO1xyXG52YXIgRmxvd0ZpZWxkXzEgPSByZXF1aXJlKFwiLi9GbG93RmllbGRcIik7XHJcbnZhciBGbG93T2JqZWN0RGF0YV8xID0gcmVxdWlyZShcIi4vRmxvd09iamVjdERhdGFcIik7XHJcbnZhciBlU29ydE9yZGVyO1xyXG4oZnVuY3Rpb24gKGVTb3J0T3JkZXIpIHtcclxuICAgIGVTb3J0T3JkZXJbZVNvcnRPcmRlcltcImFzY2VuZGluZ1wiXSA9IDBdID0gXCJhc2NlbmRpbmdcIjtcclxuICAgIGVTb3J0T3JkZXJbZVNvcnRPcmRlcltcImRlc2NlbmRpbmdcIl0gPSAxXSA9IFwiZGVzY2VuZGluZ1wiO1xyXG59KShlU29ydE9yZGVyID0gZXhwb3J0cy5lU29ydE9yZGVyIHx8IChleHBvcnRzLmVTb3J0T3JkZXIgPSB7fSkpO1xyXG52YXIgRmxvd09iamVjdERhdGFBcnJheSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZsb3dPYmplY3REYXRhQXJyYXkoYXJyYXkpIHtcclxuICAgICAgICB0aGlzLkl0ZW1zID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGFycmF5IHx8IFtdOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IF9hW19pXTtcclxuICAgICAgICAgICAgdGhpcy5JdGVtcy5wdXNoKG5ldyBGbG93T2JqZWN0RGF0YV8xLkZsb3dPYmplY3REYXRhKFtpdGVtXSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YUFycmF5LnByb3RvdHlwZSwgXCJpdGVtc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkl0ZW1zO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEZsb3dPYmplY3REYXRhQXJyYXkucHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbiAob3JkZXIsIGZpZWxkTmFtZSkge1xyXG4gICAgICAgIGlmIChvcmRlciA9PT0gZVNvcnRPcmRlci5hc2NlbmRpbmcpIHtcclxuICAgICAgICAgICAgaWYgKGZpZWxkTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuSXRlbXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxBO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxCO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoYS5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0uY29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudE51bWJlcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbEEgPSBwYXJzZUZsb2F0KGEucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbEIgPSBwYXJzZUZsb2F0KGIucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50RGF0ZVRpbWU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxBID0gbmV3IERhdGUoYS5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsQiA9IG5ldyBEYXRlKGIucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsQSA9IGEucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsQiA9IGIucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHZhbEEgPCB2YWxCOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHZhbEEgPiB2YWxCOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkl0ZW1zLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyOyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGZpZWxkTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuSXRlbXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhICYmIGIgJiYgYS5wcm9wZXJ0aWVzICYmIGIucHJvcGVydGllcyAmJiBhLnByb3BlcnRpZXNbZmllbGROYW1lXSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiLnByb3BlcnRpZXNbZmllbGROYW1lXSAmJiBhLnByb3BlcnRpZXNbZmllbGROYW1lXS52YWx1ZSAmJiBiLnByb3BlcnRpZXNbZmllbGROYW1lXS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYS5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgYS5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0udmFsdWUgPCBiLnByb3BlcnRpZXNbZmllbGROYW1lXS52YWx1ZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBhLnByb3BlcnRpZXNbZmllbGROYW1lXS52YWx1ZSA+IGIucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5JdGVtcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFBcnJheS5wcm90b3R5cGUuYWRkSXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgdGhpcy5JdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dPYmplY3REYXRhQXJyYXkucHJvdG90eXBlLmNsZWFySXRlbXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5JdGVtcyA9IFtdO1xyXG4gICAgfTtcclxuICAgIEZsb3dPYmplY3REYXRhQXJyYXkucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjbG9uZSA9IG5ldyBGbG93T2JqZWN0RGF0YUFycmF5KCk7XHJcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgY2xvbmUuYWRkSXRlbShvYmouY2xvbmUoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGNsb25lO1xyXG4gICAgfTtcclxuICAgIEZsb3dPYmplY3REYXRhQXJyYXkucHJvdG90eXBlLmlGbG93T2JqZWN0RGF0YUFycmF5ID0gZnVuY3Rpb24gKHNlbGVjdGVkKSB7XHJcbiAgICAgICAgdmFyIG91dHB1dCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLkl0ZW1zOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgb2QgPSBfYVtfaV07XHJcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKG9kLmlPYmplY3REYXRhKHNlbGVjdGVkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFBcnJheS5wcm90b3R5cGUuZ2V0SXRlbVdpdGhQcm9wZXJ0eU5hbWUgPSBmdW5jdGlvbiAoZmluZFByb3BlcnR5LCB3aXRoVmFsdWUsIHJldHVyblByb3BlcnR5KSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuSXRlbXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0gJiYgaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0udmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBjb21wYXJlVG8gPSB3aXRoVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldLmNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudFN0cmluZzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBjb21wYXJlVG8udG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudE51bWJlcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gcGFyc2VGbG9hdChjb21wYXJlVG8udG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRCb29sZWFuOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBuZXcgU3RyaW5nKGNvbXBhcmVUbykudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gY29tcGFyZVRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ucHJvcGVydGllc1tyZXR1cm5Qcm9wZXJ0eV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFBcnJheS5wcm90b3R5cGUuZ2V0U2VsZWN0ZWRJdGVtcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVzdWx0cyA9IG5ldyBGbG93T2JqZWN0RGF0YUFycmF5KCk7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuSXRlbXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5pc1NlbGVjdGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRzLmFkZEl0ZW0oaXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFBcnJheS5wcm90b3R5cGUuZ2V0SXRlbVdpdGhQcm9wZXJ0eVZhbHVlID0gZnVuY3Rpb24gKGZpbmRQcm9wZXJ0eSwgd2l0aFZhbHVlKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuSXRlbXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0gJiYgaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0udmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBjb21wYXJlVG8gPSB3aXRoVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldLmNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudFN0cmluZzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBuZXcgU3RyaW5nKGNvbXBhcmVUbykudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudE51bWJlcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gcGFyc2VGbG9hdChuZXcgU3RyaW5nKGNvbXBhcmVUbykudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRCb29sZWFuOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBuZXcgU3RyaW5nKGNvbXBhcmVUbykudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gY29tcGFyZVRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFBcnJheS5wcm90b3R5cGUuZ2V0SW5kZXhPZkl0ZW1XaXRoUHJvcGVydHlWYWx1ZSA9IGZ1bmN0aW9uIChmaW5kUHJvcGVydHksIHdpdGhWYWx1ZSkge1xyXG4gICAgICAgIGZvciAodmFyIHBvcyA9IDA7IHBvcyA8IHRoaXMuaXRlbXMubGVuZ3RoOyBwb3MrKykge1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbcG9zXTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldICYmIGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldLnZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29tcGFyZVRvID0gd2l0aFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRTdHJpbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gY29tcGFyZVRvLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnROdW1iZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVUbyA9IHBhcnNlRmxvYXQobmV3IFN0cmluZyhjb21wYXJlVG8pLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50Qm9vbGVhbjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gbmV3IFN0cmluZyhjb21wYXJlVG8pLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IGNvbXBhcmVUbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfTtcclxuICAgIEZsb3dPYmplY3REYXRhQXJyYXkucHJvdG90eXBlLnJlbW92ZUl0ZW1XaXRoUHJvcGVydHlWYWx1ZSA9IGZ1bmN0aW9uIChmaW5kUHJvcGVydHksIHdpdGhWYWx1ZSkge1xyXG4gICAgICAgIHZhciBtb2RpZmllZENvdW50ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBwb3MgPSAwOyBwb3MgPCB0aGlzLml0ZW1zLmxlbmd0aDsgcG9zKyspIHtcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLml0ZW1zW3Bvc107XHJcbiAgICAgICAgICAgIGlmIChpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XSAmJiBpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS52YWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBhcmVUbyA9IHdpdGhWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0uY29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50U3RyaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVUbyA9IGNvbXBhcmVUby50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBwYXJzZUZsb2F0KG5ldyBTdHJpbmcoY29tcGFyZVRvKS50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudEJvb2xlYW46XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVUbyA9IG5ldyBTdHJpbmcoY29tcGFyZVRvKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBjb21wYXJlVG8pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLnNwbGljZShwb3MsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkQ291bnQrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbW9kaWZpZWRDb3VudDtcclxuICAgIH07XHJcbiAgICBGbG93T2JqZWN0RGF0YUFycmF5LnByb3RvdHlwZS5yZW1vdmVJdGVtQXRJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIHZhciBtb2RpZmllZENvdW50ID0gMDtcclxuICAgICAgICBpZiAodGhpcy5pdGVtc1tpbmRleF0pIHtcclxuICAgICAgICAgICAgdGhpcy5pdGVtcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICBtb2RpZmllZENvdW50ID0gaW5kZXg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtb2RpZmllZENvdW50O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGbG93T2JqZWN0RGF0YUFycmF5O1xyXG59KCkpO1xyXG5leHBvcnRzLkZsb3dPYmplY3REYXRhQXJyYXkgPSBGbG93T2JqZWN0RGF0YUFycmF5O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pKTtcclxudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0Zsb3dDb21wb25lbnRcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRmxvd1BhZ2VcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRGlhbG9ncy9GbG93RGlhbG9nQm94XCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0RpYWxvZ3MvRmxvd01lc3NhZ2VCb3hcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRGlhbG9ncy9GbG93Q29udGV4dE1lbnVcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRGlhbG9ncy9Db21tb25cIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vSWNvblBpY2tlclwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9GbG93QmFzZUNvbXBvbmVudFwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9GbG93QXR0cmlidXRlXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0Zsb3dEaXNwbGF5Q29sdW1uXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0Zsb3dGaWVsZFwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9GbG93T2JqZWN0RGF0YVwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9GbG93T2JqZWN0RGF0YUFycmF5XCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0Zsb3dPYmplY3REYXRhUHJvcGVydHlcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRmxvd091dGNvbWVcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRmxvd0NoYXJ0XCIpLCBleHBvcnRzKTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93QXR0cmlidXRlID0gdm9pZCAwO1xyXG52YXIgRmxvd0F0dHJpYnV0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZsb3dBdHRyaWJ1dGUobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICB0aGlzLk5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuVmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QXR0cmlidXRlLnByb3RvdHlwZSwgXCJuYW1lXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuTmFtZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0F0dHJpYnV0ZS5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5WYWx1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gRmxvd0F0dHJpYnV0ZTtcclxufSgpKTtcclxuZXhwb3J0cy5GbG93QXR0cmlidXRlID0gRmxvd0F0dHJpYnV0ZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5EcmFnRXZlbnQgPSBleHBvcnRzLmVEcmFnRXZlbnRUeXBlID0gZXhwb3J0cy5tb2RhbERpYWxvZ0J1dHRvbiA9IHZvaWQgMDtcclxudmFyIG1vZGFsRGlhbG9nQnV0dG9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gbW9kYWxEaWFsb2dCdXR0b24obGFiZWwsIGhhbmRsZXIpIHtcclxuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcclxuICAgIH1cclxuICAgIHJldHVybiBtb2RhbERpYWxvZ0J1dHRvbjtcclxufSgpKTtcclxuZXhwb3J0cy5tb2RhbERpYWxvZ0J1dHRvbiA9IG1vZGFsRGlhbG9nQnV0dG9uO1xyXG52YXIgZURyYWdFdmVudFR5cGU7XHJcbihmdW5jdGlvbiAoZURyYWdFdmVudFR5cGUpIHtcclxuICAgIGVEcmFnRXZlbnRUeXBlW2VEcmFnRXZlbnRUeXBlW1widW5rbm93blwiXSA9IDBdID0gXCJ1bmtub3duXCI7XHJcbiAgICBlRHJhZ0V2ZW50VHlwZVtlRHJhZ0V2ZW50VHlwZVtcImNhbnZhc1wiXSA9IDFdID0gXCJjYW52YXNcIjtcclxuICAgIGVEcmFnRXZlbnRUeXBlW2VEcmFnRXZlbnRUeXBlW1widGFibGVcIl0gPSAyXSA9IFwidGFibGVcIjtcclxuICAgIGVEcmFnRXZlbnRUeXBlW2VEcmFnRXZlbnRUeXBlW1wibGlua1wiXSA9IDNdID0gXCJsaW5rXCI7XHJcbiAgICBlRHJhZ0V2ZW50VHlwZVtlRHJhZ0V2ZW50VHlwZVtcImRpYWxvZ1wiXSA9IDRdID0gXCJkaWFsb2dcIjtcclxufSkoZURyYWdFdmVudFR5cGUgPSBleHBvcnRzLmVEcmFnRXZlbnRUeXBlIHx8IChleHBvcnRzLmVEcmFnRXZlbnRUeXBlID0ge30pKTtcclxudmFyIERyYWdFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERyYWdFdmVudCgpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSBlRHJhZ0V2ZW50VHlwZS51bmtub3duO1xyXG4gICAgICAgIHRoaXMuc291cmNlRWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50YXJnZXRFbGVtZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1vdXNlWCA9IDA7XHJcbiAgICAgICAgdGhpcy5tb3VzZVkgPSAwO1xyXG4gICAgICAgIHRoaXMubW91c2VPZmZzZXRYID0gMDtcclxuICAgICAgICB0aGlzLm1vdXNlT2Zmc2V0WSA9IDA7XHJcbiAgICB9XHJcbiAgICBEcmFnRXZlbnQuc3RhcnQgPSBmdW5jdGlvbiAodHlwZSwgc291cmNlRWxlbWVudCwgbW91c2VYLCBtb3VzZVkpIHtcclxuICAgICAgICB2YXIgZXZ0ID0gbmV3IERyYWdFdmVudCgpO1xyXG4gICAgICAgIGV2dC50eXBlID0gdHlwZTtcclxuICAgICAgICBldnQuc291cmNlRWxlbWVudCA9IHNvdXJjZUVsZW1lbnQ7XHJcbiAgICAgICAgZXZ0LnRhcmdldEVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIGV2dC5tb3VzZVggPSBtb3VzZVg7XHJcbiAgICAgICAgZXZ0Lm1vdXNlWSA9IG1vdXNlWTtcclxuICAgICAgICBldnQubW91c2VPZmZzZXRYID0gbW91c2VYO1xyXG4gICAgICAgIGV2dC5tb3VzZU9mZnNldFkgPSBtb3VzZVk7XHJcbiAgICAgICAgcmV0dXJuIGV2dDtcclxuICAgIH07XHJcbiAgICBEcmFnRXZlbnQucHJvdG90eXBlLmRyYWcgPSBmdW5jdGlvbiAobW91c2VYLCBtb3VzZVkpIHtcclxuICAgICAgICB0aGlzLm1vdXNlWCA9IG1vdXNlWDtcclxuICAgICAgICB0aGlzLm1vdXNlWSA9IG1vdXNlWTtcclxuICAgIH07XHJcbiAgICBEcmFnRXZlbnQucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uICh0YXJnZXQsIG1vdXNlWCwgbW91c2VZKSB7XHJcbiAgICAgICAgdGhpcy50YXJnZXRFbGVtZW50ID0gdGFyZ2V0O1xyXG4gICAgICAgIHRoaXMubW91c2VYID0gbW91c2VYO1xyXG4gICAgICAgIHRoaXMubW91c2VZID0gbW91c2VZO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IGVEcmFnRXZlbnRUeXBlLnVua25vd247XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERyYWdFdmVudDtcclxufSgpKTtcclxuZXhwb3J0cy5EcmFnRXZlbnQgPSBEcmFnRXZlbnQ7XHJcbiIsIlxyXG5leHBvcnQgZW51bSBlQ29sdW1uQ29tcGFyYXRvciB7XHJcbiAgICBlcXVhbFRvLFxyXG4gICAgbm90RXF1YWxUbyxcclxuICAgIHN0YXJ0c1dpdGgsXHJcbiAgICBlbmRzV2l0aCxcclxuICAgIGNvbnRhaW5zLFxyXG4gICAgbm90Q29udGFpbnMsXHJcbiAgICBpbixcclxuICAgIG5vdEluXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbHVtbkNyaXRlcmlhIHtcclxuICAgIGNvbXBhcmF0b3I6IGVDb2x1bW5Db21wYXJhdG9yO1xyXG4gICAgdmFsdWU6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb21wYXJhdG9yOiBlQ29sdW1uQ29tcGFyYXRvciwgdmFsdWU6IGFueSkge1xyXG4gICAgICAgIHRoaXMuY29tcGFyYXRvcj1jb21wYXJhdG9yO1xyXG4gICAgICAgIHN3aXRjaChjb21wYXJhdG9yKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZUNvbHVtbkNvbXBhcmF0b3IuaW46XHJcbiAgICAgICAgICAgIGNhc2UgZUNvbHVtbkNvbXBhcmF0b3Iubm90SW46XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsczogQXJyYXk8YW55PiA9IEpTT04ucGFyc2UodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZT1uZXcgTWFwKCk7XHJcbiAgICAgICAgICAgICAgICB2YWxzLmZvckVhY2goKHZhbDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZS5zZXQodmFsLHZhbCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vdGhpcy52YWx1ZS5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWU9dmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldEZvclN0b3JhZ2UoKSA6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHJlc3VsdDogYW55ID0ge307XHJcbiAgICAgICAgcmVzdWx0LmNvbXBhcmF0b3IgPSB0aGlzLmNvbXBhcmF0b3I7XHJcbiAgICAgICAgaWYodGhpcy52YWx1ZSBpbnN0YW5jZW9mIE1hcCkge1xyXG4gICAgICAgICAgICBsZXQgdmFsczogQXJyYXk8YW55PiA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlLmZvckVhY2goKHZhbDogYW55LCBrZXk6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFscy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXN1bHQudmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWxzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXN1bHQpO1xyXG4gICAgfVxyXG59IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93RGlzcGxheUNvbHVtbiA9IHZvaWQgMDtcclxudmFyIEZsb3dGaWVsZF8xID0gcmVxdWlyZShcIi4vRmxvd0ZpZWxkXCIpO1xyXG52YXIgRmxvd0Rpc3BsYXlDb2x1bW4gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGbG93RGlzcGxheUNvbHVtbihjb2x1bW4pIHtcclxuICAgICAgICB0aGlzLkNvbHVtbiA9IGNvbHVtbjtcclxuICAgICAgICB0aGlzLkNvbXBvbmVudFR5cGUgPSBjb2x1bW4uY29tcG9uZW50VHlwZTtcclxuICAgICAgICB0aGlzLkNvbnRlbnRGb3JtYXQgPSBjb2x1bW4uY29udGVudEZvcm1hdDtcclxuICAgICAgICB0aGlzLkNvbnRlbnRUeXBlID0gRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlW2NvbHVtbi5jb250ZW50VHlwZV07XHJcbiAgICAgICAgdGhpcy5EZXZlbG9wZXJOYW1lID0gY29sdW1uLmRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgdGhpcy5EaXNwbGF5T3JkZXIgPSBjb2x1bW4ub3JkZXI7XHJcbiAgICAgICAgdGhpcy5MYWJlbCA9IGNvbHVtbi5sYWJlbDtcclxuICAgICAgICB0aGlzLlJlYWRPbmx5ID0gIWNvbHVtbi5pc0VkaXRhYmxlO1xyXG4gICAgICAgIHRoaXMuVHlwZUVsZW1lbXRQcm9wZXJ0eVRvRGlzcGxheUlkID0gY29sdW1uLnR5cGVFbGVtZW10UHJvcGVydHlUb0Rpc3BsYXlJZDtcclxuICAgICAgICB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlJZCA9IGNvbHVtbi50eXBlRWxlbWVudFByb3BlcnR5SWQ7XHJcbiAgICAgICAgdGhpcy5WaXNpYmxlID0gY29sdW1uLmlzRGlzcGxheVZhbHVlO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dEaXNwbGF5Q29sdW1uLnByb3RvdHlwZSwgXCJjb21wb25lbnRUeXBlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQ29tcG9uZW50VHlwZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Rpc3BsYXlDb2x1bW4ucHJvdG90eXBlLCBcImNvbnRlbnRGb3JtYXRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Db250ZW50Rm9ybWF0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RGlzcGxheUNvbHVtbi5wcm90b3R5cGUsIFwiY29udGVudFR5cGVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Db250ZW50VHlwZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Rpc3BsYXlDb2x1bW4ucHJvdG90eXBlLCBcImRldmVsb3Blck5hbWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5EZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RGlzcGxheUNvbHVtbi5wcm90b3R5cGUsIFwidmlzaWJsZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlZpc2libGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dEaXNwbGF5Q29sdW1uLnByb3RvdHlwZSwgXCJyZWFkT25seVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlYWRPbmx5O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RGlzcGxheUNvbHVtbi5wcm90b3R5cGUsIFwibGFiZWxcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5MYWJlbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Rpc3BsYXlDb2x1bW4ucHJvdG90eXBlLCBcImRpc3BsYXlPcmRlclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkRpc3BsYXlPcmRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Rpc3BsYXlDb2x1bW4ucHJvdG90eXBlLCBcInR5cGVFbGVtZW50UHJvcGVydHlJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Rpc3BsYXlDb2x1bW4ucHJvdG90eXBlLCBcInR5cGVFbGVtZW10UHJvcGVydHlUb0Rpc3BsYXlJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlR5cGVFbGVtZW10UHJvcGVydHlUb0Rpc3BsYXlJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBGbG93RGlzcGxheUNvbHVtbi5wcm90b3R5cGUuaUZsb3dEaXNwbGF5Q29sdW1uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkNvbHVtbjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmxvd0Rpc3BsYXlDb2x1bW47XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmxvd0Rpc3BsYXlDb2x1bW4gPSBGbG93RGlzcGxheUNvbHVtbjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93T2JqZWN0RGF0YVByb3BlcnR5ID0gdm9pZCAwO1xyXG52YXIgRmxvd0ZpZWxkXzEgPSByZXF1aXJlKFwiLi9GbG93RmllbGRcIik7XHJcbnZhciBGbG93T2JqZWN0RGF0YV8xID0gcmVxdWlyZShcIi4vRmxvd09iamVjdERhdGFcIik7XHJcbnZhciBGbG93T2JqZWN0RGF0YUFycmF5XzEgPSByZXF1aXJlKFwiLi9GbG93T2JqZWN0RGF0YUFycmF5XCIpO1xyXG52YXIgRmxvd09iamVjdERhdGFQcm9wZXJ0eSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZsb3dPYmplY3REYXRhUHJvcGVydHkocHJvcGVydHkpIHtcclxuICAgICAgICB0aGlzLkNvbnRlbnRGb3JtYXQgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuQ29udGVudFR5cGUgPSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUudW5rbm93bjtcclxuICAgICAgICB0aGlzLkRldmVsb3Blck5hbWUgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuVHlwZUVsZW1lbnRJZCA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5SWQgPSBcIlwiO1xyXG4gICAgICAgIGlmIChwcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICB0aGlzLkRldmVsb3Blck5hbWUgPSBwcm9wZXJ0eS5kZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgICAgICB0aGlzLkNvbnRlbnRUeXBlID0gRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlW3Byb3BlcnR5LmNvbnRlbnRUeXBlXTtcclxuICAgICAgICAgICAgdGhpcy5Db250ZW50Rm9ybWF0ID0gcHJvcGVydHkuY29udGVudEZvcm1hdCA/IHByb3BlcnR5LmNvbnRlbnRGb3JtYXQgOiBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLlR5cGVFbGVtZW50SWQgPSBwcm9wZXJ0eS50eXBlRWxlbWVudElkID8gcHJvcGVydHkudHlwZUVsZW1lbnRJZCA6IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkID0gcHJvcGVydHkudHlwZUVsZW1lbnRQcm9wZXJ0eUlkO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuQ29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRPYmplY3Q6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5WYWx1ZSA9IHByb3BlcnR5Lm9iamVjdERhdGEgPyBuZXcgRmxvd09iamVjdERhdGFfMS5GbG93T2JqZWN0RGF0YShwcm9wZXJ0eS5vYmplY3REYXRhKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRMaXN0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBwcm9wZXJ0eS5vYmplY3REYXRhID8gbmV3IEZsb3dPYmplY3REYXRhQXJyYXlfMS5GbG93T2JqZWN0RGF0YUFycmF5KHByb3BlcnR5Lm9iamVjdERhdGEpIDogbmV3IEZsb3dPYmplY3REYXRhQXJyYXlfMS5GbG93T2JqZWN0RGF0YUFycmF5KFtdKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHByb3BlcnR5LmNvbnRlbnRWYWx1ZSA/IHByb3BlcnR5LmNvbnRlbnRWYWx1ZSA6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBGbG93T2JqZWN0RGF0YVByb3BlcnR5Lm5ld0luc3RhbmNlID0gZnVuY3Rpb24gKGRldmVsb3Blck5hbWUsIGNvbnRlbnRUeXBlLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBjdiA9IFwiXCI7XHJcbiAgICAgICAgdmFyIG9iamQgPSBbXTtcclxuICAgICAgICBzd2l0Y2ggKGNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRPYmplY3Q6XHJcbiAgICAgICAgICAgICAgICB2YXIgb2QgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIG9iamQucHVzaChvZC5pT2JqZWN0RGF0YSgpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TGlzdDpcclxuICAgICAgICAgICAgICAgIHZhciBvZGEgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIG9iamQgPSBvZGEuaUZsb3dPYmplY3REYXRhQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY3YgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgY29udGVudEZvcm1hdDogXCJcIixcclxuICAgICAgICAgICAgY29udGVudFR5cGU6IEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZVtjb250ZW50VHlwZV0sXHJcbiAgICAgICAgICAgIGNvbnRlbnRWYWx1ZTogY3YsXHJcbiAgICAgICAgICAgIGRldmVsb3Blck5hbWU6IGRldmVsb3Blck5hbWUsXHJcbiAgICAgICAgICAgIG9iamVjdERhdGE6IG9iamQsXHJcbiAgICAgICAgICAgIHR5cGVFbGVtZW50SWQ6IFwiXCIsXHJcbiAgICAgICAgICAgIHR5cGVFbGVtZW50UHJvcGVydHlJZDogXCJcIixcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBuZXcgdGhpcyhkYXRhKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd09iamVjdERhdGFQcm9wZXJ0eS5wcm90b3R5cGUsIFwiY29udGVudEZvcm1hdFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkNvbnRlbnRGb3JtYXQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjb250ZW50Rm9ybWF0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudEZvcm1hdCA9IGNvbnRlbnRGb3JtYXQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPYmplY3REYXRhUHJvcGVydHkucHJvdG90eXBlLCBcImNvbnRlbnRUeXBlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQ29udGVudFR5cGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICB0aGlzLkNvbnRlbnRUeXBlID0gY29udGVudFR5cGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPYmplY3REYXRhUHJvcGVydHkucHJvdG90eXBlLCBcImRldmVsb3Blck5hbWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5EZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGV2ZWxvcGVyTmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLkRldmVsb3Blck5hbWUgPSBkZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YVByb3BlcnR5LnByb3RvdHlwZSwgXCJ0eXBlRWxlbWVudElkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVHlwZUVsZW1lbnRJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHR5cGVFbGVtZW50SWQpIHtcclxuICAgICAgICAgICAgdGhpcy5UeXBlRWxlbWVudElkID0gdHlwZUVsZW1lbnRJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd09iamVjdERhdGFQcm9wZXJ0eS5wcm90b3R5cGUsIFwidHlwZUVsZW1lbnRQcm9wZXJ0eUlkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodHlwZUVsZW1lbnRQcm9wZXJ0eUlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkID0gdHlwZUVsZW1lbnRQcm9wZXJ0eUlkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YVByb3BlcnR5LnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudE51bWJlcjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLlZhbHVlID8gdGhpcy5WYWx1ZSA6ICcwJyk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50Qm9vbGVhbjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFN0cmluZyh0aGlzLlZhbHVlKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLlZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRmxvd09iamVjdERhdGFQcm9wZXJ0eS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlO1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TGlzdDpcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IEZsb3dPYmplY3REYXRhQXJyYXlfMS5GbG93T2JqZWN0RGF0YUFycmF5KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5hZGRJdGVtKGl0ZW0uY2xvbmUoaXRlbS5kZXZlbG9wZXJOYW1lKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50T2JqZWN0OlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnZhbHVlLmNsb25lKHRoaXMudmFsdWUuZGV2ZWxvcGVyTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNsb25lID0gRmxvd09iamVjdERhdGFQcm9wZXJ0eS5uZXdJbnN0YW5jZSh0aGlzLmRldmVsb3Blck5hbWUsIHRoaXMuY29udGVudFR5cGUsIHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFQcm9wZXJ0eS5wcm90b3R5cGUuaUZsb3dPYmplY3REYXRhUHJvcGVydHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNvbnRlbnRWYWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgdmFyIG9iamVjdERhdGEgPSBbXTtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuQ29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudE9iamVjdDpcclxuICAgICAgICAgICAgICAgIHZhciBvZCA9IHRoaXMuVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBpdCBoYXMgbm8gZGV2ZWxvcGVyTmFtZSB0aGVuIHNraXAgaXRcclxuICAgICAgICAgICAgICAgIGlmIChvZCAmJiBvZC5kZXZlbG9wZXJOYW1lICYmIG9kLmRldmVsb3Blck5hbWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdERhdGEucHVzaChvZC5pT2JqZWN0RGF0YSgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TGlzdDpcclxuICAgICAgICAgICAgICAgIHZhciBvZGEgPSB0aGlzLlZhbHVlO1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0RGF0YSA9IG9kYS5pRmxvd09iamVjdERhdGFBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBjb250ZW50VmFsdWUgPSB0aGlzLlZhbHVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvdXRwdXQgPSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnRGb3JtYXQ6IHRoaXMuQ29udGVudEZvcm1hdCxcclxuICAgICAgICAgICAgY29udGVudFR5cGU6IEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZVt0aGlzLkNvbnRlbnRUeXBlXSxcclxuICAgICAgICAgICAgY29udGVudFZhbHVlOiBjb250ZW50VmFsdWUsXHJcbiAgICAgICAgICAgIGRldmVsb3Blck5hbWU6IHRoaXMuRGV2ZWxvcGVyTmFtZSxcclxuICAgICAgICAgICAgb2JqZWN0RGF0YTogb2JqZWN0RGF0YSxcclxuICAgICAgICAgICAgdHlwZUVsZW1lbnRJZDogdGhpcy5UeXBlRWxlbWVudElkLFxyXG4gICAgICAgICAgICB0eXBlRWxlbWVudFByb3BlcnR5SWQ6IHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd09iamVjdERhdGFQcm9wZXJ0eS5wcm90b3R5cGUsIFwiZGlzcGxheVN0cmluZ1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBsYWJlbCA9ICcnO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5WYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLkNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudFN0cmluZzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IHRoaXMuVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRCb29sZWFuOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5WYWx1ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSAnVHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9ICdGYWxzZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudERhdGVUaW1lOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IERhdGUucGFyc2UodGhpcy5WYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4oZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdCA9IG5ldyBEYXRlKGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsLmxlbmd0aCA8PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkdC50b0xvY2FsZURhdGVTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkdC50b0xvY2FsZVN0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlW3RoaXMuQ29udGVudFR5cGVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsID0gJ1VuZGVmaW5lZCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGxhYmVsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBGbG93T2JqZWN0RGF0YVByb3BlcnR5O1xyXG59KCkpO1xyXG5leHBvcnRzLkZsb3dPYmplY3REYXRhUHJvcGVydHkgPSBGbG93T2JqZWN0RGF0YVByb3BlcnR5O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkZsb3dPdXRjb21lID0gZXhwb3J0cy5lUGFnZUFjdGlvblR5cGUgPSBleHBvcnRzLmVQYWdlQWN0aW9uQmluZGluZ1R5cGUgPSB2b2lkIDA7XHJcbnZhciBGbG93QXR0cmlidXRlXzEgPSByZXF1aXJlKFwiLi9GbG93QXR0cmlidXRlXCIpO1xyXG52YXIgZVBhZ2VBY3Rpb25CaW5kaW5nVHlwZTtcclxuKGZ1bmN0aW9uIChlUGFnZUFjdGlvbkJpbmRpbmdUeXBlKSB7XHJcbiAgICBlUGFnZUFjdGlvbkJpbmRpbmdUeXBlW1wiU2F2ZVwiXSA9IFwiU0FWRVwiO1xyXG4gICAgZVBhZ2VBY3Rpb25CaW5kaW5nVHlwZVtcIlBhcnRpYWxTYXZlXCJdID0gXCJQQVJUSUFMX1NBVkVcIjtcclxuICAgIGVQYWdlQWN0aW9uQmluZGluZ1R5cGVbXCJOb1NhdmVcIl0gPSBcIk5PX1NBVkVcIjtcclxufSkoZVBhZ2VBY3Rpb25CaW5kaW5nVHlwZSA9IGV4cG9ydHMuZVBhZ2VBY3Rpb25CaW5kaW5nVHlwZSB8fCAoZXhwb3J0cy5lUGFnZUFjdGlvbkJpbmRpbmdUeXBlID0ge30pKTtcclxudmFyIGVQYWdlQWN0aW9uVHlwZTtcclxuKGZ1bmN0aW9uIChlUGFnZUFjdGlvblR5cGUpIHtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIk5ld1wiXSA9IFwiTkVXXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJRdWVyeVwiXSA9IFwiUVVFUllcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIkluc2VydFwiXSA9IFwiSU5TRVJUXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJVcGRhdGVcIl0gPSBcIlVQREFURVwiO1xyXG4gICAgZVBhZ2VBY3Rpb25UeXBlW1wiVXBzZXJ0XCJdID0gXCJVUFNFUlRcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIkRlbGV0ZVwiXSA9IFwiREVMRVRFXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJSZW1vdmVcIl0gPSBcIlJFTU9WRVwiO1xyXG4gICAgZVBhZ2VBY3Rpb25UeXBlW1wiQWRkXCJdID0gXCJBRERcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIkVkaXRcIl0gPSBcIkVESVRcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIk5leHRcIl0gPSBcIk5FWFRcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIkJhY2tcIl0gPSBcIkJBQ0tcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIkRvbmVcIl0gPSBcIkRPTkVcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIlNhdmVcIl0gPSBcIlNBVkVcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIkNhbmNlbFwiXSA9IFwiQ0FOQ0VMXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJBcHBseVwiXSA9IFwiQVBQTFlcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIkltcG9ydFwiXSA9IFwiSU1QT1JUXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJDbG9zZVwiXSA9IFwiQ0xPU0VcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIk9wZW5cIl0gPSBcIk9QRU5cIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIlN1Ym1pdFwiXSA9IFwiU1VCTUlUXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJFc2NhbGF0ZVwiXSA9IFwiRVNDQUxBVEVcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIlJlamVjdFwiXSA9IFwiUkVKRUNUXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJEZWxlZ2F0ZVwiXSA9IFwiREVMRUdBVEVcIjtcclxufSkoZVBhZ2VBY3Rpb25UeXBlID0gZXhwb3J0cy5lUGFnZUFjdGlvblR5cGUgfHwgKGV4cG9ydHMuZVBhZ2VBY3Rpb25UeXBlID0ge30pKTtcclxudmFyIEZsb3dPdXRjb21lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmxvd091dGNvbWUob3V0Y29tZSkge1xyXG4gICAgICAgIHRoaXMuRGV2ZWxvcGVyTmFtZSA9IG91dGNvbWUuZGV2ZWxvcGVyTmFtZTtcclxuICAgICAgICB0aGlzLklkID0gb3V0Y29tZS5pZDtcclxuICAgICAgICB0aGlzLklzQnVsa0FjdGlvbiA9IG91dGNvbWUuaXNCdWxrQWN0aW9uO1xyXG4gICAgICAgIHRoaXMuSXNPdXQgPSBvdXRjb21lLmlzT3V0O1xyXG4gICAgICAgIHRoaXMuTGFiZWwgPSBvdXRjb21lLmxhYmVsO1xyXG4gICAgICAgIHRoaXMuT3JkZXIgPSBvdXRjb21lLm9yZGVyO1xyXG4gICAgICAgIHRoaXMuUGFnZUFjdGlvbkJpbmRpbmdUeXBlID0gb3V0Y29tZS5wYWdlQWN0aW9uQmluZGluZ1R5cGU7XHJcbiAgICAgICAgdGhpcy5QYWdlQWN0aW9uVHlwZSA9IG91dGNvbWUucGFnZUFjdGlvblR5cGU7XHJcbiAgICAgICAgdGhpcy5QYWdlT2JqZWN0QmluZGluZ0lkID0gb3V0Y29tZS5wYWdlT2JqZWN0QmluZGluZ0lkO1xyXG4gICAgICAgIHRoaXMuQXR0cmlidXRlcyA9IHt9O1xyXG4gICAgICAgIGlmIChvdXRjb21lLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKG91dGNvbWUuYXR0cmlidXRlcyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5BdHRyaWJ1dGVzW2tleV0gPSBuZXcgRmxvd0F0dHJpYnV0ZV8xLkZsb3dBdHRyaWJ1dGUoa2V5LCBvdXRjb21lLmF0dHJpYnV0ZXNba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5PdXRjb21lID0gb3V0Y29tZTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T3V0Y29tZS5wcm90b3R5cGUsIFwiZGV2ZWxvcGVyTmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPdXRjb21lLnByb3RvdHlwZSwgXCJpZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLklkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T3V0Y29tZS5wcm90b3R5cGUsIFwiaXNCdWxrQWN0aW9uXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuSXNCdWxrQWN0aW9uO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T3V0Y29tZS5wcm90b3R5cGUsIFwiaXNPdXRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Jc091dDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd091dGNvbWUucHJvdG90eXBlLCBcImxhYmVsXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuTGFiZWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPdXRjb21lLnByb3RvdHlwZSwgXCJvcmRlclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLk9yZGVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T3V0Y29tZS5wcm90b3R5cGUsIFwicGFnZUFjdGlvbkJpbmRpbmdUeXBlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuUGFnZUFjdGlvbkJpbmRpbmdUeXBlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T3V0Y29tZS5wcm90b3R5cGUsIFwicGFnZUFjdGlvblR5cGVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5QYWdlQWN0aW9uVHlwZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd091dGNvbWUucHJvdG90eXBlLCBcInBhZ2VPYmplY3RCaW5kaW5nSWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5QYWdlT2JqZWN0QmluZGluZ0lkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T3V0Y29tZS5wcm90b3R5cGUsIFwiYXR0cmlidXRlc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkF0dHJpYnV0ZXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRmxvd091dGNvbWUucHJvdG90eXBlLmlGbG93T3V0Y29tZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5PdXRjb21lO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGbG93T3V0Y29tZTtcclxufSgpKTtcclxuZXhwb3J0cy5GbG93T3V0Y29tZSA9IEZsb3dPdXRjb21lO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XHJcbnJlcXVpcmUoXCIuL0Zsb3dDb250ZXh0TWVudS5jc3NcIik7XHJcbnZhciBGbG93Q29udGV4dE1lbnUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRmxvd0NvbnRleHRNZW51LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRmxvd0NvbnRleHRNZW51KHByb3BzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuZGlzcGxheVN0eWxlID0ge307XHJcbiAgICAgICAgX3RoaXMubWVudUl0ZW1zID0gW107XHJcbiAgICAgICAgX3RoaXMuc2hvd0NvbnRleHRNZW51ID0gX3RoaXMuc2hvd0NvbnRleHRNZW51LmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLmhpZGVDb250ZXh0TWVudSA9IF90aGlzLmhpZGVDb250ZXh0TWVudS5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5wb3NpdGlvbkNvbnRleHRNZW51ID0gX3RoaXMucG9zaXRpb25Db250ZXh0TWVudS5iaW5kKF90aGlzKTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBGbG93Q29udGV4dE1lbnUucHJvdG90eXBlLnNldE1lbnUgPSBmdW5jdGlvbiAobWVudSkge1xyXG4gICAgICAgIHRoaXMubWVudSA9IG1lbnU7XHJcbiAgICB9O1xyXG4gICAgRmxvd0NvbnRleHRNZW51LnByb3RvdHlwZS5wb3NpdGlvbkNvbnRleHRNZW51ID0gZnVuY3Rpb24gKG1vdXNlWCwgbW91c2VZKSB7XHJcbiAgICAgICAgdmFyIG1lbnVQb3N0aW9uID0ge307XHJcbiAgICAgICAgaWYgKG1vdXNlWCA8ICh3aW5kb3cuaW5uZXJXaWR0aCAvIDIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVN0eWxlLmxlZnQgPSAobW91c2VYIC0gMTApOyAvLyArIFwicHhcIjsgXHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVN0eWxlLnJpZ2h0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5U3R5bGUubGVmdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5U3R5bGUucmlnaHQgPSAod2luZG93LmlubmVyV2lkdGggLSAobW91c2VYICsgMTApKTsgLy8gKyBcInB4XCI7IFxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobW91c2VZIDwgKHdpbmRvdy5pbm5lckhlaWdodCAvIDIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVN0eWxlLnRvcCA9IChtb3VzZVkgLSAxMCk7IC8vICsgXCJweFwiOyBcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5U3R5bGUuYm90dG9tID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5U3R5bGUudG9wID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlTdHlsZS5ib3R0b20gPSAod2luZG93LmlubmVySGVpZ2h0IC0gKG1vdXNlWSArIDEwKSkgKyBcInB4XCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGlzcGxheVN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICB9O1xyXG4gICAgRmxvd0NvbnRleHRNZW51LnByb3RvdHlwZS5zaG93Q29udGV4dE1lbnUgPSBmdW5jdGlvbiAobW91c2VYLCBtb3VzZVksIG1lbnVJdGVtcykge1xyXG4gICAgICAgIGlmIChtZW51SXRlbXMuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgdmFyIG1lbnVJdGVtQXJyYXlfMSA9IFtdO1xyXG4gICAgICAgICAgICBtZW51SXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgbWVudUl0ZW1BcnJheV8xLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLm1lbnVJdGVtcyA9IG1lbnVJdGVtQXJyYXlfMTtcclxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkNvbnRleHRNZW51KG1vdXNlWCwgbW91c2VZKTtcclxuICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGbG93Q29udGV4dE1lbnUucHJvdG90eXBlLmhpZGVDb250ZXh0TWVudSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmRpc3BsYXlTdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgdGhpcy5tZW51SXRlbXMgPSBbXTtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0NvbnRleHRNZW51LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiY21cIiwgb25Nb3VzZUxlYXZlOiB0aGlzLmhpZGVDb250ZXh0TWVudSwgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMuZGlzcGxheVN0eWxlLmxlZnQsXHJcbiAgICAgICAgICAgICAgICByaWdodDogdGhpcy5kaXNwbGF5U3R5bGUucmlnaHQsXHJcbiAgICAgICAgICAgICAgICB0b3A6IHRoaXMuZGlzcGxheVN0eWxlLnRvcCxcclxuICAgICAgICAgICAgICAgIGJvdHRvbTogdGhpcy5kaXNwbGF5U3R5bGUuYm90dG9tLFxyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogdGhpcy5kaXNwbGF5U3R5bGUuZGlzcGxheVxyXG4gICAgICAgICAgICB9LCByZWY6IGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiAoX3RoaXMuc2V0TWVudShlbGVtZW50KSk7IH0gfSxcclxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInVsXCIsIHsgY2xhc3NOYW1lOiBcImNtLWxpc3RcIiB9LCB0aGlzLm1lbnVJdGVtcykpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmxvd0NvbnRleHRNZW51O1xyXG59KFJlYWN0LkNvbXBvbmVudCkpO1xyXG5leHBvcnRzLmRlZmF1bHQgPSBGbG93Q29udGV4dE1lbnU7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBlQ29udGVudFR5cGUsIEZsb3dEaXNwbGF5Q29sdW1uLCBGbG93T2JqZWN0RGF0YSwgRmxvd09iamVjdERhdGFQcm9wZXJ0eSwgbW9kYWxEaWFsb2dCdXR0b24gfSBmcm9tIFwiZmxvdy1jb21wb25lbnQtbW9kZWxcIjtcclxuaW1wb3J0IENvbHVtbkZpbHRlciBmcm9tIFwiLi9Db2x1bW5GaWx0ZXJcIjtcclxuaW1wb3J0IFNlYXJjaEZpbHRlclRhYmxlIGZyb20gXCIuL1NlYXJjaEZpbHRlclRhYmxlXCI7XHJcbmltcG9ydCBGaWx0ZXJDb25maWdGb3JtIGZyb20gXCIuL0ZpbHRlckNvbmZpZ0Zvcm1cIjtcclxuaW1wb3J0IENvbHVtbkNyaXRlcmlhLCB7IGVDb2x1bW5Db21wYXJhdG9yIH0gZnJvbSBcIi4vQ29sdW1uQ3JpdGVyaWFcIjtcclxuaW1wb3J0IFJvd0l0ZW0gZnJvbSBcIi4vUm93SXRlbVwiO1xyXG5cclxuZXhwb3J0IGVudW0gZUZpbHRlckV2ZW50IHtcclxuICAgIG5vbmUgPSAwLFxyXG4gICAgc29ydCA9IDEsXHJcbiAgICBmaWx0ZXIgPSAyXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIGVTb3J0RGlyZWN0aW9uIHtcclxuICAgIG5vbmUgPSAwLFxyXG4gICAgYXNjZW5kaW5nID0gMSxcclxuICAgIGRlc2NlbmRpbmcgPSAtMVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2x1bW5GaWx0ZXJzIHtcclxuICAgIFxyXG4gICAgcHJpdmF0ZSBpdGVtczogTWFwPHN0cmluZyxDb2x1bW5GaWx0ZXI+ID0gbmV3IE1hcCgpO1xyXG4gICAgcGFyZW50OiBTZWFyY2hGaWx0ZXJUYWJsZTtcclxuXHJcbiAgICBkaWFsb2c6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQ6IFNlYXJjaEZpbHRlclRhYmxlKSB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XHJcblxyXG4gICAgICAgIHRoaXMubm90aWZ5ID0gdGhpcy5ub3RpZnkuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5nZXRTb3J0SWNvbiA9IHRoaXMuZ2V0U29ydEljb24uYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmdldEZpbHRlckljb24gPSB0aGlzLmdldEZpbHRlckljb24uYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zb3J0Q2xpY2tlZCA9IHRoaXMuc29ydENsaWNrZWQuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmZpbHRlckNsaWNrZWQgPSB0aGlzLmZpbHRlckNsaWNrZWQuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zYXZlRmlsdGVyID0gdGhpcy5zYXZlRmlsdGVyLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5jYW5jZWxGaWx0ZXIgPSB0aGlzLmNhbmNlbEZpbHRlci5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLm1hdGNoZXNDcml0ZXJpYSA9IHRoaXMubWF0Y2hlc0NyaXRlcmlhLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc3RvcmVzIC8gZGVsZXRlcyBhIHJlZiB0byB0aGUgY2hpbGQgZGlhbG9nIGNvbXBvbmVudFxyXG4gICAgc2V0RGlhbG9nKGVsZW1lbnQ6IGFueSkge1xyXG4gICAgICAgIHRoaXMuZGlhbG9nID0gZWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvLyB0aGlzIGlzIGNhbGxlZCB3aGVuIGluZGl2aWR1YWwgZmlsdGVycyBjaGFuZ2VcclxuICAgIG5vdGlmeShrZXk6IHN0cmluZywgZXZlbnQ6IGVGaWx0ZXJFdmVudCkge1xyXG4gICAgICAgIHRoaXMucGFyZW50LmZpbHRlcnNDaGFuZ2VkKGtleSxldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0KGtleTogc3RyaW5nKSA6IENvbHVtbkZpbHRlciB7XHJcbiAgICAgICAgaWYodGhpcy5pdGVtcy5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5nZXQoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGhhcyhrZXk6IHN0cmluZykgOiBib29sZWFuIHtcclxuICAgICAgICBpZih0aGlzLml0ZW1zLmhhcyhrZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzb3J0Q2xpY2tlZChrZXk6IHN0cmluZyl7XHJcbiAgICAgICAgaWYoIXRoaXMuaXRlbXMuaGFzKGtleSkpIHtcclxuICAgICAgICAgICAgdGhpcy5pdGVtcy5zZXQoa2V5LG5ldyBDb2x1bW5GaWx0ZXIoa2V5LHRoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKChpdGVtOiBDb2x1bW5GaWx0ZXIpID0+IHtcclxuICAgICAgICAgICAgLy8gZXhjbHVkZSBjdXJyZW50XHJcbiAgICAgICAgICAgIGlmKGl0ZW0ua2V5ICE9PSBrZXkpIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0uc29ydE5vbmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5pdGVtcy5nZXQoa2V5KS5zb3J0VG9nZ2xlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdGhlIGZpbHRlciBidXR0b24gd2FzIHByZXNzZWRcclxuICAgIGZpbHRlckNsaWNrZWQoa2V5OiBzdHJpbmcpe1xyXG5cclxuICAgICAgICBjb25zdCByb290OiBTZWFyY2hGaWx0ZXJUYWJsZSA9IHRoaXMucGFyZW50O1xyXG4gICAgICAgIGlmKCF0aGlzLml0ZW1zLmhhcyhrZXkpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMuc2V0KGtleSxuZXcgQ29sdW1uRmlsdGVyKGtleSx0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgbGV0IGNvbDogRmxvd0Rpc3BsYXlDb2x1bW4gPSB0aGlzLnBhcmVudC5jb2xNYXAuZ2V0KGtleSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5wYXJlbnQubWVzc2FnZUJveC5zaG93TWVzc2FnZUJveChcIkZpbHRlciBcIiArIGNvbC5sYWJlbCxcclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgPEZpbHRlckNvbmZpZ0Zvcm0gXHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdD17cm9vdH1cclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ9e3RoaXN9XHJcbiAgICAgICAgICAgICAgICAgICAga2V5PXtrZXl9XHJcbiAgICAgICAgICAgICAgICAgICAgZGV2ZWxvcGVyTmFtZT17a2V5fVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcj17dGhpcy5pdGVtcy5nZXQoa2V5KX1cclxuICAgICAgICAgICAgICAgICAgICByZWY9eyhlbGVtZW50OiBGaWx0ZXJDb25maWdGb3JtKSA9PiB7dGhpcy5zZXREaWFsb2coZWxlbWVudCkgfX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgIFtuZXcgbW9kYWxEaWFsb2dCdXR0b24oXCJBcHBseVwiLHRoaXMuc2F2ZUZpbHRlciksbmV3IG1vZGFsRGlhbG9nQnV0dG9uKFwiQ2FuY2VsXCIsdGhpcy5jYW5jZWxGaWx0ZXIpXSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsdGVyQ2xlYXIoa2V5OiBzdHJpbmcpe1xyXG4gICAgICAgIHRoaXMuaXRlbXMuZ2V0KGtleSkuY2xlYXJGaWx0ZXJzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZUZpbHRlcigpIHtcclxuICAgICAgICBsZXQga2V5OiBzdHJpbmcgPSB0aGlzLmRpYWxvZy5maWx0ZXIua2V5O1xyXG4gICAgICAgIHRoaXMuZGlhbG9nLmZpbHRlci5jcml0ZXJpYSA9IHRoaXMuZGlhbG9nLm5ld0NyaXRlcmlhO1xyXG4gICAgICAgIHRoaXMuaXRlbXMuc2V0KGtleSx0aGlzLmRpYWxvZy5maWx0ZXIpO1xyXG4gICAgICAgIHRoaXMuZGlhbG9nPXVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLnBhcmVudC5tZXNzYWdlQm94LmhpZGVNZXNzYWdlQm94KCk7XHJcbiAgICAgICAgdGhpcy5ub3RpZnkoa2V5LGVGaWx0ZXJFdmVudC5maWx0ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbmNlbEZpbHRlcigpIHtcclxuICAgICAgICBsZXQga2V5OiBzdHJpbmcgPSB0aGlzLmRpYWxvZy5maWx0ZXIua2V5O1xyXG4gICAgICAgIHRoaXMuZGlhbG9nPXVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLnBhcmVudC5tZXNzYWdlQm94LmhpZGVNZXNzYWdlQm94KCk7XHJcbiAgICAgICAgdGhpcy5ub3RpZnkoa2V5LGVGaWx0ZXJFdmVudC5maWx0ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFNvcnRJY29uKGtleTogc3RyaW5nKSA6IGFueSB7XHJcbiAgICAgICAgaWYodGhpcy5pdGVtcy5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICBzd2l0Y2godGhpcy5pdGVtcy5nZXQoa2V5KS5zb3J0KXtcclxuICAgICAgICAgICAgICAgIGNhc2UgZVNvcnREaXJlY3Rpb24ubm9uZTpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jb2x1bW4taGVhZGVyLWZsYWcgZ2x5cGhpY29uIGdseXBoaWNvbi1iYW4tY2lyY2xlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlOiBhbnkpID0+IHt0aGlzLnNvcnRDbGlja2VkKGtleSl9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJOb3Qgc29ydGVkIC0gY2xpY2sgdG8gdG9nZ2xlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGNhc2UgZVNvcnREaXJlY3Rpb24uYXNjZW5kaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNvbHVtbi1oZWFkZXItZmxhZyBzZnQtY29sdW1uLWhlYWRlci1mbGFnLWhvdCBnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXVwXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlOiBhbnkpID0+IHt0aGlzLnNvcnRDbGlja2VkKGtleSl9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJBc2NlbmRpbmcgLSBjbGljayB0byB0b2dnbGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVTb3J0RGlyZWN0aW9uLmRlc2NlbmRpbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtY29sdW1uLWhlYWRlci1mbGFnIHNmdC1jb2x1bW4taGVhZGVyLWZsYWctaG90IGdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctZG93blwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7dGhpcy5zb3J0Q2xpY2tlZChrZXkpfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiRGVzY2VuZGluZyAtIGNsaWNrIHRvIHRvZ2dsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxzcGFuIFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jb2x1bW4taGVhZGVyLWZsYWcgZ2x5cGhpY29uIGdseXBoaWNvbi1iYW4tY2lyY2xlXCJcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7dGhpcy5zb3J0Q2xpY2tlZChrZXkpfX1cclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIk5vdCBzb3J0ZWQgLSBjbGljayB0byB0b2dnbGVcIlxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RmlsdGVySWNvbihrZXk6IHN0cmluZykgOiBhbnkge1xyXG4gICAgICAgIGlmKHRoaXMuaXRlbXMuaGFzKGtleSkgJiYgdGhpcy5pdGVtcy5nZXQoa2V5KS5jcml0ZXJpYT8ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPEZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtY29sdW1uLWhlYWRlci1idXR0b24gc2Z0LWNvbHVtbi1oZWFkZXItYnV0dG9uLWhvdCBnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlOiBhbnkpID0+IHt0aGlzLmZpbHRlckNsaWNrZWQoa2V5KX19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiQ2hhbmdlIGZpbHRlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNvbHVtbi1oZWFkZXItYnV0dG9uIHNmdC1jb2x1bW4taGVhZGVyLWJ1dHRvbi1ob3QgZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7dGhpcy5maWx0ZXJDbGVhcihrZXkpfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJDbGVhciBmaWx0ZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L0ZyYWdtZW50PlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxzcGFuIFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jb2x1bW4taGVhZGVyLWJ1dHRvbiBnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaFwiXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGU6IGFueSkgPT4ge3RoaXMuZmlsdGVyQ2xpY2tlZChrZXkpfX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHRoaXMgd2lsbCBmaWx0ZXIgdGhlIHBhc3NlZCBzb3VyY2UgbWFwIGJhc2VkIG9uIHRoZSBjdXJyZW50IGZpbHRlcnMgYW5kIHJldHVybiBhIG5ldyBtYXAgb2YgbWF0Y2hlcy5cclxuICAgIGZpbHRlcihzb3VyY2U6IE1hcDxzdHJpbmcsUm93SXRlbT4pIDogTWFwPHN0cmluZyxSb3dJdGVtPiB7XHJcbiAgICAgICAgbGV0IG1hdGNoZXM6IE1hcDxzdHJpbmcsUm93SXRlbT4gPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgc291cmNlLmZvckVhY2goKGl0ZW06IFJvd0l0ZW0sIGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMubWF0Y2hlc0NyaXRlcmlhKGl0ZW0pKSB7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVzLnNldChrZXksdW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBtYXRjaGVzO1xyXG4gICAgICAgIC8vcmV0dXJuIG5ldyBNYXAoQXJyYXkuZnJvbShzb3VyY2UpLmZpbHRlcih0aGlzLm1hdGNoZXNDcml0ZXJpYSkpO1xyXG4gICAgfVxyXG5cclxuICAgIG1hdGNoZXNDcml0ZXJpYSh2YWx1ZTogUm93SXRlbSkgOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgb2JqRGF0YTogRmxvd09iamVjdERhdGEgPSB2YWx1ZS5vYmplY3REYXRhO1xyXG4gICAgICAgIGxldCBtYXRjaGVzOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8gZWFjaCBpdGVtIHJlcHJlc2VudHMgYSBjb2x1bW5cclxuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goKGl0ZW06IENvbHVtbkZpbHRlcikgPT4ge1xyXG4gICAgICAgICAgICAvLyBlYWNoIGNyaXRlcmlhIG5lZWRzIHRvIHBhc3NcclxuICAgICAgICAgICAgaXRlbS5jcml0ZXJpYS5mb3JFYWNoKChjcml0ZXJpYTogQ29sdW1uQ3JpdGVyaWEpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCB2YWw6IHN0cmluZyA9IChvYmpEYXRhLnByb3BlcnRpZXNbaXRlbS5rZXldLnZhbHVlIGFzIHN0cmluZykudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgIGxldCBjcml0OiBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgY3JpdGVyaWEudmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjcml0ID0gKGNyaXRlcmlhLnZhbHVlIGFzIHN0cmluZykudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN3aXRjaChjcml0ZXJpYS5jb21wYXJhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlQ29sdW1uQ29tcGFyYXRvci5lcXVhbFRvOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih2YWwgIT09IGNyaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXM9ZmFsc2U7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZUNvbHVtbkNvbXBhcmF0b3Iubm90RXF1YWxUbzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYodmFsID09PSBjcml0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzPWZhbHNlOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGVDb2x1bW5Db21wYXJhdG9yLmNvbnRhaW5zOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih2YWwuaW5kZXhPZihjcml0KSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXM9ZmFsc2U7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZUNvbHVtbkNvbXBhcmF0b3Iuc3RhcnRzV2l0aDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXZhbC5zdGFydHNXaXRoKGNyaXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzPWZhbHNlOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGVDb2x1bW5Db21wYXJhdG9yLmVuZHNXaXRoOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighdmFsLmVuZHNXaXRoKGNyaXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzPWZhbHNlOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGVDb2x1bW5Db21wYXJhdG9yLm5vdENvbnRhaW5zOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih2YWwuaW5kZXhPZihjcml0KSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzPWZhbHNlOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGVDb2x1bW5Db21wYXJhdG9yLmluOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NyaXRlcmlhLnZhbHVlIHdpbGwgYmUgYSBtYXAgb2YgYWxsb3dhYmxlIHZhbHVlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighIGNyaXRlcmlhLnZhbHVlLmhhcyhvYmpEYXRhLnByb3BlcnRpZXNbaXRlbS5rZXldLnZhbHVlIGFzIHN0cmluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXM9ZmFsc2U7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZUNvbHVtbkNvbXBhcmF0b3Iubm90SW46XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY3JpdGVyaWEudmFsdWUgd2lsbCBiZSBhIG1hcCBvZiBhbGxvd2FibGUgdmFsdWVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNyaXRlcmlhLnZhbHVlLmhhcyhvYmpEYXRhLnByb3BlcnRpZXNbaXRlbS5rZXldLnZhbHVlIGFzIHN0cmluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXM9ZmFsc2U7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgXHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcz1mYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U29ydENvbHVtbigpIDogQ29sdW1uRmlsdGVyIHtcclxuICAgICAgICBsZXQgc29ydENvbHVtbiA6IENvbHVtbkZpbHRlcjtcclxuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goKGNvbCA6IENvbHVtbkZpbHRlcikgPT4ge1xyXG4gICAgICAgICAgICBpZihjb2wuc29ydCAhPT0gZVNvcnREaXJlY3Rpb24ubm9uZSkge1xyXG4gICAgICAgICAgICAgICAgc29ydENvbHVtbiA9IGNvbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBzb3J0Q29sdW1uO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHRoaXMgd2lsbCBzb3J0IHRoZSBwYXNzZWQgbWFwIGJhc2VkIG9uIHRoZSBjdXJyZW50IGZpbHRlcidzIHNvcnRzIGFuZCByZXR1cm4gYSBuZXcgbWFwXHJcbiAgICBzb3J0KGl0ZW1zOiBNYXA8c3RyaW5nLFJvd0l0ZW0+LHNvdXJjZTogTWFwPHN0cmluZyxSb3dJdGVtPikgOiBNYXA8c3RyaW5nLFJvd0l0ZW0+IHtcclxuICAgICAgICBsZXQgc29ydENvbHVtbiA6IENvbHVtbkZpbHRlciA9IHRoaXMuZ2V0U29ydENvbHVtbigpO1xyXG5cclxuICAgICAgICBsZXQgY2FuZGlkYXRlczogTWFwPHN0cmluZyxSb3dJdGVtPiA9IG5ldyBNYXAoQXJyYXkuZnJvbShzb3VyY2UpLmZpbHRlcihpdGVtID0+IHtcclxuICAgICAgICAgICAgaWYoaXRlbXMuaGFzKGl0ZW1bMF0pKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHNvcnRDb2x1bW4pIHtcclxuICAgICAgICAgICAgbGV0IGNvbERlZjogRmxvd0Rpc3BsYXlDb2x1bW4gPSB0aGlzLnBhcmVudC5jb2xNYXAuZ2V0KHNvcnRDb2x1bW4ua2V5KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBzb3J0ZWQ6IGFueVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgc3dpdGNoKGNvbERlZi5jb250ZW50VHlwZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnREYXRlVGltZTpcclxuICAgICAgICAgICAgICAgICAgICBzb3J0ZWQgPSBBcnJheS5mcm9tKGNhbmRpZGF0ZXMpLnNvcnQoKGE6IGFueSxiOiBhbnkpID0+IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhWzFdLm9iamVjdERhdGEucHJvcGVydGllc1tzb3J0Q29sdW1uLmtleV0udmFsdWUgLSBiWzFdLm9iamVjdERhdGEucHJvcGVydGllc1tzb3J0Q29sdW1uLmtleV0udmFsdWVcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbGxhdG9yID0gbmV3IEludGwuQ29sbGF0b3IodW5kZWZpbmVkLCB7bnVtZXJpYzogdHJ1ZSwgc2Vuc2l0aXZpdHk6ICdiYXNlJ30pO1xyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRlZCA9IEFycmF5LmZyb20oY2FuZGlkYXRlcykuc29ydCgoYTogYW55LGI6IGFueSkgPT4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxhdG9yLmNvbXBhcmUoYVsxXS5vYmplY3REYXRhLnByb3BlcnRpZXNbc29ydENvbHVtbi5rZXldLnZhbHVlLGJbMV0ub2JqZWN0RGF0YS5wcm9wZXJ0aWVzW3NvcnRDb2x1bW4ua2V5XS52YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIGlmKHNvcnRDb2x1bW4uc29ydCA9PT0gZVNvcnREaXJlY3Rpb24uZGVzY2VuZGluZykge1xyXG4gICAgICAgICAgICAgICAgc29ydGVkID0gc29ydGVkLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbGV0IHJlc3VsdHM6IE1hcDxzdHJpbmcsUm93SXRlbT4gPSBuZXcgTWFwKHNvcnRlZCk7XHJcbiAgICAgICAgICAgIHJlc3VsdHMuZm9yRWFjaCgoaXRlbTogUm93SXRlbSwga2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdHMuc2V0KGtleSx1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHNcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Rm9yU3RvcmFnZSgpIDogc3RyaW5nIHtcclxuICAgICAgICBsZXQgZmlsdGVyczogYW55W10gPSBbXTtcclxuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goKGl0ZW06IENvbHVtbkZpbHRlcikgPT4ge1xyXG4gICAgICAgICAgICBmaWx0ZXJzLnB1c2goaXRlbS5nZXRGb3JTdG9yYWdlKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShmaWx0ZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkRnJvbVN0b3JhZ2UoZmlsdGVyczogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtcz1uZXcgTWFwKCk7XHJcbiAgICAgICAgbGV0IHNyYzogYW55W10gPSBKU09OLnBhcnNlKGZpbHRlcnMpO1xyXG4gICAgICAgIGlmKHNyYyl7XHJcbiAgICAgICAgICAgIHNyYy5mb3JFYWNoKChmaWx0ZXI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyID0gSlNPTi5wYXJzZShmaWx0ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYoZmlsdGVyLmtleSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5zZXQoZmlsdGVyLmtleSxuZXcgQ29sdW1uRmlsdGVyKGZpbHRlci5rZXksdGhpcyxmaWx0ZXIuc29ydCwgZmlsdGVyLmNyaXRlcmlhKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0iLCJleHBvcnQgKiBmcm9tICcuL1NlYXJjaEZpbHRlclRhYmxlJzsiLCJpbXBvcnQgUmVhY3QsIHsgQ1NTUHJvcGVydGllcyB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7IGVMb2FkaW5nU3RhdGUsIEZsb3dDb21wb25lbnQsIEZsb3dPYmplY3REYXRhQXJyYXksIEZsb3dPYmplY3REYXRhLCBGbG93T3V0Y29tZSwgIEZsb3dEaXNwbGF5Q29sdW1uLCBGbG93TWVzc2FnZUJveCwgbW9kYWxEaWFsb2dCdXR0b24sIGVDb250ZW50VHlwZSwgRmxvd09iamVjdERhdGFQcm9wZXJ0eSB9IGZyb20gJ2Zsb3ctY29tcG9uZW50LW1vZGVsJztcclxuaW1wb3J0IEZsb3dDb250ZXh0TWVudSBmcm9tICdmbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRGlhbG9ncy9GbG93Q29udGV4dE1lbnUnO1xyXG5pbXBvcnQgUm93SXRlbSBmcm9tICcuL1Jvd0l0ZW0nO1xyXG5pbXBvcnQgQ2VsbEl0ZW0gZnJvbSAnLi9DZWxsSXRlbSc7XHJcbmltcG9ydCBTZWFyY2hGaWx0ZXJUYWJsZVJvdyBmcm9tICcuL1NlYXJjaEZpbHRlclRhYmxlUm93JztcclxuaW1wb3J0ICcuL1NlYXJjaEZpbHRlclRhYmxlLmNzcyc7XHJcbmltcG9ydCBTZWFyY2hGaWx0ZXJUYWJsZUhlYWRlcnMgZnJvbSAnLi9TZWFyY2hGaWx0ZXJUYWJsZUhlYWRlcnMnO1xyXG5pbXBvcnQgQ29sdW1uRmlsdGVycywgeyBlRmlsdGVyRXZlbnQsIGVTb3J0RGlyZWN0aW9uIH0gZnJvbSAnLi9Db2x1bW5GaWx0ZXJzJztcclxuaW1wb3J0IFNlYXJjaEZpbHRlclRhYmxlRm9vdGVyIGZyb20gJy4vU2VhcmNoRmlsdGVyVGFibGVGb290ZXInO1xyXG5pbXBvcnQgTW9kZWxFeHBvcnRlciBmcm9tICcuL01vZGVsRXhwb3J0ZXInO1xyXG5pbXBvcnQgU2VhcmNoRmlsdGVyVGFibGVIZWFkZXJCdXR0b25zIGZyb20gJy4vU2VhcmNoRmlsdGVyVGFibGVIZWFkZXJCdXR0b25zJztcclxuaW1wb3J0IFNlYXJjaEZpbHRlclRhYmxlUmliYm9uIGZyb20gJy4vU2VhcmNoRmlsdGVyVGFibGVSaWJib24nO1xyXG5cclxuXHJcbi8vZGVjbGFyZSBjb25zdCBtYW55d2hvOiBJTWFueXdobztcclxuZGVjbGFyZSBjb25zdCBtYW55d2hvOiBhbnk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hGaWx0ZXJUYWJsZSBleHRlbmRzIEZsb3dDb21wb25lbnQge1xyXG4gICAgdmVyc2lvbjogc3RyaW5nPVwiMS4wLjBcIjtcclxuICAgIGNvbnRleHQ6IGFueTtcclxuICAgXHJcbiAgICBjb250ZXh0TWVudTogRmxvd0NvbnRleHRNZW51O1xyXG4gICAgbWVzc2FnZUJveDogRmxvd01lc3NhZ2VCb3g7XHJcbiAgIFxyXG4gICAgLy8gdGhpcyBjb250YWlucyB0aGUgbWFzdGVyIGNvcHkgb2YgdGhlIG1vZGVsIGRhdGEsIGl0IGRvZXNuJ3QgY2hhbmdlIHVubGVzcyBkYXRhIHJlbG9hZGVkXHJcbiAgICByb3dNYXA6IE1hcDxzdHJpbmcsYW55PiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICAvLyB0aGlzIGNvbnRhaW5zIHRoZSBkaXNwbGF5IHRpbWUgc3Vic2V0IG9mIHJvd01hcCB3aGljaCBpcyBmaWx0ZXJlZCAmIHNvcnRlZCwgaXQgY2hhbmdlcyB3aXRoIGVhY2ggcXVlcnkgZXRjLCAgVXNlZCB0byBidWlsZCB0aGUgYWN0dWFsIHJvd3NcclxuICAgIGN1cnJlbnRSb3dNYXA6IE1hcDxzdHJpbmcsYW55PiA9IG5ldyBNYXAoKTtcclxuICAgIC8vY3VycmVudFJvd01hcDogQXJyYXk8c3RyaW5nPiA9IFtdOy8vTWFwPHN0cmluZyxhbnk+ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIC8vIHRoaXMgaG9sZHMgdGhlIG1heCBpdGVtcyBwZXIgcGFnZVxyXG4gICAgbWF4UGFnZVJvd3M6IG51bWJlciA9IDU7XHJcblxyXG4gICAgLy8gdGhpcyBob2xkcyB0aGUgaXRlbXMgaW4gcGFnZXNcclxuICAgIGN1cnJlbnRSb3dQYWdlczogQXJyYXk8TWFwPHN0cmluZyxhbnk+PiA9IFtdO1xyXG4gICAgXHJcbiAgICAvLyB0aGlzIGhvbGRzIHRoZSBjdXJyZW50IHBhZ2luYXRpb24gcGFnZSBudW1iZXJcclxuICAgIGN1cnJlbnRSb3dQYWdlOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIC8vIHRoaXMgY29udGFpbnMgdGhlIGRpc3BsYXkgdGltZSBzdWJzZXQgb2YgY3VycmVudFJvd01hcCB3aGljaCBpcyBzZWxlY3RlZCwgZWFjaCBxdWVyeSByZW1vdmVzIGFueSBpdGVtcyBubyBsb25nZXIgaW4gcmVzdWx0c1xyXG4gICAgc2VsZWN0ZWRSb3dNYXA6IE1hcDxzdHJpbmcsYW55PiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICAvLyB0aGVzZSBhcmUgdGhlIGNoaWxkIHJvdyBSZWFjdCBvYmplY3RzLCB0aGV5IGFyZSByZS1wb3B1bGF0ZWQgd2l0aCBlYWNoIGZpbHRlciwgc2VhcmNoIGV0Y1xyXG4gICAgcm93czogTWFwPHN0cmluZyxTZWFyY2hGaWx0ZXJUYWJsZVJvdz4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgLy8gdGhlc2UgYXJlIHRoZSBodG1sIGNoaWxkIGVsZW1lbnRzIHVzZWQgaW4gcmVuZGVyLiAgQnVpbHQgZnJvbSBjdXJyZW50Um93TWFwXHJcbiAgICByb3dFbGVtZW50czogYW55W107XHJcblxyXG4gICAgLy8gdGhpcyBpcyB0aGUgY29sdW1uIGRlZmluaXRpb24gbWFwLCBpdCBkb2Vzbid0IGNoYW5nZSB1bmxlc3MgZGF0YSByZWxvYWRlZFxyXG4gICAgY29sTWFwOiBNYXA8c3RyaW5nLEZsb3dEaXNwbGF5Q29sdW1uPiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICAvLyB0aGlzIGlzIHRoZSBjb2x1bW4gdmFsdWUgbWFwLCBpdCBjb25hdGlucyBhbGwgcG9zc2libGUgdmFsdWVzIGZvciBlYWNoIGNvbHVtbiwgaXQgZG9lc24ndCBjaGFuZ2UgdW5sZXNzIGRhdGEgcmVsb2FkZWRcclxuICAgIGNvbFZhbE1hcDogTWFwPHN0cmluZyxNYXA8YW55LGFueT4+ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIC8vIHRoaXMgaXMgdGhlIHRhYmxlIGhlYWRlcnMgUmVhY3QgY29tcG9uZW50XHJcbiAgICBoZWFkZXJzOiBTZWFyY2hGaWx0ZXJUYWJsZUhlYWRlcnM7XHJcblxyXG4gICAgLy8gdGhpcyBpcyB0aGUgdGFibGUgaGVhZGVycyBodG1sIGVsZW1lbnRcclxuICAgIGhlYWRlcnNFbGVtZW50OiBhbnk7XHJcblxyXG4gICAgLy8gdGhpcyBpcyB0aGUgZm9vdGVyIFJlYWN0IGNvbXBvbmVudFxyXG4gICAgcmliYm9uOiBTZWFyY2hGaWx0ZXJUYWJsZVJpYmJvbjtcclxuXHJcbiAgICAvLyB0aGlzIGlzIHRoZSBmb290ZXIgaHRtbCBlbGVtZW50XHJcbiAgICByaWJib25FbGVtZW50OiBhbnk7XHJcblxyXG4gICAgLy8gdGhpcyBpcyB0aGUgZm9vdGVyIFJlYWN0IGNvbXBvbmVudFxyXG4gICAgZm9vdGVyOiBTZWFyY2hGaWx0ZXJUYWJsZUhlYWRlcnM7XHJcblxyXG4gICAgLy8gdGhpcyBpcyB0aGUgZm9vdGVyIGh0bWwgZWxlbWVudFxyXG4gICAgZm9vdGVyRWxlbWVudDogYW55O1xyXG5cclxuICAgIC8vIHRoZXNlIGFyZSB0aGUgY2hpbGQgY29sdW1uIFJlYWN0IG9iamVjdHMsIGl0IGRvZXNuJ3QgY2hhbmdlIHVubGVzcyBkYXRhIHJlbG9hZGVkXHJcbiAgICBjb2xzOiBNYXA8c3RyaW5nLGFueT4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgLy8gdGhlc2UgYXJlIHRoZSBodG1sIGNvbHVtbiBoZWFkZXIgY2hpbGQgZWxlbWVudHMgdXNlZCBpbiByZW5kZXIuICBCdWlsdCBmcm9tIGNvbE1hcFxyXG4gICAgY29sRWxlbWVudHM6IGFueVtdO1xyXG5cclxuICAgIC8vIGNvbnRlbnQgaG9sZGVyIHRvIGF2b2lkIGJsYW5rIHBhZ2VzIGR1cmluZyBtb3ZlcyBcclxuICAgIGxhc3RDb250ZW50OiBhbnkgPSAoPGRpdj48L2Rpdj4pO1xyXG5cclxuICAgIC8vIHRoZXNlIGFyZSB0aGUgZmlsdGVyICYgc29ydCBjb250cm9sbGVyc1xyXG4gICAgZmlsdGVyczogQ29sdW1uRmlsdGVycyA9IG5ldyBDb2x1bW5GaWx0ZXJzKHRoaXMpO1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlTWVzc2FnZSA9IHRoaXMuaGFuZGxlTWVzc2FnZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZmxvd01vdmVkID0gdGhpcy5mbG93TW92ZWQuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLnNob3dDb250ZXh0TWVudSA9IHRoaXMuc2hvd0NvbnRleHRNZW51LmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5oaWRlQ29udGV4dE1lbnUgPSB0aGlzLmhpZGVDb250ZXh0TWVudS5iaW5kKHRoaXMpOyAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5idWlsZENvcmVUYWJsZSA9IHRoaXMuYnVpbGRDb3JlVGFibGUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmJ1aWxkUmliYm9uID0gdGhpcy5idWlsZFJpYmJvbi5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuYnVpbGRGb290ZXIgPSB0aGlzLmJ1aWxkRm9vdGVyLmJpbmQodGhpcyk7XHJcblxyXG4gICAgICAgIHRoaXMuZmlsdGVyc0NoYW5nZWQgPSB0aGlzLmZpbHRlcnNDaGFuZ2VkLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy50b2dnbGVTZWxlY3QgPSB0aGlzLnRvZ2dsZVNlbGVjdC5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLmZpcnN0UGFnZSA9IHRoaXMuZmlyc3RQYWdlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5wcmV2aW91c1BhZ2UgPSB0aGlzLnByZXZpb3VzUGFnZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMubmV4dFBhZ2UgPSB0aGlzLm5leHRQYWdlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5sYXN0UGFnZSA9IHRoaXMubGFzdFBhZ2UuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5tYXhQZXJQYWdlQ2hhbmdlZCA9IHRoaXMubWF4UGVyUGFnZUNoYW5nZWQuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5kb0V4cG9ydCA9IHRoaXMuZG9FeHBvcnQuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5tYXhQYWdlUm93cyA9IHBhcnNlSW50KHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJzZnQtbWF4LVwiICsgdGhpcy5jb21wb25lbnRJZCkgfHwgdGhpcy5nZXRBdHRyaWJ1dGUoXCJQYWdpbmF0aW9uU2l6ZVwiLHVuZGVmaW5lZCkgfHwgXCIxMFwiICk7XHJcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcInNmdC1tYXgtXCIgKyB0aGlzLmNvbXBvbmVudElkLHRoaXMubWF4UGFnZVJvd3MudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICBmaWx0ZXJzQ2hhbmdlZChrZXk6IHN0cmluZywgZXZlbnQ6IGVGaWx0ZXJFdmVudCkge1xyXG4gICAgICAgIHRoaXMuaGVhZGVycy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJzZnQtZmlsdGVycy1cIiArIHRoaXMuY29tcG9uZW50SWQsdGhpcy5maWx0ZXJzLmdldEZvclN0b3JhZ2UoKSk7XHJcbiAgICAgICAgc3dpdGNoKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGNhc2UgZUZpbHRlckV2ZW50LnNvcnQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNvcnRSb3dzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2luYXRlUm93cygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idWlsZFRhYmxlUm93cygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlIGVGaWx0ZXJFdmVudC5maWx0ZXI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlclJvd3MoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc29ydFJvd3MoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFnaW5hdGVSb3dzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkVGFibGVSb3dzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbWF4UGVyUGFnZUNoYW5nZWQobWF4OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLm1heFBhZ2VSb3dzID0gbWF4IHx8IDEwO1xyXG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJzZnQtbWF4LVwiICsgdGhpcy5jb21wb25lbnRJZCx0aGlzLm1heFBhZ2VSb3dzLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHRoaXMucGFnaW5hdGVSb3dzKCk7XHJcbiAgICAgICAgdGhpcy5idWlsZFRhYmxlUm93cygpO1xyXG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBzdG9yZXMgLyBkZWxldGVzIGEgcmVmIHRvIGEgdGFibGUgcm93IGFzIGl0J3MgY3JlYXRlZCBvciBkZXN0cm95ZWRcclxuICAgIHNldFJvdyhrZXk6IHN0cmluZywgZWxlbWVudDogU2VhcmNoRmlsdGVyVGFibGVSb3cpIHtcclxuICAgICAgICBpZihlbGVtZW50KXtcclxuICAgICAgICAgICAgdGhpcy5yb3dzLnNldChrZXksIGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYodGhpcy5yb3dzLmhhcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvd3MuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc3RvcmVzIC8gZGVsZXRlcyBhIHJlZiB0byB0aGUgY29sdW1uIGhlYWRlcnNcclxuICAgIHNldFJpYmJvbihlbGVtZW50OiBTZWFyY2hGaWx0ZXJUYWJsZVJpYmJvbikge1xyXG4gICAgICAgIHRoaXMucmliYm9uID0gZWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBzdG9yZXMgLyBkZWxldGVzIGEgcmVmIHRvIHRoZSBjb2x1bW4gaGVhZGVyc1xyXG4gICAgc2V0SGVhZGVycyhlbGVtZW50OiBTZWFyY2hGaWx0ZXJUYWJsZUhlYWRlcnMpIHtcclxuICAgICAgICB0aGlzLmhlYWRlcnMgPSBlbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHN0b3JlcyAvIGRlbGV0ZXMgYSByZWYgdG8gdGhlIGZvb3RlciBjb21wb25lbnRcclxuICAgIHNldEZvb3RlcihlbGVtZW50OiBTZWFyY2hGaWx0ZXJUYWJsZUZvb3Rlcikge1xyXG4gICAgICAgIHRoaXMuZm9vdGVyID0gZWxlbWVudDtcclxuICAgIH1cclxuXHJcbiBcclxuICAgIGFzeW5jIGZsb3dNb3ZlZCh4aHI6IGFueSwgcmVxdWVzdDogYW55KSB7XHJcbiAgICAgICAgbGV0IG1lOiBhbnkgPSB0aGlzO1xyXG4gICAgICAgIGlmKHhoci5pbnZva2VUeXBlPT09XCJGT1JXQVJEXCIpIHtcclxuICAgICAgICAgICAgaWYodGhpcy5sb2FkaW5nU3RhdGUgIT09IGVMb2FkaW5nU3RhdGUucmVhZHkpe1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7bWUuZmxvd01vdmVkKHhociwgcmVxdWVzdCl9LDUwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1heFBhZ2VSb3dzID0gcGFyc2VJbnQoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInNmdC1tYXgtXCIgKyB0aGlzLmNvbXBvbmVudElkKSB8fCB0aGlzLmdldEF0dHJpYnV0ZShcIlBhZ2luYXRpb25TaXplXCIsdW5kZWZpbmVkKSB8fCBcIjEwXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJzLmxvYWRGcm9tU3RvcmFnZShzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwic2Z0LWZpbHRlcnMtXCIgKyB0aGlzLmNvbXBvbmVudElkKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkQ29yZVRhYmxlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlclJvd3MoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc29ydFJvd3MoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRUYWJsZVJvd3MoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICAvL3dpbGwgZ2V0IHRoaXMgZnJvbSBhIGNvbXBvbmVudCBhdHRyaWJ1dGVcclxuICAgICAgICBhd2FpdCBzdXBlci5jb21wb25lbnREaWRNb3VudCgpO1xyXG4gICAgICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmFkZERvbmVMaXN0ZW5lcih0aGlzLmZsb3dNb3ZlZCwgdGhpcy5jb21wb25lbnRJZCk7XHJcbiAgICAgICAgLy8gYnVpbGQgdHJlZVxyXG4gICAgICAgIHRoaXMubWF4UGFnZVJvd3MgPSBwYXJzZUludChzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwic2Z0LW1heC1cIiArIHRoaXMuY29tcG9uZW50SWQgfHwgdGhpcy5nZXRBdHRyaWJ1dGUoXCJQYWdpbmF0aW9uU2l6ZVwiLHVuZGVmaW5lZCkgfHwgXCIxMFwiKSk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJzLmxvYWRGcm9tU3RvcmFnZShzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwic2Z0LWZpbHRlcnMtXCIgKyB0aGlzLmNvbXBvbmVudElkKSk7XHJcbiAgICAgICAgdGhpcy5idWlsZENvcmVUYWJsZSgpO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyUm93cygpO1xyXG4gICAgICAgIHRoaXMuc29ydFJvd3MoKTtcclxuICAgICAgICB0aGlzLmJ1aWxkVGFibGVSb3dzKCk7XHJcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgYXN5bmMgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICAgICAgYXdhaXQgc3VwZXIuY29tcG9uZW50V2lsbFVubW91bnQoKTtcclxuICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5yZW1vdmVEb25lTGlzdGVuZXIodGhpcy5jb21wb25lbnRJZCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIHJlYWRzIHRoZSBtb2RlbFxyXG4gICAgLy8gY29uc3RydWN0cyB0aGUgYSBmbGF0IGEgbWFwIG9mIHJvd3MgcmVhZHkgZm9yIHNlYXJjaGluZywgc29ydGluZyBhbmQgZGlyZWN0IGFjY2Vzc1xyXG4gICAgLy8gYWxzbyBidWlsZHMgdGhlIGRpc3BsYXkgY29sdW1uIG1hcFxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgYnVpbGRDb3JlVGFibGUoKXtcclxuICAgICAgICB0aGlzLnJvd01hcCA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLnJvd3MgPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgICAgIC8vc29ydCBkaXNwbGF5IGNvbHMgb24gb3JkZXJcclxuICAgICAgICBcclxuICAgICAgICBsZXQgY29sczogQXJyYXk8Rmxvd0Rpc3BsYXlDb2x1bW4+ID0gdGhpcy5tb2RlbC5kaXNwbGF5Q29sdW1ucy5zb3J0KChhOiBhbnksYjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaCh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGEuRGlzcGxheU9yZGVyID4gYi5EaXNwbGF5T3JkZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGEuRGlzcGxheU9yZGVyID09PSBiLkRpc3BsYXlPcmRlcjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmNvbE1hcCA9IG5ldyBNYXAoKTtcclxuICAgICAgICBjb2xzLmZvckVhY2goKGNvbDogRmxvd0Rpc3BsYXlDb2x1bW4pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb2xNYXAuc2V0KGNvbC5kZXZlbG9wZXJOYW1lLCBjb2wpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbFZhbE1hcC5zZXQoY29sLmRldmVsb3Blck5hbWUsIG5ldyBNYXAoKSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnJpYmJvbkVsZW1lbnQgPSAoXHJcbiAgICAgICAgICAgIDxTZWFyY2hGaWx0ZXJUYWJsZVJpYmJvbiBcclxuICAgICAgICAgICAgICAgIHJvb3Q9e3RoaXN9XHJcbiAgICAgICAgICAgICAgICByZWY9eyhlbGVtZW50OiBTZWFyY2hGaWx0ZXJUYWJsZVJpYmJvbikgPT4ge3RoaXMuc2V0UmliYm9uKGVsZW1lbnQpfX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmhlYWRlcnNFbGVtZW50ID0gKFxyXG4gICAgICAgICAgICA8U2VhcmNoRmlsdGVyVGFibGVIZWFkZXJzIFxyXG4gICAgICAgICAgICAgICAgcm9vdD17dGhpc31cclxuICAgICAgICAgICAgICAgIHJlZj17KGVsZW1lbnQ6IFNlYXJjaEZpbHRlclRhYmxlSGVhZGVycykgPT4ge3RoaXMuc2V0SGVhZGVycyhlbGVtZW50KX19XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5mb290ZXJFbGVtZW50ID0gKFxyXG4gICAgICAgICAgICA8U2VhcmNoRmlsdGVyVGFibGVGb290ZXIgXHJcbiAgICAgICAgICAgICAgICByb290PXt0aGlzfVxyXG4gICAgICAgICAgICAgICAgcmVmPXsoZWxlbWVudDogU2VhcmNoRmlsdGVyVGFibGVGb290ZXIpID0+IHt0aGlzLnNldEZvb3RlcihlbGVtZW50KX19XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgKTtcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLm1vZGVsLmRhdGFTb3VyY2UuaXRlbXMuZm9yRWFjaCgoaXRlbTogRmxvd09iamVjdERhdGEpID0+IHtcclxuICAgICAgICAgICAgLy9jb25zdHJ1Y3QgSXRlbVxyXG4gICAgICAgICAgICBpZihpdGVtLmlzU2VsZWN0ZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRSb3dNYXAuc2V0KGl0ZW0uaW50ZXJuYWxJZCx1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBub2RlID0gbmV3IFJvd0l0ZW0oKTtcclxuICAgICAgICAgICAgbm9kZS5pZCA9IGl0ZW0uaW50ZXJuYWxJZDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29sTWFwLmZvckVhY2goKGNvbDpGbG93RGlzcGxheUNvbHVtbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgbm9kZS5jb2x1bW5zLnNldChjb2wuZGV2ZWxvcGVyTmFtZSwgbmV3IENlbGxJdGVtKGNvbC5kZXZlbG9wZXJOYW1lLCBpdGVtLnByb3BlcnRpZXNbY29sLmRldmVsb3Blck5hbWVdPy52YWx1ZSBhcyBhbnkpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sVmFsTWFwLmdldChjb2wuZGV2ZWxvcGVyTmFtZSkuc2V0KGl0ZW0ucHJvcGVydGllc1tjb2wuZGV2ZWxvcGVyTmFtZV0/LnZhbHVlLGl0ZW0ucHJvcGVydGllc1tjb2wuZGV2ZWxvcGVyTmFtZV0/LnZhbHVlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBub2RlLm9iamVjdERhdGEgPSBpdGVtO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5yb3dNYXAuc2V0KG5vZGUuaWQsbm9kZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHdlIGp1c3QgbG9hZGVkIHRoZSBjb3JlIHJvdyBkYXRhLCB0cmlnZ2VyIHRoZSBmaWx0ZXJzIHRvIGdlbmVyYXRlIGFuZCBzb3J0IHRoZSBjdXJyZW50Um93TWFwXHJcbiAgICAgICAgdGhpcy5maWx0ZXJSb3dzKCk7XHJcbiAgICAgICAgdGhpcy5zb3J0Um93cygpO1xyXG4gICAgICAgIHRoaXMucGFnaW5hdGVSb3dzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuYnVpbGRSaWJib24oKTtcclxuICAgICAgICB0aGlzLmJ1aWxkRm9vdGVyKCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIGZpbHRlcnMgdGhlIGN1cnJlbnRSb3dNYXBcclxuICAgIGZpbHRlclJvd3MoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Um93TWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGlmICh0aGlzLnJvd01hcC5zaXplID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRSb3dNYXAgPSB0aGlzLmZpbHRlcnMuZmlsdGVyKHRoaXMucm93TWFwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlbW92ZSBhbnkgc2VsZWN0ZWQgaXRlbXMgbm90IGluIHRoZSBjdXJyZW50Um93TWFwXHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFJvd01hcC5mb3JFYWNoKChpdGVtOiBSb3dJdGVtLCBpbnRlcm5hbElkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgaWYoIXRoaXMuY3VycmVudFJvd01hcC5oYXMoaW50ZXJuYWxJZCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRSb3dNYXAuZGVsZXRlKGludGVybmFsSWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc29ydHMgdGhlIGN1cnJlbnRSb3dNYXAgYnkgZ2V0dGluZyB0aGUgY3VycmVudCBzb3J0IGNvbHVtbiBmcm9tIGZpbHRlcnNcclxuICAgIHNvcnRSb3dzKCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRSb3dNYXAuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Um93TWFwID0gdGhpcy5maWx0ZXJzLnNvcnQodGhpcy5jdXJyZW50Um93TWFwLCB0aGlzLnJvd01hcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHRoaXMgZ29lcyB0aHJvdWdoIGN1cnJlbnRSb3dNYXAgYW5kIHNwbGl0cyB0aGVtIGludG8gcGFnZXMgYmFzZWQgb24gbWF4UGFnZVJvd3NcclxuICAgIHBhZ2luYXRlUm93cygpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRSb3dQYWdlcyA9IFtdO1xyXG4gICAgICAgIGxldCBjdXJyZW50UGFnZTogTWFwPHN0cmluZyxSb3dJdGVtPiA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRSb3dNYXAuZm9yRWFjaCgoaXRlbTogUm93SXRlbSxrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBpZihjdXJyZW50UGFnZS5zaXplIDwgdGhpcy5tYXhQYWdlUm93cykge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2Uuc2V0KGtleSx1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Um93UGFnZXMucHVzaChjdXJyZW50UGFnZSk7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZSA9IG5ldyBNYXAoKTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlLnNldChrZXksdW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIGFkZCBhbnkgc3RyYWdnbGVyc1xyXG4gICAgICAgIHRoaXMuY3VycmVudFJvd1BhZ2VzLnB1c2goY3VycmVudFBhZ2UpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFJvd1BhZ2UgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGZpcnN0UGFnZSgpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRSb3dQYWdlID0gMDtcclxuICAgICAgICB0aGlzLmJ1aWxkVGFibGVSb3dzKCk7XHJcbiAgICAgICAgdGhpcy5idWlsZFJpYmJvbigpO1xyXG4gICAgICAgIHRoaXMuYnVpbGRGb290ZXIoKTtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJldmlvdXNQYWdlKCkge1xyXG4gICAgICAgIGlmKHRoaXMuY3VycmVudFJvd1BhZ2UgPiAxKSB7IHRoaXMuY3VycmVudFJvd1BhZ2UgLT0gMSB9IGVsc2UgeyB0aGlzLmN1cnJlbnRSb3dQYWdlID0gMCB9O1xyXG4gICAgICAgIHRoaXMuYnVpbGRUYWJsZVJvd3MoKTtcclxuICAgICAgICB0aGlzLmJ1aWxkUmliYm9uKCk7XHJcbiAgICAgICAgdGhpcy5idWlsZEZvb3RlcigpO1xyXG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZXh0UGFnZSgpIHtcclxuICAgICAgICBpZih0aGlzLmN1cnJlbnRSb3dQYWdlIDwgKHRoaXMuY3VycmVudFJvd1BhZ2VzLmxlbmd0aCAtIDEpKSB7IHRoaXMuY3VycmVudFJvd1BhZ2UgKz0gMSB9IGVsc2UgeyB0aGlzLmN1cnJlbnRSb3dQYWdlID0gdGhpcy5jdXJyZW50Um93UGFnZXMubGVuZ3RoIC0gMSB9O1xyXG4gICAgICAgIHRoaXMuYnVpbGRUYWJsZVJvd3MoKTtcclxuICAgICAgICB0aGlzLmJ1aWxkUmliYm9uKCk7XHJcbiAgICAgICAgdGhpcy5idWlsZEZvb3RlcigpO1xyXG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBsYXN0UGFnZSgpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRSb3dQYWdlID0gdGhpcy5jdXJyZW50Um93UGFnZXMubGVuZ3RoIC0gMSA7XHJcbiAgICAgICAgdGhpcy5idWlsZFRhYmxlUm93cygpO1xyXG4gICAgICAgIHRoaXMuYnVpbGRSaWJib24oKTtcclxuICAgICAgICB0aGlzLmJ1aWxkRm9vdGVyKCk7XHJcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gdG9nZ2xlcyBhbGwgcm93cyBzZWxlY3RlZCBzdGF0dXNcclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgdG9nZ2xlU2VsZWN0QWxsKGV2ZW50OiBhbnkpIHtcclxuICAgICAgICBpZihldmVudC50YXJnZXQuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRSb3dNYXAuZm9yRWFjaCgoaXRlbTogUm93SXRlbSwga2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRSb3dNYXAuc2V0KGtleSxcIlwiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93TWFwLmNsZWFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMucm93cy5mb3JFYWNoKChyb3c6IFNlYXJjaEZpbHRlclRhYmxlUm93KSA9PiB7XHJcbiAgICAgICAgICAgIHJvdy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYnVpbGRSaWJib24oKTtcclxuICAgICAgICB0aGlzLmJ1aWxkRm9vdGVyKCk7XHJcbiAgICAgICAgdGhpcy5zYXZlU2VsZWN0ZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVTZWxlY3QoZXZlbnQ6IGFueSwga2V5OiBzdHJpbmcpIHtcclxuICAgICAgICBpZihldmVudC50YXJnZXQuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93TWFwLnNldChrZXksXCJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93TWFwLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJvd3MuZ2V0KGtleSkuZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICB0aGlzLmJ1aWxkUmliYm9uKCk7XHJcbiAgICAgICAgdGhpcy5idWlsZEZvb3RlcigpO1xyXG4gICAgICAgIHRoaXMuc2F2ZVNlbGVjdGVkKCk7XHJcbiAgICB9XHJcbiAgIFxyXG4gICAgLy8gc3RvcmUgdGhlIHNlbGVjdGVkIGl0ZW1zIHRvIHN0YXRlXHJcbiAgICBhc3luYyBzYXZlU2VsZWN0ZWQoKSB7XHJcbiAgICAgICAgbGV0IHNlbGVjdGVkSXRlbXMgOiBGbG93T2JqZWN0RGF0YUFycmF5ID0gbmV3IEZsb3dPYmplY3REYXRhQXJyYXkoKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkUm93TWFwLmZvckVhY2goKGl0ZW06IEZsb3dPYmplY3REYXRhLCBrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdEl0ZW06IEZsb3dPYmplY3REYXRhID0gdGhpcy5yb3dNYXAuZ2V0KGtleSkub2JqZWN0RGF0YTtcclxuICAgICAgICAgICAgdEl0ZW0uaXNTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkSXRlbXMuYWRkSXRlbSh0SXRlbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZVZhbHVlKHNlbGVjdGVkSXRlbXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHN0b3JlIHRoZSBzZWxlY3RlZCBpdGVtcyB0byBzdGF0ZVxyXG4gICAgYXN5bmMgbG9hZFNlbGVjdGVkKCkge1xyXG4gICAgICAgIGxldCBzZWxlY3RlZEl0ZW1zIDogRmxvd09iamVjdERhdGFBcnJheSA9IHRoaXMuZ2V0U3RhdGVWYWx1ZSgpIGFzIEZsb3dPYmplY3REYXRhQXJyYXk7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFJvd01hcC5mb3JFYWNoKChpdGVtOiBGbG93T2JqZWN0RGF0YSwga2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgbGV0IHRJdGVtOiBGbG93T2JqZWN0RGF0YSA9IHRoaXMucm93TWFwLmdldChrZXkpLm9iamVjdERhdGE7XHJcbiAgICAgICAgICAgIHRJdGVtLmlzU2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZWxlY3RlZEl0ZW1zLmFkZEl0ZW0odEl0ZW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0U3RhdGVWYWx1ZShzZWxlY3RlZEl0ZW1zKTtcclxuICAgIH1cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gQnVpbGRzIHRoZSByb3dFbGVtZW50cyBmcm9tIHRoZSBjdXJyZW50Um93TWFwIGFuZCBmb3JjZXMgYSByZWRyYXdcclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICBidWlsZFRhYmxlUm93cygpIHtcclxuICAgICAgICB0aGlzLnJvd0VsZW1lbnRzID0gW107XHJcbiAgICAgICAgLy8gbG9vcCBvdmVyIHJvd21hcCBpZiBkZWZpbmVkXHJcbiAgICAgICAgaWYodGhpcy5jdXJyZW50Um93UGFnZXMgJiYgdGhpcy5jdXJyZW50Um93UGFnZXMubGVuZ3RoID4gMCAmJiB0aGlzLmN1cnJlbnRSb3dQYWdlc1t0aGlzLmN1cnJlbnRSb3dQYWdlXSkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRSb3dQYWdlc1t0aGlzLmN1cnJlbnRSb3dQYWdlXS5mb3JFYWNoKChub2RlOiBSb3dJdGVtLCBrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yb3dFbGVtZW50cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWFyY2hGaWx0ZXJUYWJsZVJvdyAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17a2V5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb290PXt0aGlzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD17a2V5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY9eyhlbGVtZW50OiBTZWFyY2hGaWx0ZXJUYWJsZVJvdykgPT4ge3RoaXMuc2V0Um93KGtleSAsZWxlbWVudCl9fVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5idWlsZFJpYmJvbigpO1xyXG4gICAgICAgIHRoaXMuYnVpbGRGb290ZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIGJ1aWxkcyB0aXRsZSBiYXIgYnV0dG9ucyBiYXNlZCBvbiBhdHRhY2hlZCBvdXRjb21lc1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICBidWlsZFJpYmJvbigpIHtcclxuICAgICAgICB0aGlzLnJpYmJvbj8uZm9yY2VVcGRhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIGZvcmNlcyB0aGUgZm9vdGVyIHRvIHVwZGF0ZVxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICBidWlsZEZvb3RlcigpIHtcclxuICAgICAgICB0aGlzLmZvb3Rlcj8uZm9yY2VVcGRhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gY29uc3RydWN0cyBhbmQgc2hvd3MgY29udGV4dCBtZW51XHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgc2hvd0NvbnRleHRNZW51KGU6IGFueSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGxldCBsaXN0SXRlbXM6IE1hcDxzdHJpbmcgLCBhbnk+ID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGlmKHRoaXMuY29udGV4dE1lbnUpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5vdXRjb21lcykuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG91dGNvbWU6IEZsb3dPdXRjb21lID0gdGhpcy5vdXRjb21lc1trZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKG91dGNvbWUuaXNCdWxrQWN0aW9uID09PSB0cnVlICYmIG91dGNvbWUuZGV2ZWxvcGVyTmFtZSAhPT0gXCJPblNlbGVjdFwiICYmIG91dGNvbWUuZGV2ZWxvcGVyTmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoXCJjbVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCEgKG91dGNvbWUuYXR0cmlidXRlc1tcIlJlcXVpcmVzU2VsZWN0ZWRcIl0/LnZhbHVlID09PSBcInRydWVcIiAmJiB0aGlzLnNlbGVjdGVkUm93TWFwLnNpemUgPCAxKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0SXRlbXMuc2V0KG91dGNvbWUuZGV2ZWxvcGVyTmFtZSwoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNtLWl0ZW1cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtvdXRjb21lLmxhYmVsIHx8IGtleX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7ZS5zdG9wUHJvcGFnYXRpb24oKTsgdGhpcy5jbUNsaWNrKGtleSl9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJnbHlwaGljb24gZ2x5cGhpY29uLVwiICsgKG91dGNvbWUuYXR0cmlidXRlc1tcImljb25cIl0/LnZhbHVlIHx8IFwicGx1c1wiKSArIFwiIHNmdC1jbS1pdGVtLWljb25cIn0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wic2Z0LWNtLWl0ZW0tbGFiZWxcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtvdXRjb21lLmxhYmVsIHx8IGtleX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgbGlzdEl0ZW1zLnNldChcImV4cG9ydGFsbFwiLChcclxuICAgICAgICAgICAgICAgIDxsaSBcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtY20taXRlbVwiXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9e1wiRXhwb3J0IEFsbFwifVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlOiBhbnkpID0+IHtlLnN0b3BQcm9wYWdhdGlvbigpOyB0aGlzLmRvRXhwb3J0KHRoaXMucm93TWFwKX19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcImdseXBoaWNvbiBnbHlwaGljb24tZmxvcHB5LXNhdmUgc2Z0LWNtLWl0ZW0taWNvblwifSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJzZnQtY20taXRlbS1sYWJlbFwifVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgRXhwb3J0IEFsbFxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICkpO1xyXG4gICAgICAgICAgICBsaXN0SXRlbXMuc2V0KFwiZXhwb3J0c2hvd25cIiwoXHJcbiAgICAgICAgICAgICAgICA8bGkgXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNtLWl0ZW1cIlxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlPXtcIkV4cG9ydCBTZWFyY2ggUmVzdWx0c1wifVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlOiBhbnkpID0+IHtlLnN0b3BQcm9wYWdhdGlvbigpOyB0aGlzLmRvRXhwb3J0KHRoaXMuY3VycmVudFJvd01hcCl9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJnbHlwaGljb24gZ2x5cGhpY29uLWZsb3BweS1zYXZlIHNmdC1jbS1pdGVtLWljb25cIn0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wic2Z0LWNtLWl0ZW0tbGFiZWxcIn1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEV4cG9ydCBTZWFyY2ggUmVzdWx0c1xyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICkpO1xyXG4gICAgICAgICAgICBpZih0aGlzLnNlbGVjdGVkUm93TWFwLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBsaXN0SXRlbXMuc2V0KFwiZXhwb3J0c2VsZWN0ZWRcIiwoXHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtY20taXRlbVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtcIkV4cG9ydCBTZWxlY3RlZCBJdGVtc1wifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7ZS5zdG9wUHJvcGFnYXRpb24oKTsgdGhpcy5kb0V4cG9ydCh0aGlzLnNlbGVjdGVkUm93TWFwKX19XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcImdseXBoaWNvbiBnbHlwaGljb24tZmxvcHB5LXNhdmUgc2Z0LWNtLWl0ZW0taWNvblwifSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcInNmdC1jbS1pdGVtLWxhYmVsXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4cG9ydCBTZWxlY3RlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dE1lbnUuc2hvd0NvbnRleHRNZW51KGUuY2xpZW50WCwgZS5jbGllbnRZLGxpc3RJdGVtcyk7ICAgXHJcbiAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgaGlkZUNvbnRleHRNZW51KCkge1xyXG4gICAgICAgIHRoaXMuY29udGV4dE1lbnUuaGlkZUNvbnRleHRNZW51KCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIGEgY29udGV4dCBtZW51IGl0ZW0gd2FzIGNsaWNrZWQgLSB0aGUga2V5IHdpbGwgYmUgdGhlIGl0ZW0ncyBuYW1lXHJcbiAgICBjbUNsaWNrKGtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5kb091dGNvbWUoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUZXh0VmFsdWUocHJvcGVydHk6IEZsb3dPYmplY3REYXRhUHJvcGVydHkpIDogc3RyaW5nIHtcclxuICAgICAgICBzd2l0Y2gocHJvcGVydHkuY29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudEJvb2xlYW46XHJcbiAgICAgICAgICAgICAgICBpZihwcm9wZXJ0eS52YWx1ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlRydWVcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkZhbHNlXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnROdW1iZXI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHkudmFsdWUudG9TdHJpbmcoKTtcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHkudmFsdWUgYXMgc3RyaW5nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgYXN5bmMgZG9PdXRjb21lKG91dGNvbWVOYW1lOiBzdHJpbmcsIHNlbGVjdGVkSXRlbT8gOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgb2JqRGF0YTogRmxvd09iamVjdERhdGEgPSB0aGlzLnJvd01hcC5nZXQoc2VsZWN0ZWRJdGVtKT8ub2JqZWN0RGF0YTtcclxuICAgICAgICBpZih0aGlzLm91dGNvbWVzW291dGNvbWVOYW1lXSkge1xyXG4gICAgICAgICAgICAvL2lmIHRoZSBvdXRjb21lIGhhcyBhIHVyaSB0aGVuIHdlIGFyZSBvcGVuaW5nIHNvbWV0aGluZyBpbiBhIG5ldyB0YWJcclxuICAgICAgICAgICAgaWYodGhpcy5vdXRjb21lc1tvdXRjb21lTmFtZV0uYXR0cmlidXRlc1tcInVyaVwiXSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGhyZWY6IHN0cmluZyA9IHRoaXMub3V0Y29tZXNbb3V0Y29tZU5hbWVdLmF0dHJpYnV0ZXNbXCJ1cmlcIl0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWF0Y2g6IGFueTtcclxuICAgICAgICAgICAgICAgIHdoaWxlKCBtYXRjaCA9IFJlZ0V4cCgve3soW159XSopfX0vKS5leGVjKGhyZWYpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZj1ocmVmLnJlcGxhY2UobWF0Y2hbMF0sKG9iakRhdGEucHJvcGVydGllc1ttYXRjaFsxXV0gPyB0aGlzLmdldFRleHRWYWx1ZShvYmpEYXRhLnByb3BlcnRpZXNbbWF0Y2hbMV1dKSA6IFwiXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKHRoaXMub3V0Y29tZXNbb3V0Y29tZU5hbWVdLmF0dHJpYnV0ZXNbXCJ0YXJnZXRcIl0/LnZhbHVlPT09XCJfc2VsZlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYiA9IHdpbmRvdy5vcGVuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFiLmxvY2F0aW9uLmhyZWYgPSBocmVmO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50cmlnZ2VyT3V0Y29tZShvdXRjb21lTmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBtYW55d2hvLmNvbXBvbmVudC5oYW5kbGVFdmVudChcclxuICAgICAgICAgICAgICAgIHRoaXMsXHJcbiAgICAgICAgICAgICAgICBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudChcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudElkLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmxvd0tleSxcclxuICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dLZXksXHJcbiAgICAgICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9ICBcclxuICAgIFxyXG4gICAgYXN5bmMgZG9FeHBvcnQoZGF0YTogTWFwPHN0cmluZyxSb3dJdGVtPikge1xyXG4gICAgICAgIGxldCBvcGRhdGE6IE1hcDxzdHJpbmcsUm93SXRlbT4gPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgZGF0YS5mb3JFYWNoKChpdGVtLGtleSkgPT4ge1xyXG4gICAgICAgICAgICBvcGRhdGEuc2V0KGtleSx0aGlzLnJvd01hcC5nZXQoa2V5KSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgTW9kZWxFeHBvcnRlci5leHBvcnQodGhpcy5jb2xNYXAsIG9wZGF0YSxcImV4cG9ydC5jc3ZcIik7XHJcbiAgICAgICAgaWYodGhpcy5vdXRjb21lc1tcIk9uRXhwb3J0XCJdKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlck91dGNvbWUoXCJPbkV4cG9ydFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHRoaXMubG9hZGluZ1N0YXRlICE9PSBlTG9hZGluZ1N0YXRlLnJlYWR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxhc3RDb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgLy9oYW5kbGUgY2xhc3NlcyBhdHRyaWJ1dGUgYW5kIGhpZGRlbiBhbmQgc2l6ZVxyXG4gICAgICAgIGxldCBjbGFzc2VzOiBzdHJpbmcgPSBcInNmdCBcIiArIHRoaXMuZ2V0QXR0cmlidXRlKFwiY2xhc3Nlc1wiLFwiXCIpO1xyXG4gICAgICAgIGxldCBzdHlsZTogQ1NTUHJvcGVydGllcyA9IHt9O1xyXG4gICAgICAgIHN0eWxlLndpZHRoID0gXCItd2Via2l0LWZpbGwtYXZhaWxhYmxlXCI7XHJcbiAgICAgICAgc3R5bGUuaGVpZ2h0ID0gXCItd2Via2l0LWZpbGwtYXZhaWxhYmxlXCI7XHJcblxyXG4gICAgICAgIGlmKHRoaXMubW9kZWwudmlzaWJsZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZih0aGlzLm1vZGVsLndpZHRoKSB7XHJcbiAgICAgICAgICAgIHN0eWxlLndpZHRoPXRoaXMubW9kZWwud2lkdGggKyBcInB4XCJcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYodGhpcy5tb2RlbC5oZWlnaHQpIHtcclxuICAgICAgICAgICAgc3R5bGUuaGVpZ2h0PXRoaXMubW9kZWwuaGVpZ2h0ICsgXCJweFwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgICAgICAgXHJcbiAgICAgICAgbGV0IHRpdGxlOiAgc3RyaW5nID0gdGhpcy5tb2RlbC5sYWJlbCB8fCBcIlwiO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMubGFzdENvbnRlbnQgPSAoXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlc31cclxuICAgICAgICAgICAgICAgIHN0eWxlPXtzdHlsZX1cclxuICAgICAgICAgICAgICAgIG9uQ29udGV4dE1lbnU9e3RoaXMuc2hvd0NvbnRleHRNZW51fVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8Rmxvd01lc3NhZ2VCb3hcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ9e3RoaXN9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVmPXsoZWxlbWVudDogRmxvd01lc3NhZ2VCb3gpID0+IHt0aGlzLm1lc3NhZ2VCb3ggPSBlbGVtZW50fX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8Rmxvd0NvbnRleHRNZW51XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50PXt0aGlzfVxyXG4gICAgICAgICAgICAgICAgICAgIHJlZj17KGVsZW1lbnQ6IEZsb3dDb250ZXh0TWVudSkgPT4ge3RoaXMuY29udGV4dE1lbnUgPSBlbGVtZW50fX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5yaWJib25FbGVtZW50fVxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1ib2R5XCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtc2Nyb2xsZXJcIiBcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1zY3JvbGxlci1ib2R5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuaGVhZGVyc0VsZW1lbnR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnJvd0VsZW1lbnRzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRmb290PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGZvb3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5mb290ZXJFbGVtZW50fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RDb250ZW50O1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxubWFueXdoby5jb21wb25lbnQucmVnaXN0ZXIoJ1NlYXJjaEZpbHRlclRhYmxlJywgU2VhcmNoRmlsdGVyVGFibGUpOyIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkZsb3dDb21wb25lbnQgPSB2b2lkIDA7XHJcbnZhciBGbG93QmFzZUNvbXBvbmVudF8xID0gcmVxdWlyZShcIi4vRmxvd0Jhc2VDb21wb25lbnRcIik7XHJcbnZhciBGbG93Q29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEZsb3dDb21wb25lbnQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBGbG93Q29tcG9uZW50KHByb3BzKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgLy8gdGhlIEZsb3dQYWdlIGF1dG9tYXRpY2FsbHkgZ2V0cyB2YWx1ZXNcclxuICAgIEZsb3dDb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgX3N1cGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudC5jYWxsKHRoaXMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5kb250TG9hZEFsbFZhbHVlcygpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZsb3dDb21wb25lbnQ7XHJcbn0oRmxvd0Jhc2VDb21wb25lbnRfMS5GbG93QmFzZUNvbXBvbmVudCkpO1xyXG5leHBvcnRzLkZsb3dDb21wb25lbnQgPSBGbG93Q29tcG9uZW50O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5pZiAoIW1hbnl3aG8uZXZlbnRNYW5hZ2VyKSB7XHJcbiAgICBtYW55d2hvLmV2ZW50TWFuYWdlciA9IHt9O1xyXG4gICAgbWFueXdoby5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZExpc3RlbmVycyA9IHt9O1xyXG4gICAgbWFueXdoby5ldmVudE1hbmFnZXIuZG9uZUxpc3RlbmVycyA9IHt9O1xyXG4gICAgbWFueXdoby5ldmVudE1hbmFnZXIuZmFpbExpc3RlbmVycyA9IHt9O1xyXG4gICAgbWFueXdoby5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkO1xyXG4gICAgbWFueXdoby5ldmVudE1hbmFnZXIuaGlzdG9yeSA9IFtdO1xyXG4gICAgbWFueXdoby5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZCA9IGZ1bmN0aW9uICh4aHIsIHJlcXVlc3QpIHtcclxuICAgICAgICAvLyhtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmJlZm9yZVNlbmRMaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXI6IGFueSkgPT4gbGlzdGVuZXIoeGhyLCByZXF1ZXN0KSk7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmJlZm9yZVNlbmRMaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgbWFueXdoby5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZExpc3RlbmVyc1trZXldKHhociwgcmVxdWVzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmRvbmUgPSBmdW5jdGlvbiAoeGhyLCByZXF1ZXN0KSB7XHJcbiAgICAgICAgLy8obWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5kb25lTGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyOiBhbnkpID0+IGxpc3RlbmVyKHhociwgcmVxdWVzdCkpO1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBtYW55d2hvLmV2ZW50TWFuYWdlci5kb25lTGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmRvbmVMaXN0ZW5lcnNba2V5XSh4aHIsIHJlcXVlc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5mYWlsID0gZnVuY3Rpb24gKHhociwgcmVxdWVzdCkge1xyXG4gICAgICAgIC8vKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZmFpbExpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcjogYW55KSA9PiBsaXN0ZW5lcih4aHIsIHJlcXVlc3QpKTtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gbWFueXdoby5ldmVudE1hbmFnZXIuZmFpbExpc3RlbmVycykge1xyXG4gICAgICAgICAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5mYWlsTGlzdGVuZXJzW2tleV0oeGhyLCByZXF1ZXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgbWFueXdoby5ldmVudE1hbmFnZXIuYWRkQmVmb3JlU2VuZExpc3RlbmVyID0gZnVuY3Rpb24gKGhhbmRsZXIsIGNvbXBvbmVudElkKSB7XHJcbiAgICAgICAgbWFueXdoby5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZExpc3RlbmVyc1tjb21wb25lbnRJZF0gPSBoYW5kbGVyO1xyXG4gICAgfTtcclxuICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLnJlbW92ZUJlZm9yZVNlbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIChjb21wb25lbnRJZCkge1xyXG4gICAgICAgIGRlbGV0ZSBtYW55d2hvLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzW2NvbXBvbmVudElkXTtcclxuICAgIH07XHJcbiAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5hZGREb25lTGlzdGVuZXIgPSBmdW5jdGlvbiAoaGFuZGxlciwgY29tcG9uZW50SWQpIHtcclxuICAgICAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5kb25lTGlzdGVuZXJzW2NvbXBvbmVudElkXSA9IGhhbmRsZXI7XHJcbiAgICB9O1xyXG4gICAgbWFueXdoby5ldmVudE1hbmFnZXIucmVtb3ZlRG9uZUxpc3RlbmVyID0gZnVuY3Rpb24gKGNvbXBvbmVudElkKSB7XHJcbiAgICAgICAgZGVsZXRlIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmRvbmVMaXN0ZW5lcnNbY29tcG9uZW50SWRdO1xyXG4gICAgfTtcclxuICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmFkZEZhaWxMaXN0ZW5lciA9IGZ1bmN0aW9uIChoYW5kbGVyLCBjb21wb25lbnRJZCkge1xyXG4gICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmZhaWxMaXN0ZW5lcnNbY29tcG9uZW50SWRdID0gaGFuZGxlcjtcclxuICAgIH07XHJcbiAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5yZW1vdmVGYWlsTGlzdGVuZXIgPSBmdW5jdGlvbiAoY29tcG9uZW50SWQpIHtcclxuICAgICAgICBkZWxldGUgbWFueXdoby5ldmVudE1hbmFnZXIuZmFpbExpc3RlbmVyc1tjb21wb25lbnRJZF07XHJcbiAgICB9O1xyXG4gICAgbWFueXdoby5zZXR0aW5ncy5pbml0aWFsaXplKG51bGwsIHtcclxuICAgICAgICBpbnZva2U6IHtcclxuICAgICAgICAgICAgYmVmb3JlU2VuZDogbWFueXdoby5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZCxcclxuICAgICAgICAgICAgZG9uZTogbWFueXdoby5ldmVudE1hbmFnZXIuZG9uZSxcclxuICAgICAgICAgICAgZmFpbDogbWFueXdoby5ldmVudE1hbmFnZXIuZmFpbCxcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cclxuIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICByZXN1bHQgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nID8gbmF0aXZlTWluKHJlc3VsdCwgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICpcbiAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgfSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRocm90dGxlO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuRmxvd1BhZ2UgPSB2b2lkIDA7XHJcbnZhciBGbG93QmFzZUNvbXBvbmVudF8xID0gcmVxdWlyZShcIi4vRmxvd0Jhc2VDb21wb25lbnRcIik7XHJcbnZhciBGbG93UGFnZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhGbG93UGFnZSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEZsb3dQYWdlKHByb3BzKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgLy8gdGhlIEZsb3dQYWdlIGF1dG9tYXRpY2FsbHkgZ2V0cyB2YWx1ZXNcclxuICAgIEZsb3dQYWdlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIF9zdXBlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQuY2FsbCh0aGlzKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2luY2Ugd2UgYXJlIGEgcGFnZSB3ZSBub3cgbG9hZCBhbGwgdmFsdWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9hZEFsbFZhbHVlcygpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2luY2Ugd2UgYXJlIGEgcGFnZSB3ZSBub3cgbG9hZCBhbGwgdmFsdWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZsb3dQYWdlO1xyXG59KEZsb3dCYXNlQ29tcG9uZW50XzEuRmxvd0Jhc2VDb21wb25lbnQpKTtcclxuZXhwb3J0cy5GbG93UGFnZSA9IEZsb3dQYWdlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93RGlhbG9nQm94ID0gdm9pZCAwO1xyXG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XHJcbnZhciBDb21tb25fMSA9IHJlcXVpcmUoXCIuL0NvbW1vblwiKTtcclxucmVxdWlyZShcIi4vRmxvd0RpYWxvZ0JveC5jc3NcIik7XHJcbi8vIERlY2xhcmF0aW9uIG9mIHRoZSBjb21wb25lbnQgYXMgUmVhY3QgQ2xhc3MgQ29tcG9uZW50XHJcbnZhciBGbG93RGlhbG9nQm94ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEZsb3dEaWFsb2dCb3gsIF9zdXBlcik7XHJcbiAgICAvLyBJbml0IG9mIHRoZSBjb21wb25lbnQgYmVmb3JlIGl0IGlzIG1vdW50ZWQuXHJcbiAgICBmdW5jdGlvbiBGbG93RGlhbG9nQm94KHByb3BzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuZHJhZ0V2ZW50ID0gbmV3IENvbW1vbl8xLkRyYWdFdmVudCgpO1xyXG4gICAgICAgIF90aGlzLmRpYWxvZ1Zpc2libGUgPSBmYWxzZTtcclxuICAgICAgICBfdGhpcy5kaWFsb2dUaXRsZSA9ICcnO1xyXG4gICAgICAgIF90aGlzLmRpYWxvZ0J1dHRvbnMgPSBbXTtcclxuICAgICAgICBfdGhpcy5kaWFsb2dPbkNsb3NlID0gX3RoaXMuaGlkZURpYWxvZztcclxuICAgICAgICBfdGhpcy50b3AgPSAwO1xyXG4gICAgICAgIF90aGlzLmxlZnQgPSAwO1xyXG4gICAgICAgIF90aGlzLmhhbmRsZUtleVVwID0gX3RoaXMuaGFuZGxlS2V5VXAuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuaGFuZGxlT3V0c2lkZUNsaWNrID0gX3RoaXMuaGFuZGxlT3V0c2lkZUNsaWNrLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLnNob3dEaWFsb2cgPSBfdGhpcy5zaG93RGlhbG9nLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLmhpZGVEaWFsb2cgPSBfdGhpcy5oaWRlRGlhbG9nLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIEZsb3dEaWFsb2dCb3gucHJvdG90eXBlLnNldERpYWxvZyA9IGZ1bmN0aW9uIChkaWFsb2cpIHtcclxuICAgICAgICB0aGlzLmRpYWxvZyA9IGRpYWxvZztcclxuICAgICAgICBpZiAodGhpcy5kaWFsb2cpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmVudFhDZW50ZXIgPSB0aGlzLmRpYWxvZy5vZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggLyAyO1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50WUNlbnRlciA9IHRoaXMuZGlhbG9nLm9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgLyAyO1xyXG4gICAgICAgICAgICB2YXIgZGlhbG9nWE9mZnNldCA9IHRoaXMuZGlhbG9nLmNsaWVudFdpZHRoIC8gMjtcclxuICAgICAgICAgICAgdmFyIGRpYWxvZ1lPZmZzZXQgPSB0aGlzLmRpYWxvZy5jbGllbnRIZWlnaHQgLyAyO1xyXG4gICAgICAgICAgICB0aGlzLmxlZnQgPSBwYXJlbnRYQ2VudGVyIC0gZGlhbG9nWE9mZnNldDtcclxuICAgICAgICAgICAgdGhpcy50b3AgPSBwYXJlbnRZQ2VudGVyIC0gZGlhbG9nWU9mZnNldDtcclxuICAgICAgICAgICAgdGhpcy5kaWFsb2cuY2xhc3NMaXN0LmFkZCgnc2hvd24nKTtcclxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkRpYWxvZygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGbG93RGlhbG9nQm94LnByb3RvdHlwZS5wb3NpdGlvbkRpYWxvZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5kaWFsb2cpIHtcclxuICAgICAgICAgICAgdGhpcy5kaWFsb2cuc3R5bGUubGVmdCA9IHRoaXMubGVmdCArIFwicHhcIjtcclxuICAgICAgICAgICAgdGhpcy5kaWFsb2cuc3R5bGUudG9wID0gdGhpcy50b3AgKyBcInB4XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZsb3dEaWFsb2dCb3gucHJvdG90eXBlLnN0b3BFdmVudEJ1YmJsZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKGUuc3RvcFByb3BhZ2F0aW9uKVxyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KVxyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG4gICAgICAgIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLy8gQWRkIGxpc3RlbmVycyBpbW1lZGlhdGVseSBhZnRlciB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXHJcbiAgICBGbG93RGlhbG9nQm94LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0RpYWxvZ0JveC5wcm90b3R5cGUuc2hvd0RpYWxvZyA9IGZ1bmN0aW9uICh0aXRsZSwgY29udGVudCwgYnV0dG9ucywgb25DbG9zZSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nVGl0bGUgPSB0aXRsZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nQ29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ09uQ2xvc2UgPSBvbkNsb3NlIHx8IHRoaXMuaGlkZURpYWxvZztcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nQnV0dG9ucyA9IGJ1dHRvbnM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dEaWFsb2dCb3gucHJvdG90eXBlLmhpZGVEaWFsb2cgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ1RpdGxlID0gJyc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ0NvbnRlbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ09uQ2xvc2UgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ0J1dHRvbnMgPSBbXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLy8gSGFuZGxlIHRoZSBrZXkgcHJlc3MgZXZlbnQuXHJcbiAgICBGbG93RGlhbG9nQm94LnByb3RvdHlwZS5oYW5kbGVLZXlVcCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIga2V5cyA9IHtcclxuICAgICAgICAgICAgMjc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmhpZGVEaWFsb2coKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChrZXlzW2Uua2V5Q29kZV0pIHtcclxuICAgICAgICAgICAga2V5c1tlLmtleUNvZGVdKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIEhhbmRsZSB0aGUgbW91c2UgY2xpY2sgb24gYnJvd3NlciB3aW5kb3cuXHJcbiAgICBGbG93RGlhbG9nQm94LnByb3RvdHlwZS5oYW5kbGVPdXRzaWRlQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5kaWFsb2cpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmRpYWxvZy5jb250YWlucyhlLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZURpYWxvZygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIFJlbmRlciB0aGUgY29tcG9uZW50IHBhc3Npbmcgb25DbG9zZVJlcXVlc3QgYW5kIGNoaWxkcmVuIGFzIHByb3BzLlxyXG4gICAgRmxvd0RpYWxvZ0JveC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGNvbnRlbnQ7XHJcbiAgICAgICAgaWYgKHRoaXMuZGlhbG9nVmlzaWJsZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgY29udGVudCA9IChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBidXR0b25zID0gW107XHJcbiAgICAgICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9ucy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgeyBjbGFzc05hbWU6IFwibW9kYWwtZGlhbG9nLWJ1dHRvbi1iYXItYnV0dG9uXCIsIHRpdGxlOiBcIkNhbmNlbFwiLCBvbk1vdXNlRG93bjogZnVuY3Rpb24gKGUpIHsgZS5zdG9wUHJvcGFnYXRpb24oKTsgYnV0dG9uLmhhbmRsZXIoKTsgfSB9LCBidXR0b24ubGFiZWwpKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuZGlhbG9nQnV0dG9uczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBidXR0b24gPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICBfbG9vcF8xKGJ1dHRvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29udGVudCA9IChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcIm1vZGFsLXJlZGFjdGlvblwiLCBvbk1vdXNlTW92ZTogZnVuY3Rpb24gKGUpIHsgX3RoaXMub25Nb3VzZU1vdmUoZSk7IH0sIG9uTW91c2VVcDogZnVuY3Rpb24gKGUpIHsgX3RoaXMub25Nb3VzZVVwKGUpOyB9LCBvbk1vdXNlRG93bjogZnVuY3Rpb24gKGUpIHsgX3RoaXMuaGFuZGxlT3V0c2lkZUNsaWNrKGUpOyB9LCBvbkNvbnRleHRNZW51OiBmdW5jdGlvbiAoZSkgeyBlLnByZXZlbnREZWZhdWx0KCk7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IGlmIChfdGhpcy5wcm9wcy5vbkNvbnRleHRNZW51KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25Db250ZXh0TWVudSgpO1xyXG4gICAgICAgICAgICAgICAgfSB9IH0sXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcIm1vZGFsLWNvbnRlbnRcIiwgcmVmOiBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gKF90aGlzLmRpYWxvZyA9IG5vZGUpOyB9IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJtb2RhbC1kaWFsb2dcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcIm1vZGFsLWRpYWxvZy1oZWFkZXJcIiwgb25Nb3VzZURvd246IGZ1bmN0aW9uIChlKSB7IF90aGlzLm9uTW91c2VEb3duKGUpOyB9IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IHsgZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLCBmbGV4R3JvdzogMSB9IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwibW9kYWwtZGlhbG9nLWhlYWRlci10aXRsZVwiIH0sIHRoaXMucHJvcHMudGl0bGUpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogeyBkaXNwbGF5OiAnZmxleCcsIGZsZXhEaXJlY3Rpb246IFwicm93XCIsIG1hcmdpbkxlZnQ6ICdhdXRvJywgZmxleEdyb3c6IDAgfSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIG1vZGFsLWRpYWxvZy1oZWFkZXItYnV0dG9uXCIsIHN0eWxlOiB7IGN1cnNvcjogJ3BvaW50ZXInLCBjb2xvcjogJyNmZWZlZmUnLCBtYXJnaW5SaWdodDogJzVweCcsIGZvbnRTaXplOiAnMTRwdCcgfSwgdGl0bGU6IFwiQ2xvc2VcIiwgb25Nb3VzZURvd246IGZ1bmN0aW9uIChlKSB7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IF90aGlzLnByb3BzLm9uQ2xvc2UoJ2NhbmNlbCcpOyB9IH0pKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibW9kYWwtZGlhbG9nLWJvZHlcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJtb2RhbC1kaWFsb2ctYm9keS1jbGllbnRcIiB9LCB0aGlzLnByb3BzLmNoaWxkcmVuKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibW9kYWwtZGlhbG9nLWJ1dHRvbi1iYXJcIiB9LCBidXR0b25zKSkpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgfTtcclxuICAgIEZsb3dEaWFsb2dCb3gucHJvdG90eXBlLm1vdmVNZSA9IGZ1bmN0aW9uIChsZWZ0LCB0b3ApIHtcclxuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xyXG4gICAgICAgIHRoaXMudG9wID0gdG9wOyAvLyAtIHRoaXMuYm94LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uRGlhbG9nKCk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0RpYWxvZ0JveC5wcm90b3R5cGUub25Nb3VzZURvd24gPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIC8vdGhpcy5zdG9wRXZlbnRCdWJibGUoZSk7XHJcbiAgICAgICAgLy9pbmNsdWRlIGNvbXBvbmVudCBib3VuZGluZyByZWN0IHRvIGFsbG93IGZvciBtb3VzZSBvZmZzZXQgaW50byBjb21wb25lbnRcclxuICAgICAgICB2YXIgY2xpZW50UmVjdCA9IGUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIHZhciBtb3VzZU9mZnNldFkgPSBlLmNsaWVudFkgLSBjbGllbnRSZWN0LnRvcDtcclxuICAgICAgICB0aGlzLmRyYWdFdmVudCA9IENvbW1vbl8xLkRyYWdFdmVudC5zdGFydChDb21tb25fMS5lRHJhZ0V2ZW50VHlwZS5kaWFsb2csIHRoaXMsIGUuY2xpZW50WCAtIGNsaWVudFJlY3QubGVmdCwgbW91c2VPZmZzZXRZKTtcclxuICAgIH07XHJcbiAgICBGbG93RGlhbG9nQm94LnByb3RvdHlwZS5vbk1vdXNlTW92ZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgLy90aGlzLnN0b3BFdmVudEJ1YmJsZShlKTtcclxuICAgICAgICBpZiAodGhpcy5kcmFnRXZlbnQudHlwZSA9PT0gQ29tbW9uXzEuZURyYWdFdmVudFR5cGUuZGlhbG9nKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW92ZU1lKGUuY2xpZW50WCAtIHRoaXMuZHJhZ0V2ZW50Lm1vdXNlT2Zmc2V0WCwgZS5jbGllbnRZIC0gdGhpcy5kcmFnRXZlbnQubW91c2VPZmZzZXRZKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd0RpYWxvZ0JveC5wcm90b3R5cGUub25Nb3VzZVVwID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAvL3RoaXMuc3RvcEV2ZW50QnViYmxlKGUpO1xyXG4gICAgICAgIGlmICh0aGlzLmRyYWdFdmVudC50eXBlID09PSBDb21tb25fMS5lRHJhZ0V2ZW50VHlwZS5kaWFsb2cpIHtcclxuICAgICAgICAgICAgdGhpcy5kcmFnRXZlbnQuZW5kKG51bGwsIGUuY2xpZW50WCwgZS5jbGllbnRZKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZsb3dEaWFsb2dCb3g7XHJcbn0oUmVhY3QuQ29tcG9uZW50KSk7XHJcbmV4cG9ydHMuRmxvd0RpYWxvZ0JveCA9IEZsb3dEaWFsb2dCb3g7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkZsb3dNZXNzYWdlQm94ID0gdm9pZCAwO1xyXG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XHJcbnZhciBDb21tb25fMSA9IHJlcXVpcmUoXCIuL0NvbW1vblwiKTtcclxucmVxdWlyZShcIi4vRmxvd01lc3NhZ2VCb3guY3NzXCIpO1xyXG4vLyBEZWNsYXJhdGlvbiBvZiB0aGUgY29tcG9uZW50IGFzIFJlYWN0IENsYXNzIENvbXBvbmVudFxyXG52YXIgRmxvd01lc3NhZ2VCb3ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRmxvd01lc3NhZ2VCb3gsIF9zdXBlcik7XHJcbiAgICAvLyBJbml0IG9mIHRoZSBjb21wb25lbnQgYmVmb3JlIGl0IGlzIG1vdW50ZWQuXHJcbiAgICBmdW5jdGlvbiBGbG93TWVzc2FnZUJveChwcm9wcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmRyYWdFdmVudCA9IG5ldyBDb21tb25fMS5EcmFnRXZlbnQoKTtcclxuICAgICAgICBfdGhpcy50b3AgPSAwO1xyXG4gICAgICAgIF90aGlzLmxlZnQgPSAwO1xyXG4gICAgICAgIF90aGlzLm1zZ2JveFZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICBfdGhpcy5tc2dib3hUaXRsZSA9ICcnO1xyXG4gICAgICAgIF90aGlzLm1zZ2JveEJ1dHRvbnMgPSBbXTtcclxuICAgICAgICBfdGhpcy5tc2dib3hPbkNsb3NlID0gX3RoaXMuaGlkZU1lc3NhZ2VCb3g7XHJcbiAgICAgICAgX3RoaXMuaGFuZGxlS2V5VXAgPSBfdGhpcy5oYW5kbGVLZXlVcC5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5zZXREaWFsb2cgPSBfdGhpcy5zZXREaWFsb2cuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuc2hvd01lc3NhZ2VCb3ggPSBfdGhpcy5zaG93TWVzc2FnZUJveC5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5oaWRlTWVzc2FnZUJveCA9IF90aGlzLmhpZGVNZXNzYWdlQm94LmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLnBvc2l0aW9uRGlhbG9nID0gX3RoaXMucG9zaXRpb25EaWFsb2cuYmluZChfdGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIC8vIHRoaXMuaGFuZGxlT3V0c2lkZUNsaWNrID0gdGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2suYmluZCh0aGlzKTtcclxuICAgIH1cclxuICAgIEZsb3dNZXNzYWdlQm94LnByb3RvdHlwZS5zZXREaWFsb2cgPSBmdW5jdGlvbiAoZGlhbG9nKSB7XHJcbiAgICAgICAgdGhpcy5kaWFsb2cgPSBkaWFsb2c7XHJcbiAgICAgICAgaWYgKHRoaXMuZGlhbG9nKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJlbnRYQ2VudGVyID0gdGhpcy5kaWFsb2cub2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIC8gMjtcclxuICAgICAgICAgICAgdmFyIHBhcmVudFlDZW50ZXIgPSB0aGlzLmRpYWxvZy5vZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0IC8gMjtcclxuICAgICAgICAgICAgdmFyIGRpYWxvZ1hPZmZzZXQgPSB0aGlzLmRpYWxvZy5jbGllbnRXaWR0aCAvIDI7XHJcbiAgICAgICAgICAgIHZhciBkaWFsb2dZT2Zmc2V0ID0gdGhpcy5kaWFsb2cuY2xpZW50SGVpZ2h0IC8gMjtcclxuICAgICAgICAgICAgdGhpcy5sZWZ0ID0gcGFyZW50WENlbnRlciAtIGRpYWxvZ1hPZmZzZXQ7XHJcbiAgICAgICAgICAgIHRoaXMudG9wID0gcGFyZW50WUNlbnRlciAtIGRpYWxvZ1lPZmZzZXQ7XHJcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nLmNsYXNzTGlzdC5hZGQoJ3Nob3duJyk7XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25EaWFsb2coKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd01lc3NhZ2VCb3gucHJvdG90eXBlLnBvc2l0aW9uRGlhbG9nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRpYWxvZykge1xyXG4gICAgICAgICAgICB0aGlzLmRpYWxvZy5zdHlsZS5sZWZ0ID0gdGhpcy5sZWZ0ICsgXCJweFwiO1xyXG4gICAgICAgICAgICB0aGlzLmRpYWxvZy5zdHlsZS50b3AgPSB0aGlzLnRvcCArIFwicHhcIjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd01lc3NhZ2VCb3gucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgIH07XHJcbiAgICBGbG93TWVzc2FnZUJveC5wcm90b3R5cGUuc2hvd01lc3NhZ2VCb3ggPSBmdW5jdGlvbiAodGl0bGUsIGNvbnRlbnQsIGJ1dHRvbnMsIG9uQ2xvc2UpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubXNnYm94VmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1zZ2JveFRpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1zZ2JveENvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tc2dib3hPbkNsb3NlID0gb25DbG9zZSB8fCB0aGlzLmhpZGVNZXNzYWdlQm94O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tc2dib3hCdXR0b25zID0gYnV0dG9ucztcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd01lc3NhZ2VCb3gucHJvdG90eXBlLmhpZGVNZXNzYWdlQm94ID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubXNnYm94VmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tc2dib3hUaXRsZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tc2dib3hDb250ZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tc2dib3hPbkNsb3NlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tc2dib3hCdXR0b25zID0gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dNZXNzYWdlQm94LnByb3RvdHlwZS5zdG9wRXZlbnRCdWJibGUgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmIChlLnN0b3BQcm9wYWdhdGlvbikge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGUuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgICAgICBlLnJldHVyblZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8vIEhhbmRsZSB0aGUga2V5IHByZXNzIGV2ZW50LlxyXG4gICAgRmxvd01lc3NhZ2VCb3gucHJvdG90eXBlLmhhbmRsZUtleVVwID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBrZXlzID0ge1xyXG4gICAgICAgICAgICAyNzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuaGlkZU1lc3NhZ2VCb3goKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChrZXlzW2Uua2V5Q29kZV0pIHtcclxuICAgICAgICAgICAga2V5c1tlLmtleUNvZGVdKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIFJlbmRlciB0aGUgY29tcG9uZW50IHBhc3Npbmcgb25DbG9zZVJlcXVlc3QgYW5kIGNoaWxkcmVuIGFzIHByb3BzLlxyXG4gICAgRmxvd01lc3NhZ2VCb3gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjb250ZW50O1xyXG4gICAgICAgIGlmICh0aGlzLm1zZ2JveFZpc2libGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgYnV0dG9ucyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChidXR0b24pIHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHsgY2xhc3NOYW1lOiBcIm1vZGFsLWRpYWxvZy1idXR0b24tYmFyLWJ1dHRvblwiLCB0aXRsZTogXCJDYW5jZWxcIiwgb25Nb3VzZURvd246IGZ1bmN0aW9uIChlKSB7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IGJ1dHRvbi5oYW5kbGVyKCk7IH0gfSwgYnV0dG9uLmxhYmVsKSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLm1zZ2JveEJ1dHRvbnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnV0dG9uID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgX2xvb3BfMShidXR0b24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJtZXNzYWdlLWJveC1yZWRhY3Rpb25cIiwgb25Nb3VzZU1vdmU6IGZ1bmN0aW9uIChlKSB7IF90aGlzLm9uTW91c2VNb3ZlKGUpOyB9LCBvbk1vdXNlVXA6IGZ1bmN0aW9uIChlKSB7IF90aGlzLm9uTW91c2VVcChlKTsgfSwgXHJcbiAgICAgICAgICAgICAgICAvLyBvbk1vdXNlRG93bj17KGUpID0+IHt0aGlzLmhhbmRsZU91dHNpZGVDbGljayhlKX19XHJcbiAgICAgICAgICAgICAgICBvbkNvbnRleHRNZW51OiBmdW5jdGlvbiAoZSkgeyBlLnByZXZlbnREZWZhdWx0KCk7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IGlmIChfdGhpcy5wcm9wcy5vbkNvbnRleHRNZW51KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25Db250ZXh0TWVudSgpO1xyXG4gICAgICAgICAgICAgICAgfSB9IH0sXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgLy9zdHlsZT17c3R5bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIm1lc3NhZ2UtYm94LWNvbnRlbnRcIiwgcmVmOiBmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gKF90aGlzLnNldERpYWxvZyhlbGVtZW50KSk7IH0gfSxcclxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcIm1lc3NhZ2UtYm94LWRpYWxvZ1wiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibWVzc2FnZS1ib3gtZGlhbG9nLWhlYWRlclwiLCBvbk1vdXNlRG93bjogZnVuY3Rpb24gKGUpIHsgX3RoaXMub25Nb3VzZURvd24oZSk7IH0gfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogeyBkaXNwbGF5OiAnZmxleCcsIGZsZXhEaXJlY3Rpb246ICdyb3cnLCBmbGV4R3JvdzogMSB9IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwibWVzc2FnZS1ib3gtZGlhbG9nLWhlYWRlci10aXRsZVwiIH0sIHRoaXMubXNnYm94VGl0bGUpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogeyBkaXNwbGF5OiAnZmxleCcsIGZsZXhEaXJlY3Rpb246ICdyb3cnLCBtYXJnaW5MZWZ0OiAnYXV0bycsIGZsZXhHcm93OiAwIH0gfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSBtZXNzYWdlLWJveC1kaWFsb2ctaGVhZGVyLWJ1dHRvblwiLCBzdHlsZTogeyBjdXJzb3I6ICdwb2ludGVyJywgY29sb3I6ICcjZmVmZWZlJywgbWFyZ2luUmlnaHQ6ICc1cHgnLCBmb250U2l6ZTogJzE0cHQnIH0sIHRpdGxlOiBcIkNsb3NlXCIsIG9uTW91c2VEb3duOiBmdW5jdGlvbiAoZSkgeyBfdGhpcy5zdG9wRXZlbnRCdWJibGUoZSk7IF90aGlzLmhpZGVNZXNzYWdlQm94KCk7IH0gfSkpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJtZXNzYWdlLWJveC1kaWFsb2ctYm9keVwiIH0sIHRoaXMubXNnYm94Q29udGVudCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibW9kYWwtZGlhbG9nLWJ1dHRvbi1iYXJcIiB9LCBidXR0b25zKSkpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgfTtcclxuICAgIEZsb3dNZXNzYWdlQm94LnByb3RvdHlwZS5tb3ZlTWUgPSBmdW5jdGlvbiAobGVmdCwgdG9wKSB7XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gbGVmdDtcclxuICAgICAgICB0aGlzLnRvcCA9IHRvcDsgLy8gLSB0aGlzLmJveC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbkRpYWxvZygpO1xyXG4gICAgfTtcclxuICAgIEZsb3dNZXNzYWdlQm94LnByb3RvdHlwZS5vbk1vdXNlRG93biA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgLy8gdGhpcy5zdG9wRXZlbnRCdWJibGUoZSk7XHJcbiAgICAgICAgLy8gaW5jbHVkZSBjb21wb25lbnQgYm91bmRpbmcgcmVjdCB0byBhbGxvdyBmb3IgbW91c2Ugb2Zmc2V0IGludG8gY29tcG9uZW50XHJcbiAgICAgICAgdmFyIGNsaWVudFJlY3QgPSBlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICB2YXIgbW91c2VPZmZzZXRZID0gZS5jbGllbnRZIC0gY2xpZW50UmVjdC50b3A7XHJcbiAgICAgICAgdGhpcy5kcmFnRXZlbnQgPSBDb21tb25fMS5EcmFnRXZlbnQuc3RhcnQoQ29tbW9uXzEuZURyYWdFdmVudFR5cGUuZGlhbG9nLCB0aGlzLCBlLmNsaWVudFggLSBjbGllbnRSZWN0LmxlZnQsIG1vdXNlT2Zmc2V0WSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd01lc3NhZ2VCb3gucHJvdG90eXBlLm9uTW91c2VNb3ZlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAvLyB0aGlzLnN0b3BFdmVudEJ1YmJsZShlKTtcclxuICAgICAgICBpZiAodGhpcy5kcmFnRXZlbnQudHlwZSA9PT0gQ29tbW9uXzEuZURyYWdFdmVudFR5cGUuZGlhbG9nKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW92ZU1lKGUuY2xpZW50WCAtIHRoaXMuZHJhZ0V2ZW50Lm1vdXNlT2Zmc2V0WCwgZS5jbGllbnRZIC0gdGhpcy5kcmFnRXZlbnQubW91c2VPZmZzZXRZKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd01lc3NhZ2VCb3gucHJvdG90eXBlLm9uTW91c2VVcCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgLy8gdGhpcy5zdG9wRXZlbnRCdWJibGUoZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZHJhZ0V2ZW50LnR5cGUgPT09IENvbW1vbl8xLmVEcmFnRXZlbnRUeXBlLmRpYWxvZykge1xyXG4gICAgICAgICAgICB0aGlzLmRyYWdFdmVudC5lbmQobnVsbCwgZS5jbGllbnRYLCBlLmNsaWVudFkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRmxvd01lc3NhZ2VCb3g7XHJcbn0oUmVhY3QuQ29tcG9uZW50KSk7XHJcbmV4cG9ydHMuRmxvd01lc3NhZ2VCb3ggPSBGbG93TWVzc2FnZUJveDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xyXG5yZXF1aXJlKFwiLi9JY29uUGlja2VyLmNzc1wiKTtcclxuLy8gRGVjbGFyYXRpb24gb2YgdGhlIGNvbXBvbmVudCBhcyBSZWFjdCBDbGFzcyBDb21wb25lbnRcclxudmFyIEljb25QaWNrZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoSWNvblBpY2tlciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEljb25QaWNrZXIocHJvcHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5pY29ucyA9IHt9O1xyXG4gICAgICAgIF90aGlzLnNlbGVjdGVkSXRlbSA9IF90aGlzLnByb3BzLm9uQ2hhbmdlVmFsdWU7XHJcbiAgICAgICAgX3RoaXMub25jaGFuZ2UgPSBfdGhpcy5vbmNoYW5nZS5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5hZGRJY29uID0gX3RoaXMuYWRkSWNvbi5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5hZGRJY29ucyA9IF90aGlzLmFkZEljb25zLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLmFkZEljb25zKCk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgSWNvblBpY2tlci5wcm90b3R5cGUub25jaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtID0gZS50YXJnZXQuaW5uZXJUZXh0O1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UodGhpcy5zZWxlY3RlZEl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9O1xyXG4gICAgSWNvblBpY2tlci5wcm90b3R5cGUuYWRkSWNvbnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYXN0ZXJpc2tcIiwgXCJBc3Rlcmlza1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwbHVzXCIsIFwiUGx1c1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJtaW51c1wiLCBcIk1pbnVzXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImV1clwiLCBcIkV1clwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJldXJvXCIsIFwiRXVyb1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjbG91ZFwiLCBcIkNsb3VkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImVudmVsb3BlXCIsIFwiRW52ZWxvcGVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicGVuY2lsXCIsIFwiUGVuY2lsXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImdsYXNzXCIsIFwiR2xhc3NcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibXVzaWNcIiwgXCJNdXNpY1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzZWFyY2hcIiwgXCJTZWFyY2hcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaGVhcnRcIiwgXCJIZWFydFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzdGFyXCIsIFwiU3RhclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzdGFyLWVtcHR5XCIsIFwiU3RhciBFbXB0eVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ1c2VyXCIsIFwiVXNlclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmaWxtXCIsIFwiRmlsbVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0aC1sYXJnZVwiLCBcIlRoIExhcmdlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRoXCIsIFwiVGhcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidGgtbGlzdFwiLCBcIlRoIExpc3RcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwib2tcIiwgXCJPa1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJyZW1vdmVcIiwgXCJSZW1vdmVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiem9vbS1pblwiLCBcIlpvb20gSW5cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiem9vbS1vdXRcIiwgXCJab29tIE91dFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJvZmZcIiwgXCJPZmZcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic2lnbmFsXCIsIFwiU2lnbmFsXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNvZ1wiLCBcIkNvZ1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0cmFzaFwiLCBcIlRyYXNoXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImhvbWVcIiwgXCJIb21lXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZpbGVcIiwgXCJGaWxlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRpbWVcIiwgXCJUaW1lXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInJvYWRcIiwgXCJSb2FkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImRvd25sb2FkLWFsdFwiLCBcIkRvd25sb2FkIEFsdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJkb3dubG9hZFwiLCBcIkRvd25sb2FkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInVwbG9hZFwiLCBcIlVwbG9hZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJpbmJveFwiLCBcIkluYm94XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInBsYXktY2lyY2xlXCIsIFwiUGxheSBDaXJjbGVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmVwZWF0XCIsIFwiUmVwZWF0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInJlZnJlc2hcIiwgXCJSZWZyZXNoXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImxpc3QtYWx0XCIsIFwiTGlzdCBBbHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibG9ja1wiLCBcIkxvY2tcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZmxhZ1wiLCBcIkZsYWdcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaGVhZHBob25lc1wiLCBcIkhlYWRwaG9uZXNcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidm9sdW1lLW9mZlwiLCBcIlZvbHVtZSBPZmZcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidm9sdW1lLWRvd25cIiwgXCJWb2x1bWUgRG93blwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ2b2x1bWUtdXBcIiwgXCJWb2x1bWUgVXBcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicXJjb2RlXCIsIFwiUXJjb2RlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJhcmNvZGVcIiwgXCJCYXJjb2RlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRhZ1wiLCBcIlRhZ1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0YWdzXCIsIFwiVGFnc1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJib29rXCIsIFwiQm9va1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJib29rbWFya1wiLCBcIkJvb2ttYXJrXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInByaW50XCIsIFwiUHJpbnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2FtZXJhXCIsIFwiQ2FtZXJhXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZvbnRcIiwgXCJGb250XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJvbGRcIiwgXCJCb2xkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIml0YWxpY1wiLCBcIkl0YWxpY1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0ZXh0LWhlaWdodFwiLCBcIlRleHQgSGVpZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRleHQtd2lkdGhcIiwgXCJUZXh0IFdpZHRoXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImFsaWduLWxlZnRcIiwgXCJBbGlnbiBMZWZ0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImFsaWduLWNlbnRlclwiLCBcIkFsaWduIENlbnRlclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJhbGlnbi1yaWdodFwiLCBcIkFsaWduIFJpZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImFsaWduLWp1c3RpZnlcIiwgXCJBbGlnbiBKdXN0aWZ5XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImxpc3RcIiwgXCJMaXN0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImluZGVudC1sZWZ0XCIsIFwiSW5kZW50IExlZnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaW5kZW50LXJpZ2h0XCIsIFwiSW5kZW50IFJpZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZhY2V0aW1lLXZpZGVvXCIsIFwiRmFjZXRpbWUgVmlkZW9cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicGljdHVyZVwiLCBcIlBpY3R1cmVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibWFwLW1hcmtlclwiLCBcIk1hcCBNYXJrZXJcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYWRqdXN0XCIsIFwiQWRqdXN0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRpbnRcIiwgXCJUaW50XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImVkaXRcIiwgXCJFZGl0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNoYXJlXCIsIFwiU2hhcmVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2hlY2tcIiwgXCJDaGVja1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJtb3ZlXCIsIFwiTW92ZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzdGVwLWJhY2t3YXJkXCIsIFwiU3RlcCBCYWNrd2FyZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmYXN0LWJhY2t3YXJkXCIsIFwiRmFzdCBCYWNrd2FyZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJiYWNrd2FyZFwiLCBcIkJhY2t3YXJkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInBsYXlcIiwgXCJQbGF5XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInBhdXNlXCIsIFwiUGF1c2VcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic3RvcFwiLCBcIlN0b3BcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZm9yd2FyZFwiLCBcIkZvcndhcmRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZmFzdC1mb3J3YXJkXCIsIFwiRmFzdCBGb3J3YXJkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInN0ZXAtZm9yd2FyZFwiLCBcIlN0ZXAgRm9yd2FyZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJlamVjdFwiLCBcIkVqZWN0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNoZXZyb24tbGVmdFwiLCBcIkNoZXZyb24gTGVmdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjaGV2cm9uLXJpZ2h0XCIsIFwiQ2hldnJvbiBSaWdodFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwbHVzLXNpZ25cIiwgXCJQbHVzIFNpZ25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibWludXMtc2lnblwiLCBcIk1pbnVzIFNpZ25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmVtb3ZlLXNpZ25cIiwgXCJSZW1vdmUgU2lnblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJvay1zaWduXCIsIFwiT2sgU2lnblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJxdWVzdGlvbi1zaWduXCIsIFwiUXVlc3Rpb24gU2lnblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJpbmZvLXNpZ25cIiwgXCJJbmZvIFNpZ25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic2NyZWVuc2hvdFwiLCBcIlNjcmVlbnNob3RcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmVtb3ZlLWNpcmNsZVwiLCBcIlJlbW92ZSBDaXJjbGVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwib2stY2lyY2xlXCIsIFwiT2sgQ2lyY2xlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJhbi1jaXJjbGVcIiwgXCJCYW4gQ2lyY2xlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImFycm93LWxlZnRcIiwgXCJBcnJvdyBMZWZ0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImFycm93LXJpZ2h0XCIsIFwiQXJyb3cgUmlnaHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYXJyb3ctdXBcIiwgXCJBcnJvdyBVcFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJhcnJvdy1kb3duXCIsIFwiQXJyb3cgRG93blwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzaGFyZS1hbHRcIiwgXCJTaGFyZSBBbHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmVzaXplLWZ1bGxcIiwgXCJSZXNpemUgRnVsbFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJyZXNpemUtc21hbGxcIiwgXCJSZXNpemUgU21hbGxcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZXhjbGFtYXRpb24tc2lnblwiLCBcIkV4Y2xhbWF0aW9uIFNpZ25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZ2lmdFwiLCBcIkdpZnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibGVhZlwiLCBcIkxlYWZcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZmlyZVwiLCBcIkZpcmVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZXllLW9wZW5cIiwgXCJFeWUgT3BlblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJleWUtY2xvc2VcIiwgXCJFeWUgQ2xvc2VcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwid2FybmluZy1zaWduXCIsIFwiV2FybmluZyBTaWduXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInBsYW5lXCIsIFwiUGxhbmVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2FsZW5kYXJcIiwgXCJDYWxlbmRhclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJyYW5kb21cIiwgXCJSYW5kb21cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY29tbWVudFwiLCBcIkNvbW1lbnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibWFnbmV0XCIsIFwiTWFnbmV0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNoZXZyb24tdXBcIiwgXCJDaGV2cm9uIFVwXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNoZXZyb24tZG93blwiLCBcIkNoZXZyb24gRG93blwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJyZXR3ZWV0XCIsIFwiUmV0d2VldFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzaG9wcGluZy1jYXJ0XCIsIFwiU2hvcHBpbmcgQ2FydFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmb2xkZXItY2xvc2VcIiwgXCJGb2xkZXIgQ2xvc2VcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZm9sZGVyLW9wZW5cIiwgXCJGb2xkZXIgT3BlblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJyZXNpemUtdmVydGljYWxcIiwgXCJSZXNpemUgVmVydGljYWxcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmVzaXplLWhvcml6b250YWxcIiwgXCJSZXNpemUgSG9yaXpvbnRhbFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJoZGRcIiwgXCJIZGRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYnVsbGhvcm5cIiwgXCJCdWxsaG9yblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJiZWxsXCIsIFwiQmVsbFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjZXJ0aWZpY2F0ZVwiLCBcIkNlcnRpZmljYXRlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRodW1icy11cFwiLCBcIlRodW1icyBVcFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0aHVtYnMtZG93blwiLCBcIlRodW1icyBEb3duXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImhhbmQtcmlnaHRcIiwgXCJIYW5kIFJpZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImhhbmQtbGVmdFwiLCBcIkhhbmQgTGVmdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJoYW5kLXVwXCIsIFwiSGFuZCBVcFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJoYW5kLWRvd25cIiwgXCJIYW5kIERvd25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2lyY2xlLWFycm93LXJpZ2h0XCIsIFwiQ2lyY2xlIEFycm93IFJpZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNpcmNsZS1hcnJvdy1sZWZ0XCIsIFwiQ2lyY2xlIEFycm93IExlZnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2lyY2xlLWFycm93LXVwXCIsIFwiQ2lyY2xlIEFycm93IFVwXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNpcmNsZS1hcnJvdy1kb3duXCIsIFwiQ2lyY2xlIEFycm93IERvd25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZ2xvYmVcIiwgXCJHbG9iZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ3cmVuY2hcIiwgXCJXcmVuY2hcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidGFza3NcIiwgXCJUYXNrc1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmaWx0ZXJcIiwgXCJGaWx0ZXJcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYnJpZWZjYXNlXCIsIFwiQnJpZWZjYXNlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZ1bGxzY3JlZW5cIiwgXCJGdWxsc2NyZWVuXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImRhc2hib2FyZFwiLCBcIkRhc2hib2FyZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwYXBlcmNsaXBcIiwgXCJQYXBlcmNsaXBcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaGVhcnQtZW1wdHlcIiwgXCJIZWFydCBFbXB0eVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJsaW5rXCIsIFwiTGlua1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwaG9uZVwiLCBcIlBob25lXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInB1c2hwaW5cIiwgXCJQdXNocGluXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInVzZFwiLCBcIlVzZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJnYnBcIiwgXCJHYnBcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic29ydFwiLCBcIlNvcnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic29ydC1ieS1hbHBoYWJldFwiLCBcIlNvcnQgQnkgQWxwaGFiZXRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic29ydC1ieS1hbHBoYWJldC1hbHRcIiwgXCJTb3J0IEJ5IEFscGhhYmV0IEFsdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzb3J0LWJ5LW9yZGVyXCIsIFwiU29ydCBCeSBPcmRlclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzb3J0LWJ5LW9yZGVyLWFsdFwiLCBcIlNvcnQgQnkgT3JkZXIgQWx0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNvcnQtYnktYXR0cmlidXRlc1wiLCBcIlNvcnQgQnkgQXR0cmlidXRlc1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzb3J0LWJ5LWF0dHJpYnV0ZXMtYWx0XCIsIFwiU29ydCBCeSBBdHRyaWJ1dGVzIEFsdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ1bmNoZWNrZWRcIiwgXCJVbmNoZWNrZWRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZXhwYW5kXCIsIFwiRXhwYW5kXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNvbGxhcHNlLWRvd25cIiwgXCJDb2xsYXBzZSBEb3duXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNvbGxhcHNlLXVwXCIsIFwiQ29sbGFwc2UgVXBcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibG9nLWluXCIsIFwiTG9nIEluXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZsYXNoXCIsIFwiRmxhc2hcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibG9nLW91dFwiLCBcIkxvZyBPdXRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibmV3LXdpbmRvd1wiLCBcIk5ldyBXaW5kb3dcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmVjb3JkXCIsIFwiUmVjb3JkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNhdmVcIiwgXCJTYXZlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm9wZW5cIiwgXCJPcGVuXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNhdmVkXCIsIFwiU2F2ZWRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaW1wb3J0XCIsIFwiSW1wb3J0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImV4cG9ydFwiLCBcIkV4cG9ydFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzZW5kXCIsIFwiU2VuZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmbG9wcHktZGlza1wiLCBcIkZsb3BweSBEaXNrXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZsb3BweS1zYXZlZFwiLCBcIkZsb3BweSBTYXZlZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmbG9wcHktcmVtb3ZlXCIsIFwiRmxvcHB5IFJlbW92ZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmbG9wcHktc2F2ZVwiLCBcIkZsb3BweSBTYXZlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZsb3BweS1vcGVuXCIsIFwiRmxvcHB5IE9wZW5cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY3JlZGl0LWNhcmRcIiwgXCJDcmVkaXQgQ2FyZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0cmFuc2ZlclwiLCBcIlRyYW5zZmVyXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImN1dGxlcnlcIiwgXCJDdXRsZXJ5XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImhlYWRlclwiLCBcIkhlYWRlclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjb21wcmVzc2VkXCIsIFwiQ29tcHJlc3NlZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJlYXJwaG9uZVwiLCBcIkVhcnBob25lXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInBob25lLWFsdFwiLCBcIlBob25lIEFsdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0b3dlclwiLCBcIlRvd2VyXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInN0YXRzXCIsIFwiU3RhdHNcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic2QtdmlkZW9cIiwgXCJTZCBWaWRlb1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJoZC12aWRlb1wiLCBcIkhkIFZpZGVvXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInN1YnRpdGxlc1wiLCBcIlN1YnRpdGxlc1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzb3VuZC1zdGVyZW9cIiwgXCJTb3VuZCBTdGVyZW9cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic291bmQtZG9sYnlcIiwgXCJTb3VuZCBEb2xieVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzb3VuZC01LTFcIiwgXCJTb3VuZCA1IDFcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic291bmQtNi0xXCIsIFwiU291bmQgNiAxXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNvdW5kLTctMVwiLCBcIlNvdW5kIDcgMVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjb3B5cmlnaHQtbWFya1wiLCBcIkNvcHlyaWdodCBNYXJrXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInJlZ2lzdHJhdGlvbi1tYXJrXCIsIFwiUmVnaXN0cmF0aW9uIE1hcmtcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2xvdWQtZG93bmxvYWRcIiwgXCJDbG91ZCBEb3dubG9hZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjbG91ZC11cGxvYWRcIiwgXCJDbG91ZCBVcGxvYWRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidHJlZS1jb25pZmVyXCIsIFwiVHJlZSBDb25pZmVyXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRyZWUtZGVjaWR1b3VzXCIsIFwiVHJlZSBEZWNpZHVvdXNcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2RcIiwgXCJDZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzYXZlLWZpbGVcIiwgXCJTYXZlIEZpbGVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwib3Blbi1maWxlXCIsIFwiT3BlbiBGaWxlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImxldmVsLXVwXCIsIFwiTGV2ZWwgVXBcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY29weVwiLCBcIkNvcHlcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicGFzdGVcIiwgXCJQYXN0ZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJhbGVydFwiLCBcIkFsZXJ0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImVxdWFsaXplclwiLCBcIkVxdWFsaXplclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJraW5nXCIsIFwiS2luZ1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJxdWVlblwiLCBcIlF1ZWVuXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInBhd25cIiwgXCJQYXduXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJpc2hvcFwiLCBcIkJpc2hvcFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJrbmlnaHRcIiwgXCJLbmlnaHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYmFieS1mb3JtdWxhXCIsIFwiQmFieSBGb3JtdWxhXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRlbnRcIiwgXCJUZW50XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJsYWNrYm9hcmRcIiwgXCJCbGFja2JvYXJkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJlZFwiLCBcIkJlZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJhcHBsZVwiLCBcIkFwcGxlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImVyYXNlXCIsIFwiRXJhc2VcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaG91cmdsYXNzXCIsIFwiSG91cmdsYXNzXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImxhbXBcIiwgXCJMYW1wXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImR1cGxpY2F0ZVwiLCBcIkR1cGxpY2F0ZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwaWdneS1iYW5rXCIsIFwiUGlnZ3kgQmFua1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzY2lzc29yc1wiLCBcIlNjaXNzb3JzXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJpdGNvaW5cIiwgXCJCaXRjb2luXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInllblwiLCBcIlllblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJydWJsZVwiLCBcIlJ1YmxlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNjYWxlXCIsIFwiU2NhbGVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaWNlLWxvbGx5XCIsIFwiSWNlIExvbGx5XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImljZS1sb2xseS10YXN0ZWRcIiwgXCJJY2UgTG9sbHkgVGFzdGVkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImVkdWNhdGlvblwiLCBcIkVkdWNhdGlvblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJvcHRpb24taG9yaXpvbnRhbFwiLCBcIk9wdGlvbiBIb3Jpem9udGFsXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm9wdGlvbi12ZXJ0aWNhbFwiLCBcIk9wdGlvbiBWZXJ0aWNhbFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJtZW51LWhhbWJ1cmdlclwiLCBcIk1lbnUgSGFtYnVyZ2VyXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm1vZGFsLXdpbmRvd1wiLCBcIk1vZGFsIFdpbmRvd1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJvaWxcIiwgXCJPaWxcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZ3JhaW5cIiwgXCJHcmFpblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzdW5nbGFzc2VzXCIsIFwiU3VuZ2xhc3Nlc1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0ZXh0LXNpemVcIiwgXCJUZXh0IFNpemVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidGV4dC1jb2xvclwiLCBcIlRleHQgQ29sb3JcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidGV4dC1iYWNrZ3JvdW5kXCIsIFwiVGV4dCBCYWNrZ3JvdW5kXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm9iamVjdC1hbGlnbi10b3BcIiwgXCJPYmplY3QgQWxpZ24gVG9wXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm9iamVjdC1hbGlnbi1ib3R0b21cIiwgXCJPYmplY3QgQWxpZ24gQm90dG9tXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm9iamVjdC1hbGlnbi1ob3Jpem9udGFsXCIsIFwiT2JqZWN0IEFsaWduIEhvcml6b250YWxcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwib2JqZWN0LWFsaWduLWxlZnRcIiwgXCJPYmplY3QgQWxpZ24gTGVmdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJvYmplY3QtYWxpZ24tdmVydGljYWxcIiwgXCJPYmplY3QgQWxpZ24gVmVydGljYWxcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwib2JqZWN0LWFsaWduLXJpZ2h0XCIsIFwiT2JqZWN0IEFsaWduIFJpZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRyaWFuZ2xlLXJpZ2h0XCIsIFwiVHJpYW5nbGUgUmlnaHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidHJpYW5nbGUtbGVmdFwiLCBcIlRyaWFuZ2xlIExlZnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidHJpYW5nbGUtYm90dG9tXCIsIFwiVHJpYW5nbGUgQm90dG9tXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRyaWFuZ2xlLXRvcFwiLCBcIlRyaWFuZ2xlIFRvcFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjb25zb2xlXCIsIFwiQ29uc29sZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzdXBlcnNjcmlwdFwiLCBcIlN1cGVyc2NyaXB0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInN1YnNjcmlwdFwiLCBcIlN1YnNjcmlwdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJtZW51LWxlZnRcIiwgXCJNZW51IExlZnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibWVudS1yaWdodFwiLCBcIk1lbnUgUmlnaHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibWVudS1kb3duXCIsIFwiTWVudSBEb3duXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm1lbnUtdXBcIiwgXCJNZW51IFVwXCIpO1xyXG4gICAgfTtcclxuICAgIEljb25QaWNrZXIucHJvdG90eXBlLmFkZEljb24gPSBmdW5jdGlvbiAobmFtZSwgbGFiZWwpIHtcclxuICAgICAgICB0aGlzLmljb25zW25hbWVdID0geyBcIm5hbWVcIjogbmFtZSwgXCJsYWJlbFwiOiBsYWJlbCB9O1xyXG4gICAgfTtcclxuICAgIEljb25QaWNrZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBvcHRpb25zID0gW107XHJcbiAgICAgICAgdmFyIGNscztcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXModGhpcy5pY29ucyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBvcHQgPSBfYVtfaV07XHJcbiAgICAgICAgICAgIHZhciBjbHNfMSA9ICdnbHlwaGljb24gZ2x5cGhpY29uLScgKyB0aGlzLmljb25zW29wdF0ubmFtZSArICcgaWNvbi1waWNrZXItaWNvbic7XHJcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwgeyBvbkNsaWNrOiBmdW5jdGlvbiAoZSkgeyBfdGhpcy5vbmNoYW5nZShlKTsgfSB9LFxyXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IGNsc18xIH0pLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5pY29uc1tvcHRdLm5hbWUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImJ0bi1ncm91cFwiIH0sXHJcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgeyB0eXBlOiBcImJ1dHRvblwiLCBjbGFzc05hbWU6IFwiYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZVwiLCBcImRhdGEtdG9nZ2xlXCI6IFwiZHJvcGRvd25cIiB9LFxyXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6ICdnbHlwaGljb24gZ2x5cGhpY29uLScgKyB0aGlzLnNlbGVjdGVkSXRlbSB9KSxcclxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcImNhcmV0XCIgfSkpLFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwgeyBjbGFzc05hbWU6IFwiZHJvcGRvd24tbWVudVwiLCByb2xlOiBcIm1lbnVcIiB9LCBvcHRpb25zKSkpO1xyXG4gICAgICAgIC8vIDxzZWxlY3QgY2xhc3NOYW1lPVwibW9kYWwtZGlhbG9nLXNlbGVjdFwiIGRhdGEtc2hvdy1pY29uPVwidHJ1ZVwiIG9uQ2hhbmdlPXsoZSkgPT4ge3RoaXMuaXRlbVNlbGVjdGVkOyB9fT5cclxuICAgICAgICAvLyAgICB7b3B0aW9uc31cclxuICAgICAgICAvLyA8L3NlbGVjdD5cclxuICAgIH07XHJcbiAgICByZXR1cm4gSWNvblBpY2tlcjtcclxufShSZWFjdC5Db21wb25lbnQpKTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gSWNvblBpY2tlcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuRmxvd0NoYXJ0ID0gZXhwb3J0cy5GbG93Q2hhcnRDb2x1bW5EZWZpbml0aW9uID0gZXhwb3J0cy5lRmxvd0NoYXJ0VHlwZSA9IHZvaWQgMDtcclxudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xyXG52YXIgRmxvd0Jhc2VDb21wb25lbnRfMSA9IHJlcXVpcmUoXCIuL0Zsb3dCYXNlQ29tcG9uZW50XCIpO1xyXG52YXIgRmxvd0ZpZWxkXzEgPSByZXF1aXJlKFwiLi9GbG93RmllbGRcIik7XHJcbnZhciBlRmxvd0NoYXJ0VHlwZTtcclxuKGZ1bmN0aW9uIChlRmxvd0NoYXJ0VHlwZSkge1xyXG4gICAgZUZsb3dDaGFydFR5cGVbZUZsb3dDaGFydFR5cGVbXCJCYXJDaGFydFwiXSA9IDBdID0gXCJCYXJDaGFydFwiO1xyXG4gICAgZUZsb3dDaGFydFR5cGVbZUZsb3dDaGFydFR5cGVbXCJDb2x1bW5DaGFydFwiXSA9IDFdID0gXCJDb2x1bW5DaGFydFwiO1xyXG4gICAgZUZsb3dDaGFydFR5cGVbZUZsb3dDaGFydFR5cGVbXCJHZW9DaGFydFwiXSA9IDJdID0gXCJHZW9DaGFydFwiO1xyXG4gICAgZUZsb3dDaGFydFR5cGVbZUZsb3dDaGFydFR5cGVbXCJQaWVDaGFydFwiXSA9IDNdID0gXCJQaWVDaGFydFwiO1xyXG4gICAgZUZsb3dDaGFydFR5cGVbZUZsb3dDaGFydFR5cGVbXCJEb251dENoYXJ0XCJdID0gNF0gPSBcIkRvbnV0Q2hhcnRcIjtcclxufSkoZUZsb3dDaGFydFR5cGUgPSBleHBvcnRzLmVGbG93Q2hhcnRUeXBlIHx8IChleHBvcnRzLmVGbG93Q2hhcnRUeXBlID0ge30pKTtcclxudmFyIEZsb3dDaGFydENvbHVtbkRlZmluaXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGbG93Q2hhcnRDb2x1bW5EZWZpbml0aW9uKGRldmVsb3Blck5hbWUsIHR5cGUpIHtcclxuICAgICAgICB0aGlzLmRldmVsb3Blck5hbWUgPSBkZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRmxvd0NoYXJ0Q29sdW1uRGVmaW5pdGlvbjtcclxufSgpKTtcclxuZXhwb3J0cy5GbG93Q2hhcnRDb2x1bW5EZWZpbml0aW9uID0gRmxvd0NoYXJ0Q29sdW1uRGVmaW5pdGlvbjtcclxudmFyIEZsb3dDaGFydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhGbG93Q2hhcnQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBGbG93Q2hhcnQocHJvcHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5hcGlLZXkgPSBcIlwiO1xyXG4gICAgICAgIF90aGlzLmJlZ2luQ2hhcnRzQXBpID0gX3RoaXMuYmVnaW5DaGFydHNBcGkuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuYXBpTG9hZGVkID0gX3RoaXMuYXBpTG9hZGVkLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLmRyYXdDaGFydCA9IF90aGlzLmRyYXdDaGFydC5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5mbG93TW92ZWQgPSBfdGhpcy5mbG93TW92ZWQuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuYXBpS2V5ID0gX3RoaXMuZ2V0QXR0cmlidXRlKFwiQVBJS2V5XCIsIFwiXCIpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIEZsb3dDaGFydC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBfc3VwZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50LmNhbGwodGhpcyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmRvbnRMb2FkQWxsVmFsdWVzKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5hZGREb25lTGlzdGVuZXIodGhpcy5mbG93TW92ZWQsIHRoaXMuY29tcG9uZW50SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luQ2hhcnRzQXBpKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0NoYXJ0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIF9zdXBlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQuY2FsbCh0aGlzKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLnJlbW92ZURvbmVMaXN0ZW5lcih0aGlzLmNvbXBvbmVudElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGbG93Q2hhcnQucHJvdG90eXBlLmZsb3dNb3ZlZCA9IGZ1bmN0aW9uICh4aHIsIHJlcXVlc3QpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBtZTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgbWUgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgaWYgKHhoci5pbnZva2VUeXBlID09PSBcIkZPUldBUkRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxvYWRpbmdTdGF0ZSAhPT0gRmxvd0Jhc2VDb21wb25lbnRfMS5lTG9hZGluZ1N0YXRlLnJlYWR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgbWUuZmxvd01vdmVkKHhociwgcmVxdWVzdCk7IH0sIDUwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLm1vZGVsLnBhcnNlRW5naW5lUmVzcG9uc2UoeGhyLCB0aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luQ2hhcnRzQXBpKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGbG93Q2hhcnQucHJvdG90eXBlLmJlZ2luQ2hhcnRzQXBpID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZ29vZ2xlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgZ29vZ2xlLmNoYXJ0cyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuRzEzQ2hhcnRMb2FkaW5nID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgICAgICAgICAgICAgc2NyaXB0LnNyYyA9IFwiaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vY2hhcnRzL2xvYWRlci5qc1wiO1xyXG4gICAgICAgICAgICAgICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCB0aGlzLmFwaUxvYWRlZCk7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4gICAgICAgICAgICAgICAgd2luZG93LkcxM0NoYXJ0TG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhbHJlYWR5IGxvYWRpbmdcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuYmVnaW5DaGFydHNBcGksIDMwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBpTG9hZGVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZsb3dDaGFydC5wcm90b3R5cGUuYXBpTG9hZGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBpZiAoIShnb29nbGUgPT09IG51bGwgfHwgZ29vZ2xlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnb29nbGUuY2hhcnRzKSB8fCAhKChfYSA9IGdvb2dsZSA9PT0gbnVsbCB8fCBnb29nbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdvb2dsZS52aXN1YWxpemF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuR2VvQ2hhcnQpKSB7XHJcbiAgICAgICAgICAgIGdvb2dsZS5jaGFydHMubG9hZCgnY3VycmVudCcsIHsgcGFja2FnZXM6IFsnY29yZWNoYXJ0JywgJ2dlb2NoYXJ0J10sIG1hcHNBcGlLZXk6IHRoaXMuYXBpS2V5IH0pO1xyXG4gICAgICAgICAgICBnb29nbGUuY2hhcnRzLnNldE9uTG9hZENhbGxiYWNrKHRoaXMuZHJhd0NoYXJ0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd0NoYXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIHlvdSBjYW4gb3ZlcnJpZGUgdGhpcyB0byBidWlsZCB5b3VyIG93biBkYXRhIC0gcG9wdWxhdGUgZGF0YVRhYmxlXHJcbiAgICBGbG93Q2hhcnQucHJvdG90eXBlLmJ1aWxkRGF0YSA9IGZ1bmN0aW9uIChkYXRhVGFibGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLm1vZGVsLmRhdGFTb3VyY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5kYXRhU291cmNlLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIF90aGlzLnByb3BlcnR5TmFtZXMuZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcCA9IGl0ZW0ucHJvcGVydGllc1twcm9wZXJ0eS5kZXZlbG9wZXJOYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkudHlwZSA9PT0gRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnROdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2gocGFyc2VJbnQocHJvcC52YWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2gocHJvcC52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBkYXRhVGFibGUucHVzaCh2YWx1ZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd0NoYXJ0LnByb3RvdHlwZS5kcmF3Q2hhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGRhdGFUYWJsZSA9IFtdO1xyXG4gICAgICAgIGRhdGFUYWJsZS5wdXNoKHRoaXMuY29sdW1uTmFtZXMpO1xyXG4gICAgICAgIHRoaXMuYnVpbGREYXRhKGRhdGFUYWJsZSk7XHJcbiAgICAgICAgdGhpcy5jaGFydERhdGEgPSBnb29nbGUudmlzdWFsaXphdGlvbi5hcnJheVRvRGF0YVRhYmxlKGRhdGFUYWJsZSk7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNoYXJ0KSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5jaGFydFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgZUZsb3dDaGFydFR5cGUuQmFyQ2hhcnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydCA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5CYXJDaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmNvbXBvbmVudElkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVGbG93Q2hhcnRUeXBlLkNvbHVtbkNoYXJ0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uQ29sdW1uQ2hhcnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5jb21wb25lbnRJZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBlRmxvd0NoYXJ0VHlwZS5HZW9DaGFydDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0ID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkdlb0NoYXJ0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuY29tcG9uZW50SWQpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZUZsb3dDaGFydFR5cGUuUGllQ2hhcnQ6XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVGbG93Q2hhcnRUeXBlLkRvbnV0Q2hhcnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydCA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5QaWVDaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmNvbXBvbmVudElkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGFydC5kcmF3KHRoaXMuY2hhcnREYXRhLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgfTtcclxuICAgIEZsb3dDaGFydC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGlkOiB0aGlzLmNvbXBvbmVudElkIH0pKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmxvd0NoYXJ0O1xyXG59KEZsb3dCYXNlQ29tcG9uZW50XzEuRmxvd0Jhc2VDb21wb25lbnQpKTtcclxuZXhwb3J0cy5GbG93Q2hhcnQgPSBGbG93Q2hhcnQ7XHJcbiIsImltcG9ydCB7IEZsb3dEaXNwbGF5Q29sdW1uLCBGbG93T2JqZWN0RGF0YSB9IGZyb20gXCJmbG93LWNvbXBvbmVudC1tb2RlbFwiO1xyXG5pbXBvcnQgQ2VsbEl0ZW0gZnJvbSBcIi4vQ2VsbEl0ZW1cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvd0l0ZW0ge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGNvbHVtbnM6IE1hcDxzdHJpbmcsQ2VsbEl0ZW0+ID0gbmV3IE1hcCgpO1xyXG4gICAgb2JqZWN0RGF0YTogRmxvd09iamVjdERhdGE7XHJcbn0iLCJpbXBvcnQgeyBlQ29udGVudFR5cGUgfSBmcm9tIFwiZmxvdy1jb21wb25lbnQtbW9kZWxcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENlbGxJdGVtIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBsYWJlbDogc3RyaW5nO1xyXG4gICAgdHlwZTogZUNvbnRlbnRUeXBlO1xyXG4gICAgb3JpZ2luYWxWYWx1ZTogYW55O1xyXG4gICAgbmV3VmFsdWU6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLm9yaWdpbmFsVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLm5ld1ZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBGbG93RGlzcGxheUNvbHVtbiwgRmxvd09iamVjdERhdGEsIEZsb3dPYmplY3REYXRhUHJvcGVydHksIEZsb3dPdXRjb21lIH0gZnJvbSBcImZsb3ctY29tcG9uZW50LW1vZGVsXCI7XHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFNlYXJjaEZpbHRlclRhYmxlIGZyb20gXCIuL1NlYXJjaEZpbHRlclRhYmxlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hGaWx0ZXJUYWJsZVJvdyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxhbnksYW55PiB7XHJcbiAgICBcclxuXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG5cclxuICAgICAgICBjb25zdCByb290OiBTZWFyY2hGaWx0ZXJUYWJsZSA9IHRoaXMucHJvcHMucm9vdDtcclxuICAgICAgICBjb25zdCBvYmpEYXRhOiAgRmxvd09iamVjdERhdGEgPSByb290LnJvd01hcC5nZXQodGhpcy5wcm9wcy5pZCk/Lm9iamVjdERhdGE7XHJcblxyXG4gICAgICAgIGxldCBidXR0b25zOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHJvb3Qub3V0Y29tZXMpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKHJvb3Qub3V0Y29tZXNba2V5XS5pc0J1bGtBY3Rpb24gPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaWNvbjogYW55O1xyXG4gICAgICAgICAgICAgICAgbGV0IGxhYmVsOiBhbnk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoKCFyb290Lm91dGNvbWVzW2tleV0uYXR0cmlidXRlc1tcImRpc3BsYXlcIl0pIHx8IHJvb3Qub3V0Y29tZXNba2V5XS5hdHRyaWJ1dGVzW1wiZGlzcGxheVwiXS52YWx1ZS5pbmRleE9mKFwidGV4dFwiKT49MCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPShcclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC10YWJsZS1jZWxsLWJ1dHRvbi1sYWJlbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyb290Lm91dGNvbWVzW2tleV0ubGFiZWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoKHJvb3Qub3V0Y29tZXNba2V5XS5hdHRyaWJ1dGVzW1wiZGlzcGxheVwiXSkgJiYgcm9vdC5vdXRjb21lc1trZXldLmF0dHJpYnV0ZXNbXCJkaXNwbGF5XCJdLnZhbHVlLmluZGV4T2YoXCJpY29uXCIpPj0wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbj0oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wic2Z0LXRhYmxlLWNlbGwtYnV0dG9uLWljb24gZ2x5cGhpY29uIGdseXBoaWNvbi1cIiArIChyb290Lm91dGNvbWVzW2tleV0uYXR0cmlidXRlc1tcImljb25cIl0udmFsdWUgfHwgXCJwbHVzXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnMucHVzaChcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC10YWJsZS1jZWxsLWJ1dHRvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtyb290Lm91dGNvbWVzW2tleV0ubGFiZWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290LmRvT3V0Y29tZShrZXksb2JqRGF0YS5pbnRlcm5hbElkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2ljb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtsYWJlbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCBjb2xzOiBhbnlbXSA9IFtdO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICBjb2xzLnB1c2goXHJcbiAgICAgICAgICAgIDx0ZFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXRhYmxlLWNlbGxcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNoZWNrYm94XCJcclxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhldmVudDogYW55KSA9PiB7cm9vdC50b2dnbGVTZWxlY3QoZXZlbnQsIHRoaXMucHJvcHMuaWQgKX19XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17cm9vdC5zZWxlY3RlZFJvd01hcC5oYXModGhpcy5wcm9wcy5pZCl9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGlmKGJ1dHRvbnMubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgICAgIGNvbHMucHVzaChcclxuICAgICAgICAgICAgICAgIDx0ZFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC10YWJsZS1jZWxsXCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC10YWJsZS1jZWxsLWJ1dHRvbnNcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2J1dHRvbnN9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcm9vdC5jb2xNYXAuZm9yRWFjaCgoY29sOiBGbG93RGlzcGxheUNvbHVtbikgPT4ge1xyXG4gICAgICAgICAgICBjb2xzLnB1c2goXHJcbiAgICAgICAgICAgICAgICA8dGRcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtdGFibGUtY2VsbFwiXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXRhYmxlLWNlbGwtdGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7b2JqRGF0YS5wcm9wZXJ0aWVzW2NvbC5kZXZlbG9wZXJOYW1lXS52YWx1ZX1cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDx0clxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXRhYmxlLXJvd1wiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIHtjb2xzfSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgPC90cj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgRmxvd0Rpc3BsYXlDb2x1bW4sIEZsb3dPdXRjb21lIH0gZnJvbSBcImZsb3ctY29tcG9uZW50LW1vZGVsXCI7XHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFNlYXJjaEZpbHRlclRhYmxlIGZyb20gXCIuL1NlYXJjaEZpbHRlclRhYmxlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hGaWx0ZXJUYWJsZUhlYWRlcnMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8YW55LGFueT4ge1xyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IGhlYWRlcnM6IGFueVtdID0gW107XHJcblxyXG4gICAgICAgIGNvbnN0IHJvb3Q6IFNlYXJjaEZpbHRlclRhYmxlID0gdGhpcy5wcm9wcy5yb290O1xyXG5cclxuICAgICAgICBsZXQgYnV0dG9uczogYW55W10gPSBbXTtcclxuICAgICAgICBPYmplY3Qua2V5cyhyb290Lm91dGNvbWVzKS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBpZihyb290Lm91dGNvbWVzW2tleV0uaXNCdWxrQWN0aW9uID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9ucy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYocm9vdC5jb2xNYXAuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgaGVhZGVycy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgPHRoXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNoZWNrLWhlYWRlclwiXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtY2hlY2tib3hcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZXZlbnQ6IGFueSkgPT4ge3Jvb3QudG9nZ2xlU2VsZWN0QWxsKGV2ZW50KX19XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvdGg+XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpZihidXR0b25zLmxlbmd0aD4wKSB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgPHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jb2x1bW4taGVhZGVyXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNvbHVtbi1oZWFkZXItdGl0bGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jb2x1bW4taGVhZGVyLXRpdGxlLWxhYmVsXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1wiQWN0aW9uc1wifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90aD5cclxuICAgICAgICAgICAgICAgICk7IFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByb290LmNvbE1hcC5mb3JFYWNoKChjb2w6IEZsb3dEaXNwbGF5Q29sdW1uKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHNvcnRJY29uOiBhbnkgPSByb290LmZpbHRlcnMuZ2V0U29ydEljb24oY29sLmRldmVsb3Blck5hbWUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGZpbHRlckljb246IGFueSA9IHJvb3QuZmlsdGVycy5nZXRGaWx0ZXJJY29uKGNvbC5kZXZlbG9wZXJOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgPHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jb2x1bW4taGVhZGVyXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jb2x1bW4taGVhZGVyLXdyYXBwZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNvbHVtbi1oZWFkZXItdG9wXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jb2x1bW4taGVhZGVyLXRpdGxlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtY29sdW1uLWhlYWRlci10aXRsZS1sYWJlbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjb2wubGFiZWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jb2x1bW4taGVhZGVyLWJvdHRvbVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtY29sdW1uLWhlYWRlci1mbGFnc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c29ydEljb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtY29sdW1uLWhlYWRlci1idXR0b25zXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtmaWx0ZXJJY29ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGg+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDx0clxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNvbHVtbi1oZWFkZXJzXCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAge2hlYWRlcnN9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgQ29sdW1uQ3JpdGVyaWEgZnJvbSBcIi4vQ29sdW1uQ3JpdGVyaWFcIjtcclxuaW1wb3J0IENvbHVtbkZpbHRlcnMsIHsgZUZpbHRlckV2ZW50LCBlU29ydERpcmVjdGlvbiB9IGZyb20gXCIuL0NvbHVtbkZpbHRlcnNcIjtcclxuXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sdW1uRmlsdGVyIHtcclxuICAgIGtleTogc3RyaW5nO1xyXG4gICAgc29ydDogZVNvcnREaXJlY3Rpb24gPSBlU29ydERpcmVjdGlvbi5ub25lO1xyXG4gICAgcGFyZW50OiBDb2x1bW5GaWx0ZXJzO1xyXG4gICAgY3JpdGVyaWE6IEFycmF5PENvbHVtbkNyaXRlcmlhPiA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGtleTogc3RyaW5nLCBwYXJlbnQ6IENvbHVtbkZpbHRlcnMsIHNvcnQ6IGVTb3J0RGlyZWN0aW9uID0gZVNvcnREaXJlY3Rpb24ubm9uZSwgY3JpdGVyaWE6IEFycmF5PENvbHVtbkNyaXRlcmlhPiA9IFtdKXtcclxuICAgICAgICB0aGlzLmtleSA9IGtleTtcclxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuICAgICAgICB0aGlzLnNvcnQ9c29ydDtcclxuICAgICAgICBjcml0ZXJpYS5mb3JFYWNoKChjcml0OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgY3JpdD1KU09OLnBhcnNlKGNyaXQpO1xyXG4gICAgICAgICAgICB0aGlzLmNyaXRlcmlhLnB1c2gobmV3IENvbHVtbkNyaXRlcmlhKGNyaXQuY29tcGFyYXRvciwgY3JpdC52YWx1ZSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubm90aWZ5ID0gdGhpcy5ub3RpZnkuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhckZpbHRlcnMoKSB7XHJcbiAgICAgICAgdGhpcy5jcml0ZXJpYSA9IFtdO1xyXG4gICAgICAgIHRoaXMubm90aWZ5KGVGaWx0ZXJFdmVudC5maWx0ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIG5vdGlmeShldmVudDogZUZpbHRlckV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5KHRoaXMua2V5LCBldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgc29ydEFzY2VuZGluZyAoKSB7XHJcbiAgICAgICAgdGhpcy5zb3J0ID0gZVNvcnREaXJlY3Rpb24uYXNjZW5kaW5nO1xyXG4gICAgICAgIHRoaXMubm90aWZ5KGVGaWx0ZXJFdmVudC5zb3J0KTtcclxuICAgIH1cclxuXHJcbiAgICBzb3J0RGVzY2VuZGluZyAoKSB7XHJcbiAgICAgICAgdGhpcy5zb3J0ID0gZVNvcnREaXJlY3Rpb24uZGVzY2VuZGluZztcclxuICAgICAgICB0aGlzLm5vdGlmeShlRmlsdGVyRXZlbnQuc29ydCk7XHJcbiAgICB9XHJcblxyXG4gICAgc29ydFRvZ2dsZSAoKSB7XHJcbiAgICAgICAgc3dpdGNoKHRoaXMuc29ydCkge1xyXG4gICAgICAgICAgICBjYXNlIGVTb3J0RGlyZWN0aW9uLm5vbmU6XHJcbiAgICAgICAgICAgIGNhc2UgZVNvcnREaXJlY3Rpb24uZGVzY2VuZGluZzpcclxuICAgICAgICAgICAgICAgIHRoaXMuc29ydCA9IGVTb3J0RGlyZWN0aW9uLmFzY2VuZGluZztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zb3J0PWVTb3J0RGlyZWN0aW9uLmRlc2NlbmRpbmc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ub3RpZnkoZUZpbHRlckV2ZW50LnNvcnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNvcnROb25lICgpIHtcclxuICAgICAgICB0aGlzLnNvcnQgPSBlU29ydERpcmVjdGlvbi5ub25lO1xyXG4gICAgICAgIHRoaXMubm90aWZ5KGVGaWx0ZXJFdmVudC5zb3J0KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRGb3JTdG9yYWdlKCkgOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBmaWx0ZXI6IGFueSA9IHt9O1xyXG4gICAgICAgIGZpbHRlci5rZXkgPSB0aGlzLmtleTtcclxuICAgICAgICBmaWx0ZXIuc29ydCA9IHRoaXMuc29ydDtcclxuICAgICAgICBmaWx0ZXIuY3JpdGVyaWEgPSBbXTtcclxuICAgICAgICB0aGlzLmNyaXRlcmlhLmZvckVhY2goKGNyaXQ6IENvbHVtbkNyaXRlcmlhKSA9PiB7XHJcbiAgICAgICAgICAgIGZpbHRlci5jcml0ZXJpYS5wdXNoKGNyaXQuZ2V0Rm9yU3RvcmFnZSgpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZmlsdGVyKTtcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IENvbHVtbkNyaXRlcmlhLCB7IGVDb2x1bW5Db21wYXJhdG9yIH0gZnJvbSBcIi4vQ29sdW1uQ3JpdGVyaWFcIjtcclxuaW1wb3J0IENvbHVtbkZpbHRlciBmcm9tIFwiLi9Db2x1bW5GaWx0ZXJcIjtcclxuaW1wb3J0IE11bHRpU2VsZWN0IGZyb20gXCIuL011bHRpU2VsZWN0XCI7XHJcbmltcG9ydCBTZWFyY2hGaWx0ZXJUYWJsZSBmcm9tIFwiLi9TZWFyY2hGaWx0ZXJUYWJsZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsdGVyQ29uZmlnRm9ybSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxhbnksYW55PiB7XHJcbiAgICBcclxuICAgIGZpbHRlcjogQ29sdW1uRmlsdGVyO1xyXG4gICAgbmV3Q3JpdGVyaWE6IENvbHVtbkNyaXRlcmlhW107XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLmZpbHRlciA9IHRoaXMucHJvcHMuZmlsdGVyO1xyXG4gICAgICAgIHRoaXMubmV3Q3JpdGVyaWEgPSBbXTtcclxuICAgICAgICB0aGlzLmZpbHRlci5jcml0ZXJpYS5mb3JFYWNoKChjcml0ZXJpYTogQ29sdW1uQ3JpdGVyaWEpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5uZXdDcml0ZXJpYS5wdXNoKGNyaXRlcmlhKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmFkZENyaXRlcmlhID0gdGhpcy5hZGRDcml0ZXJpYS5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZENyaXRlcmlhKCkge1xyXG4gICAgICAgIHRoaXMubmV3Q3JpdGVyaWEucHVzaChuZXcgQ29sdW1uQ3JpdGVyaWEoZUNvbHVtbkNvbXBhcmF0b3IuZXF1YWxUbyxcIlwiKSk7XHJcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE9wdGlvbnMoY3JpdGVyaWE6IENvbHVtbkNyaXRlcmlhKSA6IGFueSB7XHJcbiAgICAgICAgbGV0IG9wdGlvbnM6IGFueVtdID0gW107XHJcbiAgICAgICAgb3B0aW9ucy5wdXNoKFxyXG4gICAgICAgICAgICA8b3B0aW9uXHJcbiAgICAgICAgICAgICAgICB2YWx1ZT17ZUNvbHVtbkNvbXBhcmF0b3IuZXF1YWxUb31cclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkPXtjcml0ZXJpYS5jb21wYXJhdG9yPT09ZUNvbHVtbkNvbXBhcmF0b3IuZXF1YWxUb31cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgRXF1YWxzXHJcbiAgICAgICAgICAgIDwvb3B0aW9uPixcclxuICAgICAgICAgICAgPG9wdGlvblxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e2VDb2x1bW5Db21wYXJhdG9yLm5vdEVxdWFsVG99XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZD17Y3JpdGVyaWEuY29tcGFyYXRvcj09PWVDb2x1bW5Db21wYXJhdG9yLm5vdEVxdWFsVG99XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIE5vdCBFcXVhbCBUb1xyXG4gICAgICAgICAgICA8L29wdGlvbj4sXHJcbiAgICAgICAgICAgIDxvcHRpb25cclxuICAgICAgICAgICAgICAgIHZhbHVlPXtlQ29sdW1uQ29tcGFyYXRvci5jb250YWluc31cclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkPXtjcml0ZXJpYS5jb21wYXJhdG9yPT09ZUNvbHVtbkNvbXBhcmF0b3IuY29udGFpbnN9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIENvbnRhaW5zXHJcbiAgICAgICAgICAgIDwvb3B0aW9uPixcclxuICAgICAgICAgICAgPG9wdGlvblxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e2VDb2x1bW5Db21wYXJhdG9yLm5vdENvbnRhaW5zfVxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2NyaXRlcmlhLmNvbXBhcmF0b3I9PT1lQ29sdW1uQ29tcGFyYXRvci5ub3RDb250YWluc31cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgRG9lcyBOb3QgQ29udGFpblxyXG4gICAgICAgICAgICA8L29wdGlvbj4sXHJcbiAgICAgICAgICAgIDxvcHRpb25cclxuICAgICAgICAgICAgICAgIHZhbHVlPXtlQ29sdW1uQ29tcGFyYXRvci5zdGFydHNXaXRofVxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2NyaXRlcmlhLmNvbXBhcmF0b3I9PT1lQ29sdW1uQ29tcGFyYXRvci5zdGFydHNXaXRofVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICBTdGFydHMgV2l0aFxyXG4gICAgICAgICAgICA8L29wdGlvbj4sXHJcbiAgICAgICAgICAgIDxvcHRpb25cclxuICAgICAgICAgICAgICAgIHZhbHVlPXtlQ29sdW1uQ29tcGFyYXRvci5lbmRzV2l0aH1cclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkPXtjcml0ZXJpYS5jb21wYXJhdG9yPT09ZUNvbHVtbkNvbXBhcmF0b3IuZW5kc1dpdGh9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIEVuZHMgV2l0aFxyXG4gICAgICAgICAgICA8L29wdGlvbj4sXHJcbiAgICAgICAgICAgIDxvcHRpb25cclxuICAgICAgICAgICAgICAgIHZhbHVlPXtlQ29sdW1uQ29tcGFyYXRvci5pbn1cclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkPXtjcml0ZXJpYS5jb21wYXJhdG9yPT09ZUNvbHVtbkNvbXBhcmF0b3IuaW59XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIElzIG9uZSBvZlxyXG4gICAgICAgICAgICA8L29wdGlvbj4sXHJcbiAgICAgICAgICAgIDxvcHRpb25cclxuICAgICAgICAgICAgICAgIHZhbHVlPXtlQ29sdW1uQ29tcGFyYXRvci5ub3RJbn1cclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkPXtjcml0ZXJpYS5jb21wYXJhdG9yPT09ZUNvbHVtbkNvbXBhcmF0b3Iubm90SW59XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIElzIE5vdCBPbmUgT2ZcclxuICAgICAgICAgICAgPC9vcHRpb24+XHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gb3B0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb2x1bW5VbmlxdWVzKG5hbWU6IHN0cmluZywgY3JpdGVyaWE6IENvbHVtbkNyaXRlcmlhKSA6IGFueSB7XHJcbiAgICAgICAgbGV0IG9wdGlvbnM6IGFueVtdID0gW107XHJcbiAgICAgICAgY29uc3Qgcm9vdDogU2VhcmNoRmlsdGVyVGFibGUgPSB0aGlzLnByb3BzLnJvb3Q7XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgcm9vdC5jb2xWYWxNYXAuZ2V0KG5hbWUpLmZvckVhY2goKHZhbCxrZXkpID0+IHtcclxuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgPG9wdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtrZXl9XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2NyaXRlcmlhLnZhbHVlLnNldChrZXksa2V5KX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7a2V5fVxyXG4gICAgICAgICAgICAgICAgPC9vcHRpb24+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9KTtcclxuKi9cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICA8c2VsZWN0IFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWZjZi1zZWxlY3RcIlxyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIHtvcHRpb25zfSAgICBcclxuICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgPE11bHRpU2VsZWN0IFxyXG4gICAgICAgICAgICAgICAgYWxsSXRlbXM9e3Jvb3QuY29sVmFsTWFwLmdldChuYW1lKX1cclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkSXRlbXM9e2NyaXRlcmlhLnZhbHVlfVxyXG4gICAgICAgICAgIC8+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBwcmVwQ3JpdGVyaWFWYWx1ZShjcml0ZXJpYTogQ29sdW1uQ3JpdGVyaWEpIHtcclxuICAgICAgICBzd2l0Y2goY3JpdGVyaWEuY29tcGFyYXRvcikge1xyXG4gICAgICAgICAgICBjYXNlIGVDb2x1bW5Db21wYXJhdG9yLmluOlxyXG4gICAgICAgICAgICBjYXNlIGVDb2x1bW5Db21wYXJhdG9yLm5vdEluOlxyXG4gICAgICAgICAgICAgICAgY3JpdGVyaWEudmFsdWUgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgY3JpdGVyaWEudmFsdWUgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjcml0ZXJpYS52YWx1ZT1cIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IHJvd3M6IGFueVtdID0gW107XHJcbiAgICAgICAgaWYodGhpcy5uZXdDcml0ZXJpYS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcm93cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1mY2Ytcm93XCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWZjZi1sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTm8gQ3JpdGVyaWEgZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PiBcclxuICAgICAgICAgICAgKTsgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm5ld0NyaXRlcmlhLmZvckVhY2goKGNyaXRlcmlhOiBDb2x1bW5Dcml0ZXJpYSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IG9wdGlvbnM6IGFueVtdID0gdGhpcy5nZXRPcHRpb25zKGNyaXRlcmlhKTtcclxuICAgICAgICAgICAgICAgIGxldCBjcml0Qm94OiBhbnk7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2goY3JpdGVyaWEuY29tcGFyYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZUNvbHVtbkNvbXBhcmF0b3IuaW46XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlQ29sdW1uQ29tcGFyYXRvci5ub3RJbjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3JpdEJveCA9IHRoaXMuZ2V0Q29sdW1uVW5pcXVlcyh0aGlzLnByb3BzLmRldmVsb3Blck5hbWUsY3JpdGVyaWEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3JpdEJveD0oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1mY2YtaW5wdXRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17Y3JpdGVyaWEudmFsdWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlOiBhbnkpID0+IHtjcml0ZXJpYS52YWx1ZSA9IGUudGFyZ2V0LnZhbHVlfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJvd3MucHVzaChcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1mY2Ytcm93XCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtZmNmLXNlbGVjdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyaXRlcmlhLmNvbXBhcmF0b3IgPSBwYXJzZUludChlLnRhcmdldC5vcHRpb25zW2UudGFyZ2V0LnNlbGVjdGVkSW5kZXhdLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXBDcml0ZXJpYVZhbHVlKGNyaXRlcmlhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7b3B0aW9uc30gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7Y3JpdEJveH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtZmNmLWJ1dHRvbiBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZS1zaWduXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiUmVtb3ZlIGNyaXRlcmlhXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5ld0NyaXRlcmlhID0gdGhpcy5uZXdDcml0ZXJpYS5maWx0ZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPT4gaXRlbSAhPT0gY3JpdGVyaWFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcm93cy5wdXNoKFxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtZmNmLWJ1dHRvbnNcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtZmNmLWJ1dHRvbiBnbHlwaGljb24gZ2x5cGhpY29uLXBsdXMtc2lnblwiXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJBZGQgY3JpdGVyaWFcIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuYWRkQ3JpdGVyaWF9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1vZGFsLWRpYWxvZy1jb250ZW50XCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAge3Jvd3N9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCAnLi9NdWx0aVNlbGVjdC5jc3MnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXVsdGlTZWxlY3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQgPGFueSxhbnk+IHtcclxuXHJcbiAgICBleHBhbmRlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzIDogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMuc2hvd0NoZWNrYm94ZXMgPSB0aGlzLnNob3dDaGVja2JveGVzLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvd0NoZWNrYm94ZXMoKSB7XHJcbiAgICAgICAgbGV0IGNoZWNrYm94ZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNoZWNrYm94ZXNcIik7XHJcbiAgICAgICAgaWYgKCF0aGlzLmV4cGFuZGVkKSB7XHJcbiAgICAgICAgICAgIGNoZWNrYm94ZXMuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xyXG4gICAgICAgICAgICB0aGlzLmV4cGFuZGVkID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjaGVja2JveGVzLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgdGhpcy5leHBhbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIgKCkge1xyXG4gICAgICAgIGxldCBjaGVja0JveGVzOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgIHZhciBjb2xsYXRvciA9IG5ldyBJbnRsLkNvbGxhdG9yKHVuZGVmaW5lZCwge251bWVyaWM6IHRydWUsIHNlbnNpdGl2aXR5OiAnYmFzZSd9KTtcclxuICAgICAgICBsZXQgc29ydGVkOiBBcnJheTxhbnk+ID0gQXJyYXkuZnJvbSh0aGlzLnByb3BzLmFsbEl0ZW1zLmtleXMoKSkuc29ydCgoYTogYW55LGI6IGFueSkgPT4gY29sbGF0b3IuY29tcGFyZShhLCBiKSk7XHJcbiAgICAgICAgc29ydGVkLmZvckVhY2goKGl0ZW06IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBjaGVja0JveGVzLnB1c2goXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2hlY2tib3gtcm93XCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNoZWNrYm94LWNoZWNrYm94LXdyYXBwZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD17aXRlbX0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2l0ZW19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtY2hlY2tib3hcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zZWxlY3RlZEl0ZW1zLmhhcyhpdGVtKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMucHJvcHMuc2VsZWN0ZWRJdGVtcy5oYXMoaXRlbSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zZWxlY3RlZEl0ZW1zLmRlbGV0ZShpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuc2VsZWN0ZWRJdGVtcy5zZXQoaXRlbSxpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNoZWNrYm94LWxhYmVsLXdyYXBwZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNoZWNrYm94LXJvdy1sYWJlbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpdGVtfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm11bHRpc2VsZWN0XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNlbGVjdEJveFwiIFxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuc2hvd0NoZWNrYm94ZXN9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5TZWxlY3QgYW4gb3B0aW9uPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwib3ZlclNlbGVjdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNoZWNrYm94U2Nyb2xsZXJcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNoZWNrYm94ZXNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD1cImNoZWNrYm94ZXNcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2NoZWNrQm94ZXN9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBGbG93RGlzcGxheUNvbHVtbiB9IGZyb20gXCJmbG93LWNvbXBvbmVudC1tb2RlbFwiO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBTZWFyY2hGaWx0ZXJUYWJsZSBmcm9tIFwiLi9TZWFyY2hGaWx0ZXJUYWJsZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoRmlsdGVyVGFibGVGb290ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8YW55LGFueT4ge1xyXG5cclxuICAgIG1heFBlclBhZ2U6IGFueTtcclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgdGhpcy5tYXhQZXJQYWdlQ2hhbmdlZCA9IHRoaXMubWF4UGVyUGFnZUNoYW5nZWQuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBtYXhQZXJQYWdlQ2hhbmdlZChlOiBhbnkpe1xyXG4gICAgICAgIGNvbnN0IHJvb3Q6IFNlYXJjaEZpbHRlclRhYmxlID0gdGhpcy5wcm9wcy5yb290O1xyXG4gICAgICAgIHJvb3QubWF4UGVyUGFnZUNoYW5nZWQocGFyc2VJbnQodGhpcy5tYXhQZXJQYWdlLm9wdGlvbnNbdGhpcy5tYXhQZXJQYWdlLnNlbGVjdGVkSW5kZXhdLnZhbHVlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHJvb3Q6IFNlYXJjaEZpbHRlclRhYmxlID0gdGhpcy5wcm9wcy5yb290O1xyXG5cclxuICAgICAgICBsZXQgc3VtbWFyeTogc3RyaW5nID0gXCJTZWxlY3RlZCBcIiArIHJvb3Quc2VsZWN0ZWRSb3dNYXAuc2l6ZSArIFwiIG9mIFwiICsgcm9vdC5jdXJyZW50Um93TWFwLnNpemUgKyBcIiBpdGVtcyBmcm9tIGEgdG90YWwgZGF0YXNldCBvZiBcIiArIHJvb3Qucm93TWFwLnNpemU7XHJcbiAgICAgICAgbGV0IHBhZzogc3RyaW5nID0gXCJwYWdlIFwiICsgKHJvb3QuY3VycmVudFJvd1BhZ2UgKyAxKSArIFwiIG9mIFwiICsgcm9vdC5jdXJyZW50Um93UGFnZXMubGVuZ3RoO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICBsZXQgZmlyc3RQYWdlOiBhbnk7XHJcbiAgICAgICAgbGV0IHByZXZQYWdlOiBhbnk7XHJcbiAgICAgICAgbGV0IG5leHRQYWdlOiBhbnk7XHJcbiAgICAgICAgbGV0IGxhc3RQYWdlOiBhbnk7XHJcblxyXG4gICAgICAgIGlmKHJvb3QuY3VycmVudFJvd1BhZ2UgPiAwKXtcclxuICAgICAgICAgICAgZmlyc3RQYWdlID0gKFxyXG4gICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLWZhc3QtYmFja3dhcmQgc2Z0LWZvb3Rlci1wYWdpbmF0aW9uLWJ1dHRvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJGaXJzdCBwYWdlXCJcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtyb290LmZpcnN0UGFnZX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHByZXZQYWdlID0gKFxyXG4gICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXN0ZXAtYmFja3dhcmQgc2Z0LWZvb3Rlci1wYWdpbmF0aW9uLWJ1dHRvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJQcmV2aW91cyBwYWdlXCJcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtyb290LnByZXZpb3VzUGFnZX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmaXJzdFBhZ2UgPSAoXHJcbiAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tZmFzdC1iYWNrd2FyZCBzZnQtZm9vdGVyLXBhZ2luYXRpb24tYnV0dG9uIHNmdC1mb290ZXItcGFnaW5hdGlvbi1idXR0b24tZGlzYWJsZWRcIlxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcHJldlBhZ2UgPSAoXHJcbiAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tc3RlcC1iYWNrd2FyZCBzZnQtZm9vdGVyLXBhZ2luYXRpb24tYnV0dG9uIHNmdC1mb290ZXItcGFnaW5hdGlvbi1idXR0b24tZGlzYWJsZWRcIlxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKHJvb3QuY3VycmVudFJvd1BhZ2UgPCAocm9vdC5jdXJyZW50Um93UGFnZXMubGVuZ3RoIC0xKSl7XHJcbiAgICAgICAgICAgIGxhc3RQYWdlID0gKFxyXG4gICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLWZhc3QtZm9yd2FyZCBzZnQtZm9vdGVyLXBhZ2luYXRpb24tYnV0dG9uXCJcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIkxhc3QgcGFnZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17cm9vdC5sYXN0UGFnZX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIG5leHRQYWdlID0gKFxyXG4gICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXN0ZXAtZm9yd2FyZCBzZnQtZm9vdGVyLXBhZ2luYXRpb24tYnV0dG9uXCJcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIk5leHQgcGFnZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17cm9vdC5uZXh0UGFnZX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsYXN0UGFnZSA9IChcclxuICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1mYXN0LWZvcndhcmQgc2Z0LWZvb3Rlci1wYWdpbmF0aW9uLWJ1dHRvbiBzZnQtZm9vdGVyLXBhZ2luYXRpb24tYnV0dG9uLWRpc2FibGVkXCJcclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIG5leHRQYWdlID0gKFxyXG4gICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXN0ZXAtZm9yd2FyZCBzZnQtZm9vdGVyLXBhZ2luYXRpb24tYnV0dG9uIHNmdC1mb290ZXItcGFnaW5hdGlvbi1idXR0b24tZGlzYWJsZWRcIlxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgICAgIG9wdGlvbnMucHVzaCgxMCwyMCw1MCwxMDApO1xyXG4gICAgICAgIGlmKG9wdGlvbnMuaW5kZXhPZihyb290Lm1heFBhZ2VSb3dzKSA8MCApIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHJvb3QubWF4UGFnZVJvd3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvcHRpb25zPW9wdGlvbnMuc29ydCgoYSxiKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBhLWI7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCBvcHRzOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgIG9wdGlvbnMuZm9yRWFjaCgoYTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgIG9wdHMucHVzaChcclxuICAgICAgICAgICAgICAgIDxvcHRpb25cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17YX1cclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZD17cm9vdC5tYXhQYWdlUm93cz09PWF9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge2F9XHJcbiAgICAgICAgICAgICAgICA8L29wdGlvbj4gXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCBwZXJQYWdlOiBhbnkgPSAoXHJcbiAgICAgICAgICAgIDxzZWxlY3RcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJzZnQtZm9vdGVyLXNlbGVjdFwifVxyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMubWF4UGVyUGFnZUNoYW5nZWR9XHJcbiAgICAgICAgICAgICAgICByZWY9eyhlbGVtZW50OiBhbnkpID0+IHt0aGlzLm1heFBlclBhZ2UgPSBlbGVtZW50fX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICB7b3B0c30gXHJcbiAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1mb290ZXJcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWZvb3Rlci1zdW1tYXJ5XCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtZm9vdGVyLXN1bW1hcnktbGFiZWxcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3N1bW1hcnl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWZvb3Rlci1zcGFjZXJcIlxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtZm9vdGVyLXBlcnBhZ2VcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWZvb3Rlci1wZXJwYWdlLWxhYmVsXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcIkl0ZW1zIHBlciBwYWdlXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtZm9vdGVyLXBlcnBhZ2UtZHJvcGRvd25cIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3BlclBhZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtZm9vdGVyLXBhZ2luYXRpb25cIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIHtmaXJzdFBhZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAge3ByZXZQYWdlfVxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInNmdC1mb290ZXItcGFnaW5hdGlvbi1sYWJlbFwiPntwYWd9PC9zcGFuPiBcclxuICAgICAgICAgICAgICAgICAgICB7bmV4dFBhZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAge2xhc3RQYWdlfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IGVDb250ZW50VHlwZSwgRmxvd0Rpc3BsYXlDb2x1bW4sIEZsb3dPYmplY3REYXRhLCBGbG93T2JqZWN0RGF0YUFycmF5IH0gZnJvbSBcImZsb3ctY29tcG9uZW50LW1vZGVsXCI7XHJcbmltcG9ydCBSb3dJdGVtIGZyb20gXCIuL1Jvd0l0ZW1cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGVsRXhwb3J0ZXIge1xyXG4gICAgXHJcbiAgICBzdGF0aWMgZXhwb3J0KGNvbHVtbnM6IE1hcDxzdHJpbmcsRmxvd0Rpc3BsYXlDb2x1bW4+LCBkYXRhOiBNYXA8c3RyaW5nLFJvd0l0ZW0+LCBmaWxlTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGZpbGU6IHN0cmluZyA9ICcnO1xyXG4gICAgICAgIGxldCBib2R5OiBzdHJpbmcgPSAnJztcclxuICAgICAgICBsZXQgaGVhZGVyczogc3RyaW5nID0gJyc7XHJcbiAgICAgICAgbGV0IHJvdzogc3RyaW5nID0gJyc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZGF0YS5mb3JFYWNoKChpdGVtOiBSb3dJdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihoZWFkZXJzLmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzID0gdGhpcy5idWlsZEhlYWRlcnMoY29sdW1ucyxpdGVtLm9iamVjdERhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJvdyA9IHRoaXMuYnVpbGRSb3coY29sdW1ucyxpdGVtLm9iamVjdERhdGEpXHJcbiAgICAgICAgICAgIGJvZHkgKz0gcm93O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmaWxlID0gaGVhZGVycyArIGJvZHk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbZmlsZV0sIHsgdHlwZTogJ3RleHQvY3N2JyB9KTtcclxuICAgICAgICBpZiAobmF2aWdhdG9yLm1zU2F2ZUJsb2IpIHsgLy8gSUUgMTArXHJcbiAgICAgICAgICAgIG5hdmlnYXRvci5tc1NhdmVCbG9iKGJsb2IsIGZpbGVOYW1lKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAgICAgICBpZiAobGluay5kb3dubG9hZCAhPT0gdW5kZWZpbmVkKSB7IC8vIGZlYXR1cmUgZGV0ZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAvLyBCcm93c2VycyB0aGF0IHN1cHBvcnQgSFRNTDUgZG93bmxvYWQgYXR0cmlidXRlXHJcbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG4gICAgICAgICAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCB1cmwpO1xyXG4gICAgICAgICAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgZmlsZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgbGluay5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspO1xyXG4gICAgICAgICAgICAgICAgbGluay5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsaW5rKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYnVpbGRIZWFkZXJzKGNvbHM6IE1hcDxzdHJpbmcsRmxvd0Rpc3BsYXlDb2x1bW4+LCB2YWx1ZXM6IEZsb3dPYmplY3REYXRhKSA6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IGhlYWRlcnM6IHN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgY29scy5mb3JFYWNoKChjb2w6IEZsb3dEaXNwbGF5Q29sdW1uKSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaChjb2wuY29udGVudFR5cGUpe1xyXG4gICAgICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudExpc3Q6XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkcmVuOiBGbG93T2JqZWN0RGF0YUFycmF5ID0gdmFsdWVzLnByb3BlcnRpZXNbY29sLmRldmVsb3Blck5hbWVdLnZhbHVlIGFzIEZsb3dPYmplY3REYXRhQXJyYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4uaXRlbXMuZm9yRWFjaCgoaXRlbTogRmxvd09iamVjdERhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhlYWRlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycyArPSAnLCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycyArPSAnXCInICsgaXRlbS5wcm9wZXJ0aWVzW1wiQVRUUklCVVRFX0RJU1BMQVlfTkFNRVwiXS52YWx1ZSArICdcIic7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgKz0gJywnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzICs9ICdcIicgKyBjb2wubGFiZWwgKyAnXCInO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaGVhZGVycyArPSAnXFxyXFxuJztcclxuICAgICAgICByZXR1cm4gaGVhZGVycztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYnVpbGRSb3coY29sczogTWFwPHN0cmluZyxGbG93RGlzcGxheUNvbHVtbj4sIHZhbHVlczogRmxvd09iamVjdERhdGEpIDogc3RyaW5nIHsgXHJcbiAgICAgICAgbGV0IHJvdzogc3RyaW5nID0gXCJcIlxyXG4gICAgICAgIGNvbHMuZm9yRWFjaCgoY29sOiBGbG93RGlzcGxheUNvbHVtbikgPT4ge1xyXG4gICAgICAgICAgICBzd2l0Y2goY29sLmNvbnRlbnRUeXBlKXtcclxuICAgICAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnRMaXN0OlxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZHJlbjogRmxvd09iamVjdERhdGFBcnJheSA9IHZhbHVlcy5wcm9wZXJ0aWVzW2NvbC5kZXZlbG9wZXJOYW1lXS52YWx1ZSBhcyBGbG93T2JqZWN0RGF0YUFycmF5O1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLml0ZW1zLmZvckVhY2goKGl0ZW06IEZsb3dPYmplY3REYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3cubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93ICs9ICcsJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3cgKz0gJ1wiJyArIGl0ZW0ucHJvcGVydGllc1tcIkFUVFJJQlVURV9WQUxVRVwiXS52YWx1ZSArICdcIic7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAocm93Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93ICs9ICcsJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcm93ICs9ICdcIicgKyB2YWx1ZXMucHJvcGVydGllc1tjb2wuZGV2ZWxvcGVyTmFtZV0udmFsdWUgKyAnXCInO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcm93ICs9ICdcXHJcXG4nO1xyXG4gICAgICAgIHJldHVybiByb3c7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBGbG93RGlzcGxheUNvbHVtbiwgRmxvd091dGNvbWUgfSBmcm9tIFwiZmxvdy1jb21wb25lbnQtbW9kZWxcIjtcclxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgU2VhcmNoRmlsdGVyVGFibGUgZnJvbSBcIi4vU2VhcmNoRmlsdGVyVGFibGVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaEZpbHRlclRhYmxlUmliYm9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSxhbnk+IHtcclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBjb25zdCByb290OiBTZWFyY2hGaWx0ZXJUYWJsZSA9IHRoaXMucHJvcHMucm9vdDtcclxuXHJcbiAgICAgICAgbGV0IGxlZnRCdXR0b25zOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgIGxldCByaWdodEJ1dHRvbnM6IGFueVtdID0gW107XHJcblxyXG4gICAgICAgIGxldCBsYXN0T3JkZXI6IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IGFkZGVkRXhwYW5kOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IGFkZGVkQ29udHJhY3Q6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgbGV0IGNhbkV4cG9ydDogYm9vbGVhbiA9IChyb290LmdldEF0dHJpYnV0ZShcImNhbkV4cG9ydFwiLFwidHJ1ZVwiKS50b0xvd2VyQ2FzZSgpID09PSBcInRydWVcIik7XHJcblxyXG4gICAgICAgIC8vIGFkIGV4cG9ydCBpZiBhbGxvd2VkXHJcbiAgICAgICAgaWYoY2FuRXhwb3J0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHJpZ2h0QnV0dG9ucy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgPGRpdiBcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtcmliYm9uLWJ1dHRvbi13cmFwcGVyXCJcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7ZS5zdG9wUHJvcGFnYXRpb24oKTsgcm9vdC5kb0V4cG9ydChyb290LnJvd01hcCl9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e1wiZXhwb3J0QWxsXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJnbHlwaGljb24gZ2x5cGhpY29uLWZsb3BweS1zYXZlIHNmdC1yaWJib24tYnV0dG9uLWljb25cIn0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtcIkV4cG9ydCBBbGxcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtcmliYm9uLWJ1dHRvbi1sYWJlbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XCJFeHBvcnQgQWxsXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHJvb3Qucm93TWFwLnNpemUgPiByb290LmN1cnJlbnRSb3dNYXAuc2l6ZSAmJiBjYW5FeHBvcnQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgcmlnaHRCdXR0b25zLnB1c2goXHJcbiAgICAgICAgICAgICAgICA8ZGl2IFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1yaWJib24tYnV0dG9uLXdyYXBwZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlOiBhbnkpID0+IHtlLnN0b3BQcm9wYWdhdGlvbigpOyByb290LmRvRXhwb3J0KHJvb3QuY3VycmVudFJvd01hcCl9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e1wiZXhwb3J0U2hvd25cIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcImdseXBoaWNvbiBnbHlwaGljb24tZmxvcHB5LXNhdmUgc2Z0LXJpYmJvbi1idXR0b24taWNvblwifSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e1wiRXhwb3J0IFNob3duXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXJpYmJvbi1idXR0b24tbGFiZWxcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge1wiRXhwb3J0IFNob3duXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBcclxuICAgICAgICBPYmplY3Qua2V5cyhyb290Lm91dGNvbWVzKS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBvdXRjb21lOiBGbG93T3V0Y29tZSA9IHJvb3Qub3V0Y29tZXNba2V5XTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChvdXRjb21lLmlzQnVsa0FjdGlvbiAmJiBvdXRjb21lLmRldmVsb3Blck5hbWUgIT09IFwiT25TZWxlY3RcIiAmJiBvdXRjb21lLmRldmVsb3Blck5hbWUgIT09IFwiT25DaGFuZ2VcIiAmJiAhb3V0Y29tZS5kZXZlbG9wZXJOYW1lLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChcImNtXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBpZihvdXRjb21lLmF0dHJpYnV0ZXNbXCJSZXF1aXJlc1NlbGVjdGVkXCJdPy52YWx1ZSA9PT0gXCJ0cnVlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihyb290LnNlbGVjdGVkUm93TWFwLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRCdXR0b25zLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1yaWJib24tYnV0dG9uLXdyYXBwZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlOiBhbnkpID0+IHtyb290LmRvT3V0Y29tZShrZXksIHVuZGVmaW5lZCl9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2tleX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcImdseXBoaWNvbiBnbHlwaGljb24tXCIgKyAob3V0Y29tZS5hdHRyaWJ1dGVzW1wiaWNvblwiXT8udmFsdWUgfHwgXCJwbHVzXCIpICsgXCIgc2Z0LXJpYmJvbi1idXR0b24taWNvblwifSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e291dGNvbWUubGFiZWwgfHwga2V5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1yaWJib24tYnV0dG9uLWxhYmVsXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtvdXRjb21lLmxhYmVsIHx8IGtleX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0QnV0dG9ucy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXJpYmJvbi1idXR0b24td3JhcHBlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7cm9vdC5kb091dGNvbWUoa2V5LCB1bmRlZmluZWQpfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtrZXl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcImdseXBoaWNvbiBnbHlwaGljb24tXCIgKyAob3V0Y29tZS5hdHRyaWJ1dGVzW1wiaWNvblwiXT8udmFsdWUgfHwgXCJwbHVzXCIpICsgXCIgc2Z0LXJpYmJvbi1idXR0b24taWNvblwifSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17b3V0Y29tZS5sYWJlbCB8fCBrZXl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtcmliYm9uLWJ1dHRvbi1sYWJlbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge291dGNvbWUubGFiZWwgfHwga2V5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmKHJvb3Quc2VsZWN0ZWRSb3dNYXAuc2l6ZSA+IDAgJiYgY2FuRXhwb3J0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGxlZnRCdXR0b25zLnB1c2goXHJcbiAgICAgICAgICAgICAgICA8ZGl2IFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1yaWJib24tYnV0dG9uLXdyYXBwZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlOiBhbnkpID0+IHtlLnN0b3BQcm9wYWdhdGlvbigpOyByb290LmRvRXhwb3J0KHJvb3Quc2VsZWN0ZWRSb3dNYXApfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtcImV4cG9ydFNlbGVjdGVkXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJnbHlwaGljb24gZ2x5cGhpY29uLWZsb3BweS1zYXZlIHNmdC1yaWJib24tYnV0dG9uLWljb25cIn0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtcIkV4cG9ydCBTZWxlY3RlZFwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1yaWJib24tYnV0dG9uLWxhYmVsXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcIkV4cG9ydCBTZWxlY3RlZFwifVxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtcmliYm9uXCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1yaWJib24tbGVmdC13cmFwcGVyXCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1yaWJib24tdGl0bGUtd3JhcHBlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXJpYmJvbi10aXRsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcIkF2YWlsYWJsZSBhY3Rpb25zOlwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXJpYmJvbi1oYnV0dG9ucy13cmFwcGVyXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtsZWZ0QnV0dG9uc30gXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtcmliYm9uLXJpZ2h0LXdyYXBwZXJcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtcmliYm9uLXRpdGxlLXdyYXBwZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1yaWJib24tdGl0bGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1yaWJib24taGJ1dHRvbnMtd3JhcHBlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7cmlnaHRCdXR0b25zfSBcclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=