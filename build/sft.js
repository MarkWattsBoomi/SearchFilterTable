!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=14)}([function(e,t){e.exports=React},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowField=t.eContentType=void 0;var o,i=n(2),r=n(4);!function(e){e[e.unknown=0]="unknown",e[e.ContentString=1]="ContentString",e[e.ContentNumber=2]="ContentNumber",e[e.ContentObject=3]="ContentObject",e[e.ContentBoolean=4]="ContentBoolean",e[e.ContentList=5]="ContentList",e[e.ContentPassword=6]="ContentPassword",e[e.ContentContent=7]="ContentContent",e[e.ContentDateTime=8]="ContentDateTime",e[e.ContentEncrypted=9]="ContentEncrypted"}(o=t.eContentType||(t.eContentType={}));var a=function(){function e(e){if(this.ContentType=o.unknown,this.DeveloperName="",this.TypeElementDeveloperName="",this.TypeElementId="",this.TypeElementPropertyDeveloperName="",this.TypeElementPropertyId="",this.ValueElementId="",e)switch(this.ContentType=o[e.contentType],this.DeveloperName=e.developerName,this.TypeElementDeveloperName=e.typeElementDeveloperName,this.TypeElementId=e.typeElementId,this.TypeElementPropertyDeveloperName=e.typeElementPropertyDeveloperName,this.TypeElementPropertyId=e.typeElementPropertyId,this.ValueElementId=e.valueElementId,this.ContentType){case o.ContentObject:this.Value=e.objectData?new i.FlowObjectData(e.objectData):void 0;break;case o.ContentList:this.Value=e.objectData&&e.objectData[0]?new r.FlowObjectDataArray(e.objectData):new r.FlowObjectDataArray([]);break;default:this.Value=e.contentValue}}return Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementDeveloperName",{get:function(){return this.TypeElementDeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyDeveloperName",{get:function(){return this.TypeElementPropertyDeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"valueElementId",{get:function(){return this.ValueElementId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},set:function(e){this.Value=e},enumerable:!1,configurable:!0}),e.prototype.iFlowField=function(){var e="",t=[];switch(this.ContentType){case o.ContentObject:var n=this.Value;t.push(n.iObjectData());break;case o.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value?this.Value:""}return{contentType:o[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementDeveloperName:this.TypeElementDeveloperName,typeElementId:this.TypeElementId,typeElementPropertyDeveloperName:this.TypeElementPropertyDeveloperName,typeElementPropertyId:this.TypeElementPropertyId,valueElementId:this.ValueElementId}},e}();t.FlowField=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowObjectData=void 0;var o=n(9),i=function(){function e(e){if(this.DeveloperName="",this.ExternalId="",this.InternalId="",this.IsSelected=!1,this.Order=0,this.TypeElementId="",this.Properties={},e&&e[0]){var t=e[0];if(this.DeveloperName=t.developerName,this.InternalId=t.internalId,this.ExternalId=t.externalId,this.Order=t.order,this.IsSelected=t.isSelected,this.TypeElementId=t.typeElementId,t.properties&&t.properties.length>0)for(var n=0,i=t.properties;n<i.length;n++){var r=i[n];this.Properties[r.developerName]=new o.FlowObjectDataProperty(r)}}else console.log("null data")}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"externalId",{get:function(){return this.ExternalId},set:function(e){this.ExternalId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"internalId",{get:function(){return this.InternalId},set:function(e){this.InternalId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isSelected",{get:function(){return this.IsSelected},set:function(e){this.IsSelected=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},set:function(e){this.Order=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"properties",{get:function(){return this.Properties},enumerable:!1,configurable:!0}),e.newInstance=function(e){return new this([{developerName:e,externalId:"",internalId:manywho.utils.guid(),isSelected:!1,order:0,properties:[],typeElementId:""}])},e.prototype.addProperty=function(e){this.Properties[e.developerName]=e},e.prototype.removeProperty=function(e){delete this.Properties[e]},e.prototype.clone=function(t){var n=this,o=e.newInstance(t||this.DeveloperName);return Object.keys(this.properties).forEach((function(e){var t=n.properties[e].clone();o.properties[e]=t})),o},e.prototype.iObjectData=function(e){for(var t=[],n=0,o=Object.keys(this.properties);n<o.length;n++){var i=o[n];t.push(this.properties[i].iFlowObjectDataProperty())}return{developerName:this.developerName,externalId:this.externalId,internalId:this.internalId,isSelected:e||this.isSelected,order:this.order,properties:t,typeElementId:this.TypeElementId}},e.prototype.iFlowObjectDataArray=function(e){var t=[];return t.push(this.iObjectData(e)),t},e}();t.FlowObjectData=i},function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowBaseComponent=t.eLoadingState=void 0;var s=n(0);n(17);var l,c=n(6),u=n(8),d=n(1),p=n(2),h=n(4),f=n(10),m=n(18);!function(e){e[e.ready=0]="ready",e[e.loading=1]="loading",e[e.saving=2]="saving",e[e.moving=3]="moving",e[e.inititializing=4]="inititializing",e[e.inititialized=5]="inititialized",e[e.mounting=6]="mounting",e[e.mounted=7]="mounted"}(l=t.eLoadingState||(t.eLoadingState={}));var y=function(e){function t(t){var n=e.call(this,t)||this;n.Fields={},n.Attributes={},n.Outcomes={},n.sendCollaborationMessage=m(n._sendCollaborationMessage,100,null),n.Fields={},n.LoadingState=l.inititializing,n.loadAllValues=n.loadAllValues.bind(n),n.dontLoadAllValues=n.dontLoadAllValues.bind(n),n.updateValues=n.updateValues.bind(n),n.triggerOutcome=n.triggerOutcome.bind(n),n.ComponentId=n.props.id,n.ParentId=n.props.parentId,n.FlowKey=n.props.flowKey,n.Attributes={},n.loadModel=n.loadModel.bind(n),n.loadAttributes=n.loadAttributes.bind(n),n.loadOutcomes=n.loadOutcomes.bind(n),n.receiveMessage=n.receiveMessage.bind(n),n.getStateValue=n.getStateValue.bind(n),n.setStateValue=n.setStateValue.bind(n),n.getStateValueType=n.getStateValueType.bind(n),n.sendCollaborationMessage=n.sendCollaborationMessage.bind(n),n.onBeforeSend=n.onBeforeSend.bind(n),n.onDone=n.onDone.bind(n),n.calculateValue=n.calculateValue.bind(n),window.addEventListener("message",n.receiveMessage,!1),n.loadModel(),n.loadAttributes(),n.loadOutcomes();var o="";return!manywho.settings.global("platform.uri")&&manywho.settings.global("platform.uri").length<=0&&(o=window.location.origin||"https://flow.manywho.com"),n.StateId=manywho.utils.extractStateId(n.props.flowKey),n.TenantId=manywho.utils.extractTenantId(n.props.flowKey),n.invokeurl=o+"/api/run/1/state/"+n.StateId,n.url=o+"/api/run/1/state/"+n.StateId+"/values",n.userurl=o+"/api/run/1/state/"+n.StateId+"/values/03dc41dd-1c6b-4b33-bf61-cbd1d0778fff",n.valueurl=o+"/api/run/1/state/"+n.StateId+"/values/name",n.LoadingState=l.inititialized,n}return i(t,e),Object.defineProperty(t.prototype,"tenantId",{get:function(){return this.TenantId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"stateId",{get:function(){return this.StateId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"flowKey",{get:function(){return this.FlowKey},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"componentId",{get:function(){return this.ComponentId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"parentId",{get:function(){return this.ParentId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isReady",{get:function(){return this.LoadingState===l.ready},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"loadingState",{get:function(){return this.LoadingState},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"outcomes",{get:function(){return this.Outcomes},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fields",{get:function(){return this.Fields},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"model",{get:function(){return this.Model},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"user",{get:function(){return this.User},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"joinURI",{get:function(){return window.location.href},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isDesignTime",{get:function(){return this.IsDesignTime},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"authenticationToken",{get:function(){return JSON.parse(sessionStorage.flowUser).authenticationToken},enumerable:!1,configurable:!0}),t.prototype.getAttribute=function(e,t){return this.attributes[e]?this.attributes[e].value:t||""},t.prototype.onBeforeSend=function(e,t){if(t){var n=this.getOutcomeById(t.mapElementInvokeRequest.selectedOutcomeId),o=manywho.eventManager.outcomeBeingTriggered;n&&(o&&o.id===n.id||(manywho.eventManager.outcomeBeingTriggered=n))}else manywho.eventManager.outcomeBeingTriggered=void 0},t.prototype.calculateValue=function(e){if(e.startsWith("{{")&&e.endsWith("}}")){for(var t=e.replace("{{",""),n=void 0,o="",i=(t=t.replace("}}","")).split("."),r=0;r<i.length;r++)if(0===r)(n=this.fields[i[r]])?n.ContentType!==d.eContentType.ContentObject&&n.ContentType!==d.eContentType.ContentList&&(o=n.value):(console.log("The Value ["+i[r]+"] was not found, have you included it in your flow"),o=e);else if(n){var a=n.value.properties[i[r]];a?a.contentType===d.eContentType.ContentObject||a.contentType===d.eContentType.ContentList?n=n.value.properties[i[r]].value:o=n.value.properties[i[r]].value:o=e}else o=e;return o}return e},t.prototype.onDone=function(e,t){return r(this,void 0,void 0,(function(){var t,n=this;return a(this,(function(o){switch(o.label){case 0:return"FORWARD"!==e.invokeType?[3,2]:(manywho.model.parseEngineResponse(e,this.flowKey),this.loadModel(),this.loadAttributes(),this.loadOutcomes(),[4,this.preserveState()]);case 1:o.sent(),o.label=2;case 2:return manywho.eventManager.outcomeBeingTriggered&&manywho.eventManager.outcomeBeingTriggered.attributes&&(t=manywho.eventManager.outcomeBeingTriggered,Object.keys(manywho.eventManager.outcomeBeingTriggered.attributes).forEach((function(e){return r(n,void 0,void 0,(function(){var n,o,i;return a(this,(function(r){switch(r.label){case 0:switch(n=manywho.eventManager.outcomeBeingTriggered.attributes[e],n.name.toLowerCase()){case"autoclose":return[3,1];case"autoopen":return[3,2];case"autonav":case"automove":return[3,6];case"autoprint":return[3,10]}return[3,11];case 1:return"true"===n.value.toLowerCase()&&window.close(),[3,11];case 2:return(o=t.attributes.AutoOpenUrl||void 0)&&o.value.length>0?[4,this.calculateValue(o.value)]:[3,4];case 3:return i=r.sent(),window.open(i,"_blank"),[3,5];case 4:alert("No 'AutoOpenUrl' specified in the outcome's attributes"),r.label=5;case 5:return[3,11];case 6:return(o=t.attributes.AutoNavUrl||void 0)&&o.value.length>0?[4,this.calculateValue(o.value)]:[3,8];case 7:return i=r.sent(),window.open(i,"_blank"),[3,9];case 8:alert("No 'AutoNavUrl' specified in the outcome's attributes"),r.label=9;case 9:return[3,11];case 10:return window.print(),[3,11];case 11:return[2]}}))}))}))),this.LoadingState=l.ready,manywho.eventManager.outcomeBeingTriggered=void 0,[2]}}))}))},t.prototype.componentDidMount=function(){return r(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return this.LoadingState=l.mounting,manywho.eventManager.addDoneListener(this.onDone,this.componentId+"_core"),manywho.eventManager.addBeforeSendListener(this.onBeforeSend,this.componentId+"_core"),[4,this.preserveState()];case 1:return e.sent(),this.LoadingState=l.mounted,manywho.utils.removeLoadingIndicator("loader"),[2,Promise.resolve()]}}))}))},t.prototype.preserveState=function(){return r(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return this.LoadingState=l.mounting,[4,this.setStateValue(this.getStateValue())];case 1:return e.sent(),this.LoadingState=l.mounted,[2]}}))}))},t.prototype.componentWillUnmount=function(){return r(this,void 0,void 0,(function(){return a(this,(function(e){return manywho.eventManager.removeBeforeSendListener(this.componentId+"_core"),manywho.eventManager.removeDoneListener(this.componentId+"_core"),[2,Promise.resolve()]}))}))},t.prototype.loadOutcome=function(e){if(e){var t=manywho.model.getOutcome(e,this.props.flowKey);if(t)return this.Outcomes[t.developerName]=new f.FlowOutcome(t),this.Outcomes[t.developerName]}},t.prototype.loadOutcomes=function(){this.Outcomes={};for(var e=manywho.model.getOutcomes(this.props.id,this.props.flowKey),t=0,n=e;t<n.length;t++){var o=n[t];this.Outcomes[o.developerName]=new f.FlowOutcome(o)}for(var i=0,r=e=manywho.model.getOutcomes("",this.props.flowKey);i<r.length;i++){o=r[i];this.Outcomes[o.developerName]=new f.FlowOutcome(o)}},t.prototype.getOutcomeById=function(e){var t,n=this;return Object.keys(this.outcomes).forEach((function(o){n.outcomes[o].id===e&&(t=n.outcomes[o])})),t||(t=this.loadOutcome(e)),t},t.prototype.loadAttributes=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(e){var t=e.attributes;if(t)for(var n=0,o=Object.keys(t);n<o.length;n++){var i=o[n];this.Attributes[i]=new c.FlowAttribute(i,t[i])}}},t.prototype.loadModel=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(e){this.Model={contentType:e.contentType,content:e.content,dataSource:new h.FlowObjectDataArray([]),developerName:e.developerName,displayColumns:[],enabled:e.isEnabled,height:e.height,helpInfo:e.helpInfo,hintInfo:e.hintValue,joinUri:this.joinURI,label:e.label,maxSize:e.maxSize,multiSelect:e.isMultiSelect,readOnly:!e.isEditable,required:e.isRequired,size:e.size,validationMessage:e.validationMessage,visible:e.isVisible,width:e.width};var t=e.objectData;if(t)for(var n=0,o=t;n<o.length;n++){var i=o[n];this.Model.dataSource.addItem(new p.FlowObjectData([i]))}var r=e.columns;if(r)for(var a=0,s=r;a<s.length;a++){var l=s[a];this.Model.displayColumns.push(new u.FlowDisplayColumn(l))}}},t.prototype.loadValue=function(e){return r(this,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:return this.LoadingState=l.loading,[4,this.callRequestOld(this.valueurl+"/"+e,"GET",{})];case 1:return(t=n.sent())&&(this.Fields[t.developerName]=new d.FlowField(t)),this.LoadingState=l.ready,[2,this.Fields[t.developerName]]}}))}))},t.prototype.getResultBodyText=function(e){return r(this,void 0,void 0,(function(){return a(this,(function(t){return[2,e.text().then((function(e){return e.startsWith('"')&&(e=e.substr(1)),e.endsWith('"')&&(e=e.substr(0,e.length-1)),e}))]}))}))},t.prototype.callRequest=function(e,t,n){return r(this,void 0,void 0,(function(){var o,i,s=this;return a(this,(function(l){switch(l.label){case 0:return o=[],(i={}).method=t,i.headers={"Content-Type":"application/json",Authorization:this.authenticationToken,ManyWhoTenant:this.tenantId},i.credentials="same-origin","POST"!==t&&"PUT"!==t||(i.body=n),[4,fetch(e,i).then((function(e){return r(s,void 0,void 0,(function(){var t,n;return a(this,(function(i){switch(i.label){case 0:return 200!==e.status?[3,2]:[4,this.getResultBodyText(e)];case 1:return t=i.sent(),JSON.parse(t).forEach((function(e){o.push(e)})),console.log("Loaded Values"),[2,o];case 2:return[4,this.getResultBodyText(e)];case 3:return n=i.sent(),console.log("Can't load values - "+n),[2,o]}}))}))}))];case 1:return l.sent(),[2]}}))}))},t.prototype.callRequestOld=function(e,t,n){return r(this,void 0,void 0,(function(){return a(this,(function(o){switch(o.label){case 0:return[4,manywho.connection.request(this,null,e,t,this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),n)];case 1:return[2,o.sent()]}}))}))},t.prototype.loadAllValues=function(){return r(this,void 0,void 0,(function(){var e,t,n,o=this;return a(this,(function(i){switch(i.label){case 0:return this.LoadingState=l.loading,this.Fields={},[4,this.callRequestOld(this.url,"GET",{})];case 1:return(i.sent()||[]).map((function(e){e&&(o.Fields[e.developerName]=new d.FlowField(e))})),[4,this.callRequestOld(this.userurl,"GET",{})];case 2:return(e=i.sent())&&(t=new d.FlowField(e),n=t.value.properties,this.User={directoryId:n["Directory Id"].value,directoryName:n["Directory Name"].value,email:n.Email.value||"mark",firstName:n["First Name"].value,groupId:n["Primary Group Id"].value,groupName:n["Primary Group Name"].value,id:n["User ID"].value,ipAddress:n["IP Address"].value,language:n.Language.value,lastName:n["Last Name"].value,location:n.Location.value,roleId:n["Role Id"].value,roleName:n["Role Name"].value,status:n.Status.value,userName:n.Username.value}),this.LoadingState=l.ready,[2,Promise.resolve()]}}))}))},t.prototype.dontLoadAllValues=function(){return r(this,void 0,void 0,(function(){var e,t,n;return a(this,(function(o){switch(o.label){case 0:return this.LoadingState=l.loading,[4,this.callRequestOld(this.userurl,"GET",{})];case 1:return(e=o.sent())&&(t=new d.FlowField(e),n=t.value.properties,this.User={directoryId:n["Directory Id"].value,directoryName:n["Directory Name"].value,email:n.Email.value||"mark",firstName:n["First Name"].value,groupId:n["Primary Group Id"].value,groupName:n["Primary Group Name"].value,id:n["User ID"].value,ipAddress:n["IP Address"].value,language:n.Language.value,lastName:n["Last Name"].value,location:n.Location.value,roleId:n["Role Id"].value,roleName:n["Role Name"].value,status:n.Status.value,userName:n.Username.value}),this.LoadingState=l.ready,[2,Promise.resolve()]}}))}))},t.prototype.getStateValue=function(){var e=manywho.state.getComponent(this.componentId,this.flowKey)||{},t=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(t)switch(t.contentType){case"ContentObject":return e.objectData&&e.objectData[0]&&e.objectData[0].properties.length>0?new p.FlowObjectData([e.objectData[0]]):(n=this.model.dataSource.getSelectedItems()).items.length>0?n.items[0]:void 0;case"ContentList":return e.objectData&&e.objectData.length>0?new h.FlowObjectDataArray(e.objectData):(n=this.model.dataSource.getSelectedItems()).items.length>0?n:void 0;var n;default:return e.contentValue?e.contentValue:""}},t.prototype.getStateValueType=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey).contentType;return d.eContentType[e]},t.prototype.setStateValue=function(e,t){return r(this,void 0,void 0,(function(){var t,n,o,i,r;return a(this,(function(a){if(this.LoadingState===l.mounting||this.LoadingState===l.ready){if(t=this.loadingState,this.LoadingState=l.saving,n=manywho.model.getComponent(this.ComponentId,this.FlowKey),manywho.state.getComponent(this.componentId,this.flowKey)||{},o=void 0,n)switch(n.contentType){case"ContentObject":i=null,e&&(e.isSelected=!0,i=e.iFlowObjectDataArray(),i=JSON.parse(JSON.stringify(i))),o={objectData:i},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentList":r=null,e&&(r=e.iFlowObjectDataArray(),r=JSON.parse(JSON.stringify(r))),o={objectData:r},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentDate":o={contentValue:e.toISOString()},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;default:o={contentValue:e},manywho.state.setComponent(this.componentId,o,this.flowKey,!0)}this.LoadingState=t,manywho.collaboration.isInitialized(this.flowKey)}return[2,Promise.resolve()]}))}))},t.prototype.eventHandled=function(e,t){console.log("ping")},t.prototype.updateValues=function(e){return r(this,void 0,void 0,(function(){var t,n,o,i,r=this;return a(this,(function(a){switch(a.label){case 0:if(this.LoadingState=l.saving,t=[],e.constructor.name===d.FlowField.name)t.push(e.iFlowField());else for(n=0,o=e;n<o.length;n++)i=o[n],t.push(i.iFlowField());return[4,this.callRequestOld(this.url,"POST",t)];case 1:return a.sent(),manywho.collaboration.isInitialized(this.flowKey)&&t.forEach((function(e){manywho.collaboration.push(r.ComponentId,{message:{action:"REFRESH_FIELD",fieldName:e.developerName}},r.flowKey)})),this.LoadingState=l.ready,[2,Promise.resolve()]}}))}))},t.prototype._sendCollaborationMessage=function(e){manywho.collaboration.isInitialized(this.flowKey)&&manywho.collaboration.push(this.ComponentId,{message:e},this.flowKey)},t.prototype.triggerOutcome=function(e,t){return r(this,void 0,void 0,(function(){var n;return a(this,(function(o){switch(o.label){case 0:return this.LoadingState=l.moving,t||(t=[]),this.outcomes[e]&&(n=this.outcomes[e].iFlowOutcome()),n?[4,manywho.component.onOutcome(n,t,this.FlowKey)]:[3,2];case 1:return o.sent(),[3,3];case 2:this.log("Could not find outcome "+e),o.label=3;case 3:return[2,Promise.resolve()]}}))}))},t.prototype.moveTo=function(e,t){return r(this,void 0,void 0,(function(){var t,n,o,i;return a(this,(function(r){switch(r.label){case 0:return this.LoadingState=l.moving,"",t="/api/run/1/state/"+this.stateId,n=manywho.state.getState(this.flowKey),(o={}).currentMapElementId=n.currentMapElementId,o.invokeType="NAVIGATE",o.mapElementInvokeRequest={},o.mapElementInvokeRequest.selectedOutcomeId=null,o.pageRequest={pageComponentInputResponses:[{pageComponentId:this.componentId,contentValue:null,objectData:null}]},o.selectedMapElementId=e,o.stateId=this.stateId,o.stateToken=n.token,[4,manywho.connection.request(this,null,t,"POST",this.tenantId,this.stateId,manywho.state.getAuthenticationToken(this.flowKey),o)];case 1:return i=r.sent(),manywho.model.parseEngineResponse(i,this.flowKey),[4,manywho.engine.render(this.flowKey)];case 2:return r.sent(),[2,Promise.resolve()]}}))}))},t.prototype.log=function(e){var t=new Date,n="["+[("0"+t.getHours()).slice(-2),("0"+t.getMinutes()).slice(-2),("0"+t.getSeconds()).slice(-2)].join(":")+"] ";console.log(n+e)},t.prototype.launchFlowSilent=function(e,t,n,o){return r(this,void 0,void 0,(function(){var e,n,i;return a(this,(function(r){return e=manywho.settings.global("platform.uri")||"https://flow.manywho.com",n=e+"/api/run/1/state",(i={}).id=t,i.developerName=null,i.inputs=o?o.iFlowObjectDataArray():null,manywho.connection.request(this,"",n,"POST",this.TenantId,"",manywho.state.getAuthenticationToken(this.FlowKey),i),[2,Promise.resolve()]}))}))},t.prototype.launchFlowTab=function(e,t,n,o){return r(this,void 0,void 0,(function(){var o,i;return a(this,(function(r){return o=manywho.settings.global("platform.uri")||"https://flow.boomi.com",i=o+"/"+e+"/play/"+n+"?flow-id="+t,window.open(i,"_new"),[2,Promise.resolve()]}))}))},t.prototype.componentDidUpdate=function(){return r(this,void 0,void 0,(function(){var e,t;return a(this,(function(n){switch(n.label){case 0:if(!(e=manywho.state.getComponent(this.componentId,this.flowKey)))return[3,7];if(t=e.message,this.loadModel(),t&&manywho.state.setComponent(this.componentId,{message:{}},this.flowKey,!1),!t||!t.action)return[3,6];switch(t.action.toUpperCase()){case"REFRESH_FIELDS":return[3,1];case"REFRESH_FIELD":return[3,3]}return[3,5];case 1:return[4,this.loadAllValues()];case 2:return n.sent(),[3,6];case 3:return[4,this.loadValue(t.fieldName)];case 4:return n.sent(),[3,6];case 5:return[3,6];case 6:return[2,t];case 7:return[2]}}))}))},t.prototype.receiveMessage=function(e){return r(this,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:if(!e.data)return[3,9];if(!(t=e.data).action)return[3,9];switch(t.action.toUpperCase()){case"OUTCOME":return[3,1];case"REFRESH_FIELDS":return[3,3];case"REFRESH_FIELD":return[3,5]}return[3,7];case 1:return[4,this.triggerOutcome(t.data)];case 2:return n.sent(),[3,9];case 3:return[4,this.loadAllValues()];case 4:return n.sent(),[3,9];case 5:return[4,this.loadValue(t.fieldName)];case 6:return n.sent(),[3,9];case 7:return[4,this.handleMessage(t)];case 8:return n.sent(),[3,9];case 9:return[2,Promise.resolve()]}}))}))},t.prototype.handleMessage=function(e){return r(this,void 0,void 0,(function(){return a(this,(function(e){return[2,Promise.resolve()]}))}))},t}(s.Component);t.FlowBaseComponent=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowObjectDataArray=t.eSortOrder=void 0;var o,i=n(1),r=n(2);!function(e){e[e.ascending=0]="ascending",e[e.descending=1]="descending"}(o=t.eSortOrder||(t.eSortOrder={}));var a=function(){function e(e){this.Items=[];for(var t=0,n=e||[];t<n.length;t++){var o=n[t];this.Items.push(new r.FlowObjectData([o]))}}return Object.defineProperty(e.prototype,"items",{get:function(){return this.Items},enumerable:!1,configurable:!0}),e.prototype.sort=function(e,t){return e===o.ascending?t?this.Items.sort((function(e,n){var o,r;switch(e.properties[t].contentType){case i.eContentType.ContentNumber:o=parseFloat(e.properties[t].value),r=parseFloat(n.properties[t].value);break;case i.eContentType.ContentDateTime:o=new Date(e.properties[t].value),r=new Date(n.properties[t].value);break;default:o=e.properties[t].value,r=n.properties[t].value}switch(!0){case o<r:return-1;case o>r:return 1;default:return 0}})):this.Items.sort((function(e,t){return e.order-t.order})):t?this.Items.sort((function(e,n){if(!(e&&n&&e.properties&&n.properties&&e.properties[t]&&n.properties[t]&&e.properties[t].value&&n.properties[t].value))return 0;if(!e.properties[t])return 0;switch(!0){case e.properties[t].value<n.properties[t].value:return 1;case e.properties[t].value>n.properties[t].value:return-1;default:return 0}})):this.Items.sort((function(e,t){return e.order-t.order}))},e.prototype.addItem=function(e){this.Items.push(e)},e.prototype.clearItems=function(){this.Items=[]},e.prototype.clone=function(){var t=new e;return this.items.forEach((function(e){t.addItem(e.clone())})),t},e.prototype.iFlowObjectDataArray=function(e){for(var t=[],n=0,o=this.Items;n<o.length;n++){var i=o[n];t.push(i.iObjectData(e))}return t},e.prototype.getItemWithPropertyName=function(e,t,n){for(var o=0,r=this.Items;o<r.length;o++){var a=r[o];if(a.properties[e]&&null!=a.properties[e].value){var s=a.properties[e].value,l=t;switch(a.properties[e].contentType){case i.eContentType.ContentString:s=s.toLowerCase(),l=l.toLowerCase();break;case i.eContentType.ContentNumber:s=s,l=parseFloat(l.toLowerCase());break;case i.eContentType.ContentBoolean:s=s,l="true"===new String(l).toLowerCase()}if(s===l)return a.properties[n]}}return null},e.prototype.getSelectedItems=function(){for(var t=new e,n=0,o=this.Items;n<o.length;n++){var i=o[n];!0===i.isSelected&&t.addItem(i)}return t},e.prototype.getItemWithPropertyValue=function(e,t){for(var n=0,o=this.Items;n<o.length;n++){var r=o[n];if(r.properties[e]&&null!=r.properties[e].value){var a=r.properties[e].value,s=t;switch(r.properties[e].contentType){case i.eContentType.ContentString:a=a.toLowerCase(),s=new String(s).toLowerCase();break;case i.eContentType.ContentNumber:a=a,s=parseFloat(new String(s).toLowerCase());break;case i.eContentType.ContentBoolean:a=a,s="true"===new String(s).toLowerCase()}if(a===s)return r}}},e.prototype.getIndexOfItemWithPropertyValue=function(e,t){for(var n=0;n<this.items.length;n++){var o=this.items[n];if(o.properties[e]&&null!=o.properties[e].value){var r=o.properties[e].value,a=t;switch(o.properties[e].contentType){case i.eContentType.ContentString:r=r.toLowerCase(),a=a.toLowerCase();break;case i.eContentType.ContentNumber:r=r,a=parseFloat(new String(a).toLowerCase());break;case i.eContentType.ContentBoolean:r=r,a="true"===new String(a).toLowerCase()}if(r===a)return n}}return-1},e.prototype.removeItemWithPropertyValue=function(e,t){for(var n=0,o=0;o<this.items.length;o++){var r=this.items[o];if(r.properties[e]&&null!=r.properties[e].value){var a=r.properties[e].value,s=t;switch(r.properties[e].contentType){case i.eContentType.ContentString:a=a.toLowerCase(),s=s.toLowerCase();break;case i.eContentType.ContentNumber:a=a,s=parseFloat(new String(s).toLowerCase());break;case i.eContentType.ContentBoolean:a=a,s="true"===new String(s).toLowerCase()}a===s&&(this.items.splice(o,1),n++)}}return n},e.prototype.removeItemAtIndex=function(e){var t=0;return this.items[e]&&(this.items.splice(e,1),t=e),t},e}();t.FlowObjectDataArray=a},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||o(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(16),t),i(n(20),t),i(n(21),t),i(n(23),t),i(n(11),t),i(n(7),t),i(n(26),t),i(n(3),t),i(n(6),t),i(n(8),t),i(n(1),t),i(n(2),t),i(n(4),t),i(n(9),t),i(n(10),t),i(n(28),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowAttribute=void 0;var o=function(){function e(e,t){this.Name=e,this.Value=t}return Object.defineProperty(e.prototype,"name",{get:function(){return this.Name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},enumerable:!1,configurable:!0}),e}();t.FlowAttribute=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DragEvent=t.eDragEventType=t.modalDialogButton=void 0;var o,i=function(e,t){this.label=e,this.handler=t};t.modalDialogButton=i,function(e){e[e.unknown=0]="unknown",e[e.canvas=1]="canvas",e[e.table=2]="table",e[e.link=3]="link",e[e.dialog=4]="dialog"}(o=t.eDragEventType||(t.eDragEventType={}));var r=function(){function e(){this.type=o.unknown,this.sourceElement=null,this.targetElement=null,this.mouseX=0,this.mouseY=0,this.mouseOffsetX=0,this.mouseOffsetY=0}return e.start=function(t,n,o,i){var r=new e;return r.type=t,r.sourceElement=n,r.targetElement=null,r.mouseX=o,r.mouseY=i,r.mouseOffsetX=o,r.mouseOffsetY=i,r},e.prototype.drag=function(e,t){this.mouseX=e,this.mouseY=t},e.prototype.end=function(e,t,n){this.targetElement=e,this.mouseX=t,this.mouseY=n,this.type=o.unknown},e}();t.DragEvent=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowDisplayColumn=void 0;var o=n(1),i=function(){function e(e){this.Column=e,this.ComponentType=e.componentType,this.ContentFormat=e.contentFormat,this.ContentType=o.eContentType[e.contentType],this.DeveloperName=e.developerName,this.DisplayOrder=e.order,this.Label=e.label,this.ReadOnly=!e.isEditable,this.TypeElememtPropertyToDisplayId=e.typeElememtPropertyToDisplayId,this.TypeElementPropertyId=e.typeElementPropertyId,this.Visible=e.isDisplayValue}return Object.defineProperty(e.prototype,"componentType",{get:function(){return this.ComponentType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"visible",{get:function(){return this.Visible},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"readOnly",{get:function(){return this.ReadOnly},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"displayOrder",{get:function(){return this.DisplayOrder},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElememtPropertyToDisplayId",{get:function(){return this.TypeElememtPropertyToDisplayId},enumerable:!1,configurable:!0}),e.prototype.iFlowDisplayColumn=function(){return this.Column},e}();t.FlowDisplayColumn=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowObjectDataProperty=void 0;var o=n(1),i=n(2),r=n(4),a=function(){function e(e){if(this.ContentFormat="",this.ContentType=o.eContentType.unknown,this.DeveloperName="",this.TypeElementId="",this.TypeElementPropertyId="",e)switch(this.DeveloperName=e.developerName,this.ContentType=o.eContentType[e.contentType],this.ContentFormat=e.contentFormat?e.contentFormat:"",this.TypeElementId=e.typeElementId?e.typeElementId:"",this.TypeElementPropertyId=e.typeElementPropertyId,this.ContentType){case o.eContentType.ContentObject:this.Value=e.objectData?new i.FlowObjectData(e.objectData):void 0;break;case o.eContentType.ContentList:this.value=e.objectData?new r.FlowObjectDataArray(e.objectData):new r.FlowObjectDataArray([]);break;default:this.value=e.contentValue?e.contentValue:""}}return e.newInstance=function(e,t,n){var i="",r=[];switch(t){case o.eContentType.ContentObject:var a=n;r.push(a.iObjectData());break;case o.eContentType.ContentList:r=n.iFlowObjectDataArray();break;default:i=n}return new this({contentFormat:"",contentType:o.eContentType[t],contentValue:i,developerName:e,objectData:r,typeElementId:"",typeElementPropertyId:""})},Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},set:function(e){this.contentFormat=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},set:function(e){this.ContentType=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},set:function(e){this.TypeElementPropertyId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){switch(this.contentType){case o.eContentType.ContentNumber:return parseFloat(this.Value?this.Value:"0");case o.eContentType.ContentBoolean:return"true"===new String(this.Value).toLowerCase();default:return this.Value}},set:function(e){this.Value=e},enumerable:!1,configurable:!0}),e.prototype.clone=function(){var t;switch(this.contentType){case o.eContentType.ContentList:t=new r.FlowObjectDataArray,this.value.items.forEach((function(e){t.addItem(e.clone(e.developerName))}));break;case o.eContentType.ContentObject:t=this.value.clone(this.value.developerName);break;default:t=this.value}return e.newInstance(this.developerName,this.contentType,t)},e.prototype.iFlowObjectDataProperty=function(){var e="",t=[];switch(this.ContentType){case o.eContentType.ContentObject:var n=this.Value;n&&n.developerName&&n.developerName.length>0&&t.push(n.iObjectData());break;case o.eContentType.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value}return{contentFormat:this.ContentFormat,contentType:o.eContentType[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementId:this.TypeElementId,typeElementPropertyId:this.TypeElementPropertyId}},Object.defineProperty(e.prototype,"displayString",{get:function(){var e="";if(this.Value)switch(this.ContentType){case o.eContentType.ContentString:case o.eContentType.ContentNumber:e=this.Value;break;case o.eContentType.ContentBoolean:e=!0===this.Value?"True":"False";break;case o.eContentType.ContentDateTime:var t=Date.parse(this.Value);if(!isNaN(t)){var n=new Date(t);return e.length<=10?n.toLocaleDateString():n.toLocaleString()}break;default:e=o.eContentType[this.ContentType]}else e="Undefined";return e},enumerable:!1,configurable:!0}),e}();t.FlowObjectDataProperty=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowOutcome=t.ePageActionType=t.ePageActionBindingType=void 0;var o=n(6);!function(e){e.Save="SAVE",e.PartialSave="PARTIAL_SAVE",e.NoSave="NO_SAVE"}(t.ePageActionBindingType||(t.ePageActionBindingType={})),function(e){e.New="NEW",e.Query="QUERY",e.Insert="INSERT",e.Update="UPDATE",e.Upsert="UPSERT",e.Delete="DELETE",e.Remove="REMOVE",e.Add="ADD",e.Edit="EDIT",e.Next="NEXT",e.Back="BACK",e.Done="DONE",e.Save="SAVE",e.Cancel="CANCEL",e.Apply="APPLY",e.Import="IMPORT",e.Close="CLOSE",e.Open="OPEN",e.Submit="SUBMIT",e.Escalate="ESCALATE",e.Reject="REJECT",e.Delegate="DELEGATE"}(t.ePageActionType||(t.ePageActionType={}));var i=function(){function e(e){if(this.DeveloperName=e.developerName,this.Id=e.id,this.IsBulkAction=e.isBulkAction,this.IsOut=e.isOut,this.Label=e.label,this.Order=e.order,this.PageActionBindingType=e.pageActionBindingType,this.PageActionType=e.pageActionType,this.PageObjectBindingId=e.pageObjectBindingId,this.Attributes={},e.attributes)for(var t=0,n=Object.keys(e.attributes);t<n.length;t++){var i=n[t];this.Attributes[i]=new o.FlowAttribute(i,e.attributes[i])}this.Outcome=e}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this.Id},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isBulkAction",{get:function(){return this.IsBulkAction},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isOut",{get:function(){return this.IsOut},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageActionBindingType",{get:function(){return this.PageActionBindingType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageActionType",{get:function(){return this.PageActionType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageObjectBindingId",{get:function(){return this.PageObjectBindingId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!1,configurable:!0}),e.prototype.iFlowOutcome=function(){return this.Outcome},e}();t.FlowOutcome=i},function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);n(25);var a=function(e){function t(t){var n=e.call(this,t)||this;return n.displayStyle={},n.menuItems=[],n.showContextMenu=n.showContextMenu.bind(n),n.hideContextMenu=n.hideContextMenu.bind(n),n.positionContextMenu=n.positionContextMenu.bind(n),n}return i(t,e),t.prototype.setMenu=function(e){this.menu=e},t.prototype.positionContextMenu=function(e,t){e<window.innerWidth/2?(this.displayStyle.left=e-10,this.displayStyle.right=void 0):(this.displayStyle.left=void 0,this.displayStyle.right=window.innerWidth-(e+10)),t<window.innerHeight/2?(this.displayStyle.top=t-10,this.displayStyle.bottom=void 0):(this.displayStyle.top=void 0,this.displayStyle.bottom=window.innerHeight-(t+10)+"px"),this.displayStyle.display="block"},t.prototype.showContextMenu=function(e,t,n){if(n.size>0){var o=[];n.forEach((function(e){o.push(e)})),this.menuItems=o,this.positionContextMenu(e,t),this.forceUpdate()}},t.prototype.hideContextMenu=function(){this.displayStyle.display="none",this.menuItems=[],this.forceUpdate()},t.prototype.render=function(){var e=this;return r.createElement("div",{className:"cm",onMouseLeave:this.hideContextMenu,style:{left:this.displayStyle.left,right:this.displayStyle.right,top:this.displayStyle.top,bottom:this.displayStyle.bottom,display:this.displayStyle.display},ref:function(t){return e.setMenu(t)}},r.createElement("ul",{className:"cm-list"},this.menuItems))},t}(r.Component);t.default=a},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.eSortDirection=t.eFilterEvent=void 0;var s,l,c=r(n(0)),u=n(5),d=a(n(34)),p=a(n(35)),h=n(13);!function(e){e[e.none=0]="none",e[e.sort=1]="sort",e[e.filter=2]="filter"}(s=t.eFilterEvent||(t.eFilterEvent={})),function(e){e[e.none=0]="none",e[e.ascending=1]="ascending",e[e.descending=-1]="descending"}(l=t.eSortDirection||(t.eSortDirection={}));var f=function(){function e(e){this.items=new Map,this.parent=e,this.notify=this.notify.bind(this),this.getSortIcon=this.getSortIcon.bind(this),this.getFilterIcon=this.getFilterIcon.bind(this),this.sortClicked=this.sortClicked.bind(this),this.filterClicked=this.filterClicked.bind(this),this.saveFilter=this.saveFilter.bind(this),this.cancelFilter=this.cancelFilter.bind(this),this.matchesCriteria=this.matchesCriteria.bind(this)}return e.prototype.setDialog=function(e){this.dialog=e},e.prototype.notify=function(e,t){this.parent.filtersChanged(e,t)},e.prototype.get=function(e){return this.items.has(e)?this.items.get(e):void 0},e.prototype.has=function(e){return!!this.items.has(e)},e.prototype.sortClicked=function(e){this.items.has(e)||this.items.set(e,new d.default(e,this)),this.items.forEach((function(t){t.key!==e&&t.sortNone()})),this.items.get(e).sortToggle()},e.prototype.filterClicked=function(e){var t=this,n=this.parent;this.items.has(e)||this.items.set(e,new d.default(e,this));var o=this.parent.colMap.get(e);this.parent.messageBox.showMessageBox("Filter "+o.label,c.default.createElement(p.default,{root:n,parent:this,key:e,developerName:e,filter:this.items.get(e),ref:function(e){t.setDialog(e)}}),[new u.modalDialogButton("Apply",this.saveFilter),new u.modalDialogButton("Cancel",this.cancelFilter)])},e.prototype.filterClear=function(e){this.items.get(e).clearFilters()},e.prototype.saveFilter=function(){var e=this.dialog.filter.key;this.dialog.filter.criteria=this.dialog.newCriteria,this.items.set(e,this.dialog.filter),this.dialog=void 0,this.parent.messageBox.hideMessageBox(),this.notify(e,s.filter)},e.prototype.cancelFilter=function(){var e=this.dialog.filter.key;this.dialog=void 0,this.parent.messageBox.hideMessageBox(),this.notify(e,s.filter)},e.prototype.getSortIcon=function(e){var t=this;if(!this.items.has(e))return c.default.createElement("span",{className:"sft-column-header-flag glyphicon glyphicon-ban-circle",onClick:function(n){t.sortClicked(e)},title:"Not sorted - click to toggle"});switch(this.items.get(e).sort){case l.none:return c.default.createElement("span",{className:"sft-column-header-flag glyphicon glyphicon-ban-circle",onClick:function(n){t.sortClicked(e)},title:"Not sorted - click to toggle"});case l.ascending:return c.default.createElement("span",{className:"sft-column-header-flag sft-column-header-flag-hot glyphicon glyphicon-arrow-up",onClick:function(n){t.sortClicked(e)},title:"Ascending - click to toggle"});case l.descending:return c.default.createElement("span",{className:"sft-column-header-flag sft-column-header-flag-hot glyphicon glyphicon-arrow-down",onClick:function(n){t.sortClicked(e)},title:"Descending - click to toggle"})}},e.prototype.getFilterIcon=function(e){var t,n=this;return this.items.has(e)&&(null===(t=this.items.get(e).criteria)||void 0===t?void 0:t.length)>0?c.default.createElement(c.Fragment,null,c.default.createElement("span",{className:"sft-column-header-button sft-column-header-button-hot glyphicon glyphicon-search",onClick:function(t){n.filterClicked(e)},title:"Change filter"}),",",c.default.createElement("span",{className:"sft-column-header-button sft-column-header-button-hot glyphicon glyphicon-remove",onClick:function(t){n.filterClear(e)},title:"Clear filter"})):c.default.createElement("span",{className:"sft-column-header-button glyphicon glyphicon-search",onClick:function(t){n.filterClicked(e)}})},e.prototype.filter=function(e){var t=this,n=new Map;return e.forEach((function(e,o){t.matchesCriteria(e)&&n.set(o,void 0)})),n},e.prototype.matchesCriteria=function(e){var t=e.objectData,n=!0;return this.items.forEach((function(e){e.criteria.forEach((function(o){var i,r=t.properties[e.key].value.toLowerCase();switch("string"==typeof o.value&&(i=o.value.toLowerCase()),o.comparator){case h.eColumnComparator.equalTo:r!==i&&(n=!1);break;case h.eColumnComparator.notEqualTo:r===i&&(n=!1);break;case h.eColumnComparator.contains:r.indexOf(i)<0&&(n=!1);break;case h.eColumnComparator.startsWith:r.startsWith(i)||(n=!1);break;case h.eColumnComparator.endsWith:r.endsWith(i)||(n=!1);break;case h.eColumnComparator.notContains:r.indexOf(i)>=0&&(n=!1);break;case h.eColumnComparator.in:o.value.has(t.properties[e.key].value)||(n=!1);break;case h.eColumnComparator.notIn:o.value.has(t.properties[e.key].value)&&(n=!1);break;default:n=!1}}))})),n},e.prototype.getSortColumn=function(){var e;return this.items.forEach((function(t){t.sort!==l.none&&(e=t)})),e},e.prototype.sort=function(e,t){var n=this.getSortColumn(),o=new Map(Array.from(t).filter((function(t){if(e.has(t[0]))return!0})));if(n){this.parent.colMap.get(n.key);var i=new Intl.Collator(void 0,{numeric:!0,sensitivity:"base"}),r=Array.from(o).sort((function(e,t){return i.compare(e[1].objectData.properties[n.key].value,t[1].objectData.properties[n.key].value)}));n.sort===l.descending&&(r=r.reverse());var a=new Map(r);return a.forEach((function(e,t){a.set(t,void 0)})),a}return e},e}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.eColumnComparator=void 0,function(e){e[e.equalTo=0]="equalTo",e[e.notEqualTo=1]="notEqualTo",e[e.startsWith=2]="startsWith",e[e.endsWith=3]="endsWith",e[e.contains=4]="contains",e[e.notContains=5]="notContains",e[e.in=6]="in",e[e.notIn=7]="notIn"}(t.eColumnComparator||(t.eColumnComparator={}));var o=function(e,t){this.comparator=e,this.value=t};t.default=o},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||o(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(15),t)},function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},l=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},c=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var d=u(n(0)),p=n(5),h=u(n(11)),f=u(n(29)),m=u(n(30)),y=u(n(31));n(32);var g=u(n(33)),b=s(n(12)),v=u(n(38)),w=u(n(39)),I=u(n(40)),C=function(e){function t(t){var n=e.call(this,t)||this;return n.version="1.0.0",n.rowMap=new Map,n.currentRowMap=new Map,n.maxPageRows=5,n.currentRowPages=[],n.currentRowPage=0,n.selectedRowMap=new Map,n.rows=new Map,n.colMap=new Map,n.colValMap=new Map,n.cols=new Map,n.lastContent=d.default.createElement("div",null),n.filters=new b.default(n),n.handleMessage=n.handleMessage.bind(n),n.flowMoved=n.flowMoved.bind(n),n.showContextMenu=n.showContextMenu.bind(n),n.hideContextMenu=n.hideContextMenu.bind(n),n.buildCoreTable=n.buildCoreTable.bind(n),n.buildRibbon=n.buildRibbon.bind(n),n.buildFooter=n.buildFooter.bind(n),n.filtersChanged=n.filtersChanged.bind(n),n.toggleSelect=n.toggleSelect.bind(n),n.firstPage=n.firstPage.bind(n),n.previousPage=n.previousPage.bind(n),n.nextPage=n.nextPage.bind(n),n.lastPage=n.lastPage.bind(n),n.doExport=n.doExport.bind(n),n.maxPageRows=parseInt(n.getAttribute("PaginationSize",void 0)||"10"),n}return i(t,e),t.prototype.filtersChanged=function(e,t){switch(this.headers.forceUpdate(),t){case b.eFilterEvent.sort:this.sortRows(),this.paginateRows(),this.buildTableRows(),this.forceUpdate();break;case b.eFilterEvent.filter:this.filterRows(),this.sortRows(),this.paginateRows(),this.buildTableRows(),this.forceUpdate()}},t.prototype.setRow=function(e,t){t?this.rows.set(e,t):this.rows.has(e)&&this.rows.delete(e)},t.prototype.setRibbon=function(e){this.ribbon=e},t.prototype.setHeaders=function(e){this.headers=e},t.prototype.setFooter=function(e){this.footer=e},t.prototype.flowMoved=function(e,t){return l(this,void 0,void 0,(function(){var n;return c(this,(function(o){return n=this,"FORWARD"===e.invokeType&&(this.loadingState!==p.eLoadingState.ready?window.setTimeout((function(){n.flowMoved(e,t)}),500):(this.buildCoreTable(),this.filterRows(),this.sortRows(),this.buildTableRows(),this.forceUpdate())),[2]}))}))},t.prototype.componentDidMount=function(){return l(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),manywho.eventManager.addDoneListener(this.flowMoved,this.componentId),this.buildCoreTable(),this.filterRows(),this.sortRows(),this.buildTableRows(),this.forceUpdate(),[2]}}))}))},t.prototype.componentWillUnmount=function(){return l(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentWillUnmount.call(this)];case 1:return t.sent(),manywho.eventManager.removeDoneListener(this.componentId),[2]}}))}))},t.prototype.buildCoreTable=function(){var e=this;this.rowMap=new Map,this.rows=new Map;var t=this.model.displayColumns.sort((function(e,t){switch(!0){case e.DisplayOrder>t.DisplayOrder:return 1;case e.DisplayOrder===t.DisplayOrder:return 0;default:return-1}}));this.colMap=new Map,t.forEach((function(t){e.colMap.set(t.developerName,t),e.colValMap.set(t.developerName,new Map)})),this.ribbonElement=d.default.createElement(I.default,{root:this,ref:function(t){e.setRibbon(t)}}),this.headersElement=d.default.createElement(g.default,{root:this,ref:function(t){e.setHeaders(t)}}),this.footerElement=d.default.createElement(v.default,{root:this,ref:function(t){e.setFooter(t)}}),this.model.dataSource.items.forEach((function(t){!0===t.isSelected&&e.selectedRowMap.set(t.internalId,void 0);var n=new f.default;n.id=t.internalId,e.colMap.forEach((function(o){var i,r,a;n.columns.set(o.developerName,new m.default(o.developerName,null===(i=t.properties[o.developerName])||void 0===i?void 0:i.value)),e.colValMap.get(o.developerName).set(null===(r=t.properties[o.developerName])||void 0===r?void 0:r.value,null===(a=t.properties[o.developerName])||void 0===a?void 0:a.value)})),n.objectData=t,e.rowMap.set(n.id,n)})),this.filterRows(),this.sortRows(),this.paginateRows(),this.buildRibbon(),this.buildFooter()},t.prototype.filterRows=function(){var e=this;this.rowMap.size>0&&(this.currentRowMap=this.filters.filter(this.rowMap)),this.selectedRowMap.forEach((function(t,n){e.currentRowMap.has(n)||e.selectedRowMap.delete(n)}))},t.prototype.sortRows=function(){this.currentRowMap.size>0&&(this.currentRowMap=this.filters.sort(this.currentRowMap,this.rowMap))},t.prototype.paginateRows=function(){var e=this;this.currentRowPages=[];var t=new Map;this.currentRowMap.forEach((function(n,o){t.size<e.maxPageRows?t.set(o,void 0):(e.currentRowPages.push(t),(t=new Map).set(o,void 0))})),this.currentRowPages.push(t),this.currentRowPage=0},t.prototype.firstPage=function(){this.currentRowPage=0,this.buildTableRows(),this.buildRibbon(),this.buildFooter(),this.forceUpdate()},t.prototype.previousPage=function(){this.currentRowPage>1?this.currentRowPage-=1:this.currentRowPage=0,this.buildTableRows(),this.buildRibbon(),this.buildFooter(),this.forceUpdate()},t.prototype.nextPage=function(){this.currentRowPage<this.currentRowPages.length-1?this.currentRowPage+=1:this.currentRowPage=this.currentRowPages.length-1,this.buildTableRows(),this.buildRibbon(),this.buildFooter(),this.forceUpdate()},t.prototype.lastPage=function(){this.currentRowPage=this.currentRowPages.length-1,this.buildTableRows(),this.buildRibbon(),this.buildFooter(),this.forceUpdate()},t.prototype.toggleSelectAll=function(e){var t=this;e.target.checked?this.currentRowMap.forEach((function(e,n){t.selectedRowMap.set(n,"")})):this.selectedRowMap.clear(),this.rows.forEach((function(e){e.forceUpdate()})),this.buildRibbon(),this.buildFooter(),this.saveSelected()},t.prototype.toggleSelect=function(e,t){e.target.checked?this.selectedRowMap.set(t,""):this.selectedRowMap.delete(t),this.rows.get(t).forceUpdate(),this.buildRibbon(),this.buildFooter(),this.saveSelected()},t.prototype.saveSelected=function(){return l(this,void 0,void 0,(function(){var e,t=this;return c(this,(function(n){switch(n.label){case 0:return e=new p.FlowObjectDataArray,this.selectedRowMap.forEach((function(n,o){var i=t.rowMap.get(o).objectData;i.isSelected=!0,e.addItem(i)})),[4,this.setStateValue(e)];case 1:return n.sent(),[2]}}))}))},t.prototype.loadSelected=function(){return l(this,void 0,void 0,(function(){var e,t=this;return c(this,(function(n){switch(n.label){case 0:return e=this.getStateValue(),this.selectedRowMap.forEach((function(n,o){var i=t.rowMap.get(o).objectData;i.isSelected=!0,e.addItem(i)})),[4,this.setStateValue(e)];case 1:return n.sent(),[2]}}))}))},t.prototype.buildTableRows=function(){var e=this;this.rowElements=[],this.currentRowPages&&this.currentRowPages.length>0&&this.currentRowPages[this.currentRowPage]&&this.currentRowPages[this.currentRowPage].forEach((function(t,n){e.rowElements.push(d.default.createElement(y.default,{key:n,root:e,id:n,ref:function(t){e.setRow(n,t)}}))})),this.buildRibbon(),this.buildFooter()},t.prototype.buildRibbon=function(){var e;null===(e=this.ribbon)||void 0===e||e.forceUpdate()},t.prototype.buildFooter=function(){var e;null===(e=this.footer)||void 0===e||e.forceUpdate()},t.prototype.showContextMenu=function(e){var t=this;e.preventDefault(),e.stopPropagation();var n=new Map;this.contextMenu&&(Object.keys(this.outcomes).forEach((function(e){var o,i,r=t.outcomes[e];!0===r.isBulkAction&&"OnSelect"!==r.developerName&&r.developerName.toLowerCase().startsWith("cm")&&("true"===(null===(o=r.attributes.RequiresSelected)||void 0===o?void 0:o.value)&&t.selectedRowMap.size<1||n.set(r.developerName,d.default.createElement("li",{className:"sft-cm-item",title:r.label||e,onClick:function(n){n.stopPropagation(),t.cmClick(e)}},d.default.createElement("span",{className:"glyphicon glyphicon-"+((null===(i=r.attributes.icon)||void 0===i?void 0:i.value)||"plus")+" sft-cm-item-icon"}),d.default.createElement("span",{className:"sft-cm-item-label"},r.label||e))))})),n.set("exportall",d.default.createElement("li",{className:"sft-cm-item",title:"Export All",onClick:function(e){e.stopPropagation(),t.doExport(t.rowMap)}},d.default.createElement("span",{className:"glyphicon glyphicon-floppy-save sft-cm-item-icon"}),d.default.createElement("span",{className:"sft-cm-item-label"},"Export All"))),n.set("exportshown",d.default.createElement("li",{className:"sft-cm-item",title:"Export Search Results",onClick:function(e){e.stopPropagation(),t.doExport(t.currentRowMap)}},d.default.createElement("span",{className:"glyphicon glyphicon-floppy-save sft-cm-item-icon"}),d.default.createElement("span",{className:"sft-cm-item-label"},"Export Search Results"))),this.selectedRowMap.size>0&&n.set("exportselected",d.default.createElement("li",{className:"sft-cm-item",title:"Export Selected Items",onClick:function(e){e.stopPropagation(),t.doExport(t.selectedRowMap)}},d.default.createElement("span",{className:"glyphicon glyphicon-floppy-save sft-cm-item-icon"}),d.default.createElement("span",{className:"sft-cm-item-label"},"Export Selected"))),this.contextMenu.showContextMenu(e.clientX,e.clientY,n),this.forceUpdate())},t.prototype.hideContextMenu=function(){return l(this,void 0,void 0,(function(){return c(this,(function(e){return this.contextMenu.hideContextMenu(),[2]}))}))},t.prototype.cmClick=function(e){this.doOutcome(e)},t.prototype.doOutcome=function(e,t){return l(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return this.outcomes[e]?[4,this.triggerOutcome(e)]:[3,2];case 1:return t.sent(),[3,3];case 2:manywho.component.handleEvent(this,manywho.model.getComponent(this.componentId,this.flowKey),this.flowKey,null),t.label=3;case 3:return this.forceUpdate(),[2]}}))}))},t.prototype.doExport=function(e){return l(this,void 0,void 0,(function(){var t,n=this;return c(this,(function(o){return t=new Map,e.forEach((function(e,o){t.set(o,n.rowMap.get(o))})),w.default.export(this.colMap,t,"export.csv"),this.outcomes.OnExport&&this.triggerOutcome("OnExport"),[2]}))}))},t.prototype.render=function(){var e=this;if(this.loadingState!==p.eLoadingState.ready)return this.lastContent;var t="sft "+this.getAttribute("classes",""),n={width:"-webkit-fill-available",height:"-webkit-fill-available"};!1===this.model.visible&&(n.display="none"),this.model.width&&(n.width=this.model.width+"px"),this.model.height&&(n.height=this.model.height+"px");this.model.label;return this.lastContent=d.default.createElement("div",{className:t,style:n,onContextMenu:this.showContextMenu},d.default.createElement(p.FlowMessageBox,{parent:this,ref:function(t){e.messageBox=t}}),d.default.createElement(h.default,{parent:this,ref:function(t){e.contextMenu=t}}),this.ribbonElement,d.default.createElement("div",{className:"sft-body"},d.default.createElement("div",{className:"sft-scroller"},d.default.createElement("div",{className:"sft-scroller-body"},d.default.createElement("table",null,d.default.createElement("thead",null,this.headersElement),d.default.createElement("tbody",null,this.rowElements),d.default.createElement("tfoot",null))))),this.footerElement),this.lastContent},t}(p.FlowComponent);t.default=C,manywho.component.register("SearchFilterTable",C)},function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowComponent=void 0;var s=function(e){function t(t){return e.call(this,t)||this}return i(t,e),t.prototype.componentDidMount=function(){return r(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.dontLoadAllValues()];case 2:return t.sent(),[2,Promise.resolve()]}}))}))},t}(n(3).FlowBaseComponent);t.FlowComponent=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),manywho.eventManager||(manywho.eventManager={},manywho.eventManager.beforeSendListeners={},manywho.eventManager.doneListeners={},manywho.eventManager.failListeners={},manywho.eventManager.outcomeBeingTriggered,manywho.eventManager.history=[],manywho.eventManager.beforeSend=function(e,t){for(var n in manywho.eventManager.beforeSendListeners)manywho.eventManager.beforeSendListeners[n](e,t)},manywho.eventManager.done=function(e,t){for(var n in manywho.eventManager.doneListeners)manywho.eventManager.doneListeners[n](e,t)},manywho.eventManager.fail=function(e,t){for(var n in manywho.eventManager.failListeners)manywho.eventManager.failListeners[n](e,t)},manywho.eventManager.addBeforeSendListener=function(e,t){manywho.eventManager.beforeSendListeners[t]=e},manywho.eventManager.removeBeforeSendListener=function(e){delete manywho.eventManager.beforeSendListeners[e]},manywho.eventManager.addDoneListener=function(e,t){manywho.eventManager.doneListeners[t]=e},manywho.eventManager.removeDoneListener=function(e){delete manywho.eventManager.doneListeners[e]},manywho.eventManager.addFailListener=function(e,t){manywho.eventManager.failListeners[t]=e},manywho.eventManager.removeFailListener=function(e){delete manywho.eventManager.failListeners[e]},manywho.settings.initialize(null,{invoke:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.done,fail:manywho.eventManager.fail}}))},function(e,t,n){(function(t){var n=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,r=/^0o[0-7]+$/i,a=parseInt,s="object"==typeof t&&t&&t.Object===Object&&t,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),u=Object.prototype.toString,d=Math.max,p=Math.min,h=function(){return c.Date.now()};function f(e,t,n){var o,i,r,a,s,l,c=0,u=!1,f=!1,g=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function b(t){var n=o,r=i;return o=i=void 0,c=t,a=e.apply(r,n)}function v(e){return c=e,s=setTimeout(I,t),u?b(e):a}function w(e){var n=e-l;return void 0===l||n>=t||n<0||f&&e-c>=r}function I(){var e=h();if(w(e))return C(e);s=setTimeout(I,function(e){var n=t-(e-l);return f?p(n,r-(e-c)):n}(e))}function C(e){return s=void 0,g&&o?b(e):(o=i=void 0,a)}function E(){var e=h(),n=w(e);if(o=arguments,i=this,l=e,n){if(void 0===s)return v(l);if(f)return s=setTimeout(I,t),b(l)}return void 0===s&&(s=setTimeout(I,t)),a}return t=y(t)||0,m(n)&&(u=!!n.leading,r=(f="maxWait"in n)?d(y(n.maxWait)||0,t):r,g="trailing"in n?!!n.trailing:g),E.cancel=function(){void 0!==s&&clearTimeout(s),c=0,o=l=i=s=void 0},E.flush=function(){return void 0===s?a:C(h())},E}function m(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function y(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==u.call(e)}(e))return NaN;if(m(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=m(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(n,"");var s=i.test(e);return s||r.test(e)?a(e.slice(2),s?2:8):o.test(e)?NaN:+e}e.exports=function(e,t,n){var o=!0,i=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return m(n)&&(o="leading"in n?!!n.leading:o,i="trailing"in n?!!n.trailing:i),f(e,t,{leading:o,maxWait:t,trailing:i})}}).call(this,n(19))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowPage=void 0;var s=function(e){function t(t){return e.call(this,t)||this}return i(t,e),t.prototype.componentDidMount=function(){return r(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.loadAllValues()];case 2:return t.sent(),[2,Promise.resolve()]}}))}))},t}(n(3).FlowBaseComponent);t.FlowPage=s},function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowDialogBox=void 0;var s=n(0),l=n(7);n(22);var c=function(e){function t(t){var n=e.call(this,t)||this;return n.dragEvent=new l.DragEvent,n.dialogVisible=!1,n.dialogTitle="",n.dialogButtons=[],n.dialogOnClose=n.hideDialog,n.top=0,n.left=0,n.handleKeyUp=n.handleKeyUp.bind(n),n.handleOutsideClick=n.handleOutsideClick.bind(n),n.showDialog=n.showDialog.bind(n),n.hideDialog=n.hideDialog.bind(n),n}return i(t,e),t.prototype.setDialog=function(e){if(this.dialog=e,this.dialog){var t=this.dialog.offsetParent.clientWidth/2,n=this.dialog.offsetParent.clientHeight/2,o=this.dialog.clientWidth/2,i=this.dialog.clientHeight/2;this.left=t-o,this.top=n-i,this.dialog.classList.add("shown"),this.positionDialog()}},t.prototype.positionDialog=function(){this.dialog&&(this.dialog.style.left=this.left+"px",this.dialog.style.top=this.top+"px")},t.prototype.stopEventBubble=function(e){return e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),e.cancelBubble=!0,e.returnValue=!1,!1},t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.showDialog=function(e,t,n,o){return r(this,void 0,void 0,(function(){return a(this,(function(i){return this.dialogVisible=!0,this.dialogTitle=e,this.dialogContent=t,this.dialogOnClose=o||this.hideDialog,this.dialogButtons=n,this.forceUpdate(),[2]}))}))},t.prototype.hideDialog=function(e){return r(this,void 0,void 0,(function(){return a(this,(function(e){return this.dialogVisible=!1,this.dialogTitle="",this.dialogContent=void 0,this.dialogOnClose=void 0,this.dialogButtons=[],this.forceUpdate(),[2]}))}))},t.prototype.handleKeyUp=function(e){var t=this,n={27:function(){e.preventDefault(),t.hideDialog()}};n[e.keyCode]&&n[e.keyCode]()},t.prototype.handleOutsideClick=function(e){this.dialog||this.dialog.contains(e.target)||this.hideDialog()},t.prototype.render=function(){var e,t=this;if(!1===this.dialogVisible)e=s.createElement("div",null);else{for(var n=[],o=function(e){n.push(s.createElement("button",{className:"modal-dialog-button-bar-button",title:"Cancel",onMouseDown:function(t){t.stopPropagation(),e.handler()}},e.label))},i=0,r=this.dialogButtons;i<r.length;i++){o(r[i])}e=s.createElement("div",{className:"modal-redaction",onMouseMove:function(e){t.onMouseMove(e)},onMouseUp:function(e){t.onMouseUp(e)},onMouseDown:function(e){t.handleOutsideClick(e)},onContextMenu:function(e){e.preventDefault(),e.stopPropagation(),t.props.onContextMenu&&t.props.onContextMenu()}},s.createElement("div",{className:"modal-content",ref:function(e){return t.dialog=e}},s.createElement("div",{className:"modal-dialog"},s.createElement("div",{className:"modal-dialog-header",onMouseDown:function(e){t.onMouseDown(e)}},s.createElement("div",{style:{display:"flex",flexDirection:"row",flexGrow:1}},s.createElement("span",{className:"modal-dialog-header-title"},this.props.title)),s.createElement("div",{style:{display:"flex",flexDirection:"row",marginLeft:"auto",flexGrow:0}},s.createElement("span",{className:"glyphicon glyphicon-remove modal-dialog-header-button",style:{cursor:"pointer",color:"#fefefe",marginRight:"5px",fontSize:"14pt"},title:"Close",onMouseDown:function(e){e.stopPropagation(),t.props.onClose("cancel")}}))),s.createElement("div",{className:"modal-dialog-body"},s.createElement("div",{className:"modal-dialog-body-client"},this.props.children)),s.createElement("div",{className:"modal-dialog-button-bar"},n))))}return e},t.prototype.moveMe=function(e,t){this.left=e,this.top=t,this.positionDialog()},t.prototype.onMouseDown=function(e){var t=e.target.getBoundingClientRect(),n=e.clientY-t.top;this.dragEvent=l.DragEvent.start(l.eDragEventType.dialog,this,e.clientX-t.left,n)},t.prototype.onMouseMove=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.moveMe(e.clientX-this.dragEvent.mouseOffsetX,e.clientY-this.dragEvent.mouseOffsetY)},t.prototype.onMouseUp=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.dragEvent.end(null,e.clientX,e.clientY)},t}(s.Component);t.FlowDialogBox=c},function(e,t,n){},function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowMessageBox=void 0;var s=n(0),l=n(7);n(24);var c=function(e){function t(t){var n=e.call(this,t)||this;return n.dragEvent=new l.DragEvent,n.top=0,n.left=0,n.msgboxVisible=!1,n.msgboxTitle="",n.msgboxButtons=[],n.msgboxOnClose=n.hideMessageBox,n.handleKeyUp=n.handleKeyUp.bind(n),n.setDialog=n.setDialog.bind(n),n.showMessageBox=n.showMessageBox.bind(n),n.hideMessageBox=n.hideMessageBox.bind(n),n.positionDialog=n.positionDialog.bind(n),n}return i(t,e),t.prototype.setDialog=function(e){if(this.dialog=e,this.dialog){var t=this.dialog.offsetParent.clientWidth/2,n=this.dialog.offsetParent.clientHeight/2,o=this.dialog.clientWidth/2,i=this.dialog.clientHeight/2;this.left=t-o,this.top=n-i,this.dialog.classList.add("shown"),this.positionDialog()}},t.prototype.positionDialog=function(){this.dialog&&(this.dialog.style.left=this.left+"px",this.dialog.style.top=this.top+"px")},t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.showMessageBox=function(e,t,n,o){return r(this,void 0,void 0,(function(){return a(this,(function(i){return this.msgboxVisible=!0,this.msgboxTitle=e,this.msgboxContent=t,this.msgboxOnClose=o||this.hideMessageBox,this.msgboxButtons=n,this.forceUpdate(),[2]}))}))},t.prototype.hideMessageBox=function(e){return r(this,void 0,void 0,(function(){return a(this,(function(e){return this.msgboxVisible=!1,this.msgboxTitle="",this.msgboxContent=void 0,this.msgboxOnClose=void 0,this.msgboxButtons=[],this.forceUpdate(),[2]}))}))},t.prototype.stopEventBubble=function(e){return e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),e.cancelBubble=!0,e.returnValue=!1,!1},t.prototype.handleKeyUp=function(e){var t=this,n={27:function(){e.preventDefault(),t.hideMessageBox()}};n[e.keyCode]&&n[e.keyCode]()},t.prototype.render=function(){var e,t=this;if(!1===this.msgboxVisible)e=s.createElement("div",null);else{for(var n=[],o=function(e){n.push(s.createElement("button",{className:"modal-dialog-button-bar-button",title:"Cancel",onMouseDown:function(t){t.stopPropagation(),e.handler()}},e.label))},i=0,r=this.msgboxButtons;i<r.length;i++){o(r[i])}e=s.createElement("div",{className:"message-box-redaction",onMouseMove:function(e){t.onMouseMove(e)},onMouseUp:function(e){t.onMouseUp(e)},onContextMenu:function(e){e.preventDefault(),e.stopPropagation(),t.props.onContextMenu&&t.props.onContextMenu()}},s.createElement("div",{className:"message-box-content",ref:function(e){return t.setDialog(e)}},s.createElement("div",{className:"message-box-dialog"},s.createElement("div",{className:"message-box-dialog-header",onMouseDown:function(e){t.onMouseDown(e)}},s.createElement("div",{style:{display:"flex",flexDirection:"row",flexGrow:1}},s.createElement("span",{className:"message-box-dialog-header-title"},this.msgboxTitle)),s.createElement("div",{style:{display:"flex",flexDirection:"row",marginLeft:"auto",flexGrow:0}},s.createElement("span",{className:"glyphicon glyphicon-remove message-box-dialog-header-button",style:{cursor:"pointer",color:"#fefefe",marginRight:"5px",fontSize:"14pt"},title:"Close",onMouseDown:function(e){t.stopEventBubble(e),t.hideMessageBox()}}))),s.createElement("div",{className:"message-box-dialog-body"},this.msgboxContent),s.createElement("div",{className:"modal-dialog-button-bar"},n))))}return e},t.prototype.moveMe=function(e,t){this.left=e,this.top=t,this.positionDialog()},t.prototype.onMouseDown=function(e){var t=e.target.getBoundingClientRect(),n=e.clientY-t.top;this.dragEvent=l.DragEvent.start(l.eDragEventType.dialog,this,e.clientX-t.left,n)},t.prototype.onMouseMove=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.moveMe(e.clientX-this.dragEvent.mouseOffsetX,e.clientY-this.dragEvent.mouseOffsetY)},t.prototype.onMouseUp=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.dragEvent.end(null,e.clientX,e.clientY)},t}(s.Component);t.FlowMessageBox=c},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);n(27);var a=function(e){function t(t){var n=e.call(this,t)||this;return n.icons={},n.selectedItem=n.props.onChangeValue,n.onchange=n.onchange.bind(n),n.addIcon=n.addIcon.bind(n),n.addIcons=n.addIcons.bind(n),n.addIcons(),n}return i(t,e),t.prototype.onchange=function(e){this.selectedItem=e.target.innerText,this.props.onChange&&this.props.onChange(this.selectedItem),this.forceUpdate()},t.prototype.addIcons=function(){this.addIcon("asterisk","Asterisk"),this.addIcon("plus","Plus"),this.addIcon("minus","Minus"),this.addIcon("eur","Eur"),this.addIcon("euro","Euro"),this.addIcon("cloud","Cloud"),this.addIcon("envelope","Envelope"),this.addIcon("pencil","Pencil"),this.addIcon("glass","Glass"),this.addIcon("music","Music"),this.addIcon("search","Search"),this.addIcon("heart","Heart"),this.addIcon("star","Star"),this.addIcon("star-empty","Star Empty"),this.addIcon("user","User"),this.addIcon("film","Film"),this.addIcon("th-large","Th Large"),this.addIcon("th","Th"),this.addIcon("th-list","Th List"),this.addIcon("ok","Ok"),this.addIcon("remove","Remove"),this.addIcon("zoom-in","Zoom In"),this.addIcon("zoom-out","Zoom Out"),this.addIcon("off","Off"),this.addIcon("signal","Signal"),this.addIcon("cog","Cog"),this.addIcon("trash","Trash"),this.addIcon("home","Home"),this.addIcon("file","File"),this.addIcon("time","Time"),this.addIcon("road","Road"),this.addIcon("download-alt","Download Alt"),this.addIcon("download","Download"),this.addIcon("upload","Upload"),this.addIcon("inbox","Inbox"),this.addIcon("play-circle","Play Circle"),this.addIcon("repeat","Repeat"),this.addIcon("refresh","Refresh"),this.addIcon("list-alt","List Alt"),this.addIcon("lock","Lock"),this.addIcon("flag","Flag"),this.addIcon("headphones","Headphones"),this.addIcon("volume-off","Volume Off"),this.addIcon("volume-down","Volume Down"),this.addIcon("volume-up","Volume Up"),this.addIcon("qrcode","Qrcode"),this.addIcon("barcode","Barcode"),this.addIcon("tag","Tag"),this.addIcon("tags","Tags"),this.addIcon("book","Book"),this.addIcon("bookmark","Bookmark"),this.addIcon("print","Print"),this.addIcon("camera","Camera"),this.addIcon("font","Font"),this.addIcon("bold","Bold"),this.addIcon("italic","Italic"),this.addIcon("text-height","Text Height"),this.addIcon("text-width","Text Width"),this.addIcon("align-left","Align Left"),this.addIcon("align-center","Align Center"),this.addIcon("align-right","Align Right"),this.addIcon("align-justify","Align Justify"),this.addIcon("list","List"),this.addIcon("indent-left","Indent Left"),this.addIcon("indent-right","Indent Right"),this.addIcon("facetime-video","Facetime Video"),this.addIcon("picture","Picture"),this.addIcon("map-marker","Map Marker"),this.addIcon("adjust","Adjust"),this.addIcon("tint","Tint"),this.addIcon("edit","Edit"),this.addIcon("share","Share"),this.addIcon("check","Check"),this.addIcon("move","Move"),this.addIcon("step-backward","Step Backward"),this.addIcon("fast-backward","Fast Backward"),this.addIcon("backward","Backward"),this.addIcon("play","Play"),this.addIcon("pause","Pause"),this.addIcon("stop","Stop"),this.addIcon("forward","Forward"),this.addIcon("fast-forward","Fast Forward"),this.addIcon("step-forward","Step Forward"),this.addIcon("eject","Eject"),this.addIcon("chevron-left","Chevron Left"),this.addIcon("chevron-right","Chevron Right"),this.addIcon("plus-sign","Plus Sign"),this.addIcon("minus-sign","Minus Sign"),this.addIcon("remove-sign","Remove Sign"),this.addIcon("ok-sign","Ok Sign"),this.addIcon("question-sign","Question Sign"),this.addIcon("info-sign","Info Sign"),this.addIcon("screenshot","Screenshot"),this.addIcon("remove-circle","Remove Circle"),this.addIcon("ok-circle","Ok Circle"),this.addIcon("ban-circle","Ban Circle"),this.addIcon("arrow-left","Arrow Left"),this.addIcon("arrow-right","Arrow Right"),this.addIcon("arrow-up","Arrow Up"),this.addIcon("arrow-down","Arrow Down"),this.addIcon("share-alt","Share Alt"),this.addIcon("resize-full","Resize Full"),this.addIcon("resize-small","Resize Small"),this.addIcon("exclamation-sign","Exclamation Sign"),this.addIcon("gift","Gift"),this.addIcon("leaf","Leaf"),this.addIcon("fire","Fire"),this.addIcon("eye-open","Eye Open"),this.addIcon("eye-close","Eye Close"),this.addIcon("warning-sign","Warning Sign"),this.addIcon("plane","Plane"),this.addIcon("calendar","Calendar"),this.addIcon("random","Random"),this.addIcon("comment","Comment"),this.addIcon("magnet","Magnet"),this.addIcon("chevron-up","Chevron Up"),this.addIcon("chevron-down","Chevron Down"),this.addIcon("retweet","Retweet"),this.addIcon("shopping-cart","Shopping Cart"),this.addIcon("folder-close","Folder Close"),this.addIcon("folder-open","Folder Open"),this.addIcon("resize-vertical","Resize Vertical"),this.addIcon("resize-horizontal","Resize Horizontal"),this.addIcon("hdd","Hdd"),this.addIcon("bullhorn","Bullhorn"),this.addIcon("bell","Bell"),this.addIcon("certificate","Certificate"),this.addIcon("thumbs-up","Thumbs Up"),this.addIcon("thumbs-down","Thumbs Down"),this.addIcon("hand-right","Hand Right"),this.addIcon("hand-left","Hand Left"),this.addIcon("hand-up","Hand Up"),this.addIcon("hand-down","Hand Down"),this.addIcon("circle-arrow-right","Circle Arrow Right"),this.addIcon("circle-arrow-left","Circle Arrow Left"),this.addIcon("circle-arrow-up","Circle Arrow Up"),this.addIcon("circle-arrow-down","Circle Arrow Down"),this.addIcon("globe","Globe"),this.addIcon("wrench","Wrench"),this.addIcon("tasks","Tasks"),this.addIcon("filter","Filter"),this.addIcon("briefcase","Briefcase"),this.addIcon("fullscreen","Fullscreen"),this.addIcon("dashboard","Dashboard"),this.addIcon("paperclip","Paperclip"),this.addIcon("heart-empty","Heart Empty"),this.addIcon("link","Link"),this.addIcon("phone","Phone"),this.addIcon("pushpin","Pushpin"),this.addIcon("usd","Usd"),this.addIcon("gbp","Gbp"),this.addIcon("sort","Sort"),this.addIcon("sort-by-alphabet","Sort By Alphabet"),this.addIcon("sort-by-alphabet-alt","Sort By Alphabet Alt"),this.addIcon("sort-by-order","Sort By Order"),this.addIcon("sort-by-order-alt","Sort By Order Alt"),this.addIcon("sort-by-attributes","Sort By Attributes"),this.addIcon("sort-by-attributes-alt","Sort By Attributes Alt"),this.addIcon("unchecked","Unchecked"),this.addIcon("expand","Expand"),this.addIcon("collapse-down","Collapse Down"),this.addIcon("collapse-up","Collapse Up"),this.addIcon("log-in","Log In"),this.addIcon("flash","Flash"),this.addIcon("log-out","Log Out"),this.addIcon("new-window","New Window"),this.addIcon("record","Record"),this.addIcon("save","Save"),this.addIcon("open","Open"),this.addIcon("saved","Saved"),this.addIcon("import","Import"),this.addIcon("export","Export"),this.addIcon("send","Send"),this.addIcon("floppy-disk","Floppy Disk"),this.addIcon("floppy-saved","Floppy Saved"),this.addIcon("floppy-remove","Floppy Remove"),this.addIcon("floppy-save","Floppy Save"),this.addIcon("floppy-open","Floppy Open"),this.addIcon("credit-card","Credit Card"),this.addIcon("transfer","Transfer"),this.addIcon("cutlery","Cutlery"),this.addIcon("header","Header"),this.addIcon("compressed","Compressed"),this.addIcon("earphone","Earphone"),this.addIcon("phone-alt","Phone Alt"),this.addIcon("tower","Tower"),this.addIcon("stats","Stats"),this.addIcon("sd-video","Sd Video"),this.addIcon("hd-video","Hd Video"),this.addIcon("subtitles","Subtitles"),this.addIcon("sound-stereo","Sound Stereo"),this.addIcon("sound-dolby","Sound Dolby"),this.addIcon("sound-5-1","Sound 5 1"),this.addIcon("sound-6-1","Sound 6 1"),this.addIcon("sound-7-1","Sound 7 1"),this.addIcon("copyright-mark","Copyright Mark"),this.addIcon("registration-mark","Registration Mark"),this.addIcon("cloud-download","Cloud Download"),this.addIcon("cloud-upload","Cloud Upload"),this.addIcon("tree-conifer","Tree Conifer"),this.addIcon("tree-deciduous","Tree Deciduous"),this.addIcon("cd","Cd"),this.addIcon("save-file","Save File"),this.addIcon("open-file","Open File"),this.addIcon("level-up","Level Up"),this.addIcon("copy","Copy"),this.addIcon("paste","Paste"),this.addIcon("alert","Alert"),this.addIcon("equalizer","Equalizer"),this.addIcon("king","King"),this.addIcon("queen","Queen"),this.addIcon("pawn","Pawn"),this.addIcon("bishop","Bishop"),this.addIcon("knight","Knight"),this.addIcon("baby-formula","Baby Formula"),this.addIcon("tent","Tent"),this.addIcon("blackboard","Blackboard"),this.addIcon("bed","Bed"),this.addIcon("apple","Apple"),this.addIcon("erase","Erase"),this.addIcon("hourglass","Hourglass"),this.addIcon("lamp","Lamp"),this.addIcon("duplicate","Duplicate"),this.addIcon("piggy-bank","Piggy Bank"),this.addIcon("scissors","Scissors"),this.addIcon("bitcoin","Bitcoin"),this.addIcon("yen","Yen"),this.addIcon("ruble","Ruble"),this.addIcon("scale","Scale"),this.addIcon("ice-lolly","Ice Lolly"),this.addIcon("ice-lolly-tasted","Ice Lolly Tasted"),this.addIcon("education","Education"),this.addIcon("option-horizontal","Option Horizontal"),this.addIcon("option-vertical","Option Vertical"),this.addIcon("menu-hamburger","Menu Hamburger"),this.addIcon("modal-window","Modal Window"),this.addIcon("oil","Oil"),this.addIcon("grain","Grain"),this.addIcon("sunglasses","Sunglasses"),this.addIcon("text-size","Text Size"),this.addIcon("text-color","Text Color"),this.addIcon("text-background","Text Background"),this.addIcon("object-align-top","Object Align Top"),this.addIcon("object-align-bottom","Object Align Bottom"),this.addIcon("object-align-horizontal","Object Align Horizontal"),this.addIcon("object-align-left","Object Align Left"),this.addIcon("object-align-vertical","Object Align Vertical"),this.addIcon("object-align-right","Object Align Right"),this.addIcon("triangle-right","Triangle Right"),this.addIcon("triangle-left","Triangle Left"),this.addIcon("triangle-bottom","Triangle Bottom"),this.addIcon("triangle-top","Triangle Top"),this.addIcon("console","Console"),this.addIcon("superscript","Superscript"),this.addIcon("subscript","Subscript"),this.addIcon("menu-left","Menu Left"),this.addIcon("menu-right","Menu Right"),this.addIcon("menu-down","Menu Down"),this.addIcon("menu-up","Menu Up")},t.prototype.addIcon=function(e,t){this.icons[e]={name:e,label:t}},t.prototype.render=function(){for(var e=this,t=[],n=0,o=Object.keys(this.icons);n<o.length;n++){var i=o[n],a="glyphicon glyphicon-"+this.icons[i].name+" icon-picker-icon";t.push(r.createElement("li",{onClick:function(t){e.onchange(t)}},r.createElement("span",{className:a}),this.icons[i].name))}return r.createElement("div",{className:"btn-group"},r.createElement("button",{type:"button",className:"btn btn-default dropdown-toggle","data-toggle":"dropdown"},r.createElement("span",{className:"glyphicon glyphicon-"+this.selectedItem}),r.createElement("span",{className:"caret"})),r.createElement("ul",{className:"dropdown-menu",role:"menu"},t))},t}(r.Component);t.default=a},function(e,t,n){},function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowChart=t.FlowChartColumnDefinition=t.eFlowChartType=void 0;var s,l=n(0),c=n(3),u=n(1);!function(e){e[e.BarChart=0]="BarChart",e[e.ColumnChart=1]="ColumnChart",e[e.GeoChart=2]="GeoChart",e[e.PieChart=3]="PieChart",e[e.DonutChart=4]="DonutChart"}(s=t.eFlowChartType||(t.eFlowChartType={}));var d=function(e,t){this.developerName=e,this.type=t};t.FlowChartColumnDefinition=d;var p=function(e){function t(t){var n=e.call(this,t)||this;return n.apiKey="",n.beginChartsApi=n.beginChartsApi.bind(n),n.apiLoaded=n.apiLoaded.bind(n),n.drawChart=n.drawChart.bind(n),n.flowMoved=n.flowMoved.bind(n),n.apiKey=n.getAttribute("APIKey",""),n}return i(t,e),t.prototype.componentDidMount=function(){return r(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.dontLoadAllValues()];case 2:return t.sent(),manywho.eventManager.addDoneListener(this.flowMoved,this.componentId),this.beginChartsApi(),[2]}}))}))},t.prototype.componentWillUnmount=function(){return r(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentWillUnmount.call(this)];case 1:return t.sent(),manywho.eventManager.removeDoneListener(this.componentId),[2]}}))}))},t.prototype.flowMoved=function(e,t){return r(this,void 0,void 0,(function(){var n;return a(this,(function(o){return n=this,"FORWARD"===e.invokeType&&(this.loadingState!==c.eLoadingState.ready?window.setTimeout((function(){n.flowMoved(e,t)}),500):(manywho.model.parseEngineResponse(e,this.props.flowKey),this.beginChartsApi())),[2]}))}))},t.prototype.beginChartsApi=function(){if("undefined"==typeof google||void 0===google.charts)if(void 0===window.G13ChartLoading){var e=document.createElement("script");e.src="https://www.gstatic.com/charts/loader.js",e.addEventListener("load",this.apiLoaded),window.document.body.appendChild(e),window.G13ChartLoading=!0}else window.setTimeout(this.beginChartsApi,300);else this.apiLoaded()},t.prototype.apiLoaded=function(){var e;(null===google||void 0===google?void 0:google.charts)&&(null===(e=null===google||void 0===google?void 0:google.visualization)||void 0===e?void 0:e.GeoChart)?this.drawChart():(google.charts.load("current",{packages:["corechart","geochart"],mapsApiKey:this.apiKey}),google.charts.setOnLoadCallback(this.drawChart))},t.prototype.buildData=function(e){var t=this;this.model.dataSource&&this.model.dataSource.items.forEach((function(n){var o=[];t.propertyNames.forEach((function(e){var t=n.properties[e.developerName];e.type===u.eContentType.ContentNumber?o.push(parseInt(t.value)):o.push(t.value)})),e.push(o)}))},t.prototype.drawChart=function(){var e=[];if(e.push(this.columnNames),this.buildData(e),this.chartData=google.visualization.arrayToDataTable(e),!this.chart)switch(this.chartType){case s.BarChart:this.chart=new google.visualization.BarChart(document.getElementById(this.componentId));break;case s.ColumnChart:this.chart=new google.visualization.ColumnChart(document.getElementById(this.componentId));break;case s.GeoChart:this.chart=new google.visualization.GeoChart(document.getElementById(this.componentId));break;case s.PieChart:case s.DonutChart:this.chart=new google.visualization.PieChart(document.getElementById(this.componentId))}this.chart.draw(this.chartData,this.options)},t.prototype.render=function(){return l.createElement("div",{id:this.componentId})},t}(c.FlowBaseComponent);t.FlowChart=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){this.columns=new Map};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(e,t){this.name=e,this.originalValue=t,this.newValue=t};t.default=o},function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(0)),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.render=function(){var e=this,t=[],n=this.props.root,o=n.rowMap.get(this.props.id).objectData;return t.push(a.default.createElement("td",{className:"sft-table-cell"},a.default.createElement("input",{className:"sft-checkbox",type:"checkbox",onClick:function(t){n.toggleSelect(t,e.props.id)},checked:n.selectedRowMap.has(this.props.id)}))),n.colMap.forEach((function(e){t.push(a.default.createElement("td",{className:"sft-table-cell"},a.default.createElement("span",{className:"sft-table-cell-text"},o.properties[e.developerName].value)))})),a.default.createElement("tr",{className:"sft-table-row"},t)},t}(a.default.Component);t.default=s},function(e,t,n){},function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(0)),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.render=function(){var e=[],t=this.props.root;return t.colMap.size>0&&(e.push(a.default.createElement("th",{className:"sft-check-header"},a.default.createElement("input",{className:"sft-checkbox",type:"checkbox",onClick:function(e){t.toggleSelectAll(e)}}))),t.colMap.forEach((function(n){var o=t.filters.getSortIcon(n.developerName),i=t.filters.getFilterIcon(n.developerName);e.push(a.default.createElement("th",{className:"sft-column-header"},a.default.createElement("div",{className:"sft-column-header-wrapper"},a.default.createElement("div",{className:"sft-column-header-top"},a.default.createElement("div",{className:"sft-column-header-title"},a.default.createElement("span",{className:"sft-column-header-title-label"},n.label))),a.default.createElement("div",{className:"sft-column-header-bottom"},a.default.createElement("div",{className:"sft-column-header-flags"},o),a.default.createElement("div",{className:"sft-column-header-buttons"},i)))))}))),a.default.createElement("tr",{className:"sft-column-headers"},e)},t}(a.default.Component);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(12),i=function(){function e(e,t){this.sort=o.eSortDirection.none,this.criteria=[],this.key=e,this.parent=t,this.notify=this.notify.bind(this)}return e.prototype.clearFilters=function(){this.criteria=[],this.notify(o.eFilterEvent.filter)},e.prototype.notify=function(e){this.parent.notify(this.key,e)},e.prototype.sortAscending=function(){this.sort=o.eSortDirection.ascending,this.notify(o.eFilterEvent.sort)},e.prototype.sortDescending=function(){this.sort=o.eSortDirection.descending,this.notify(o.eFilterEvent.sort)},e.prototype.sortToggle=function(){switch(this.sort){case o.eSortDirection.none:case o.eSortDirection.descending:this.sort=o.eSortDirection.ascending;break;default:this.sort=o.eSortDirection.descending}this.notify(o.eFilterEvent.sort)},e.prototype.sortNone=function(){this.sort=o.eSortDirection.none,this.notify(o.eFilterEvent.sort)},e}();t.default=i},function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=l(n(0)),u=s(n(13)),d=l(n(36)),p=function(e){function t(t){var n=e.call(this,t)||this;return n.filter=n.props.filter,n.newCriteria=[],n.filter.criteria.forEach((function(e){n.newCriteria.push(e)})),n.addCriteria=n.addCriteria.bind(n),n}return i(t,e),t.prototype.addCriteria=function(){this.newCriteria.push(new u.default(u.eColumnComparator.equalTo,"")),this.forceUpdate()},t.prototype.getOptions=function(e){var t=[];return t.push(c.default.createElement("option",{value:u.eColumnComparator.equalTo,selected:e.comparator===u.eColumnComparator.equalTo},"Equals"),c.default.createElement("option",{value:u.eColumnComparator.notEqualTo,selected:e.comparator===u.eColumnComparator.notEqualTo},"Not Equal To"),c.default.createElement("option",{value:u.eColumnComparator.contains,selected:e.comparator===u.eColumnComparator.contains},"Contains"),c.default.createElement("option",{value:u.eColumnComparator.notContains,selected:e.comparator===u.eColumnComparator.notContains},"Does Not Contain"),c.default.createElement("option",{value:u.eColumnComparator.startsWith,selected:e.comparator===u.eColumnComparator.startsWith},"Starts With"),c.default.createElement("option",{value:u.eColumnComparator.endsWith,selected:e.comparator===u.eColumnComparator.endsWith},"Ends With"),c.default.createElement("option",{value:u.eColumnComparator.in,selected:e.comparator===u.eColumnComparator.in},"Is one of"),c.default.createElement("option",{value:u.eColumnComparator.notIn,selected:e.comparator===u.eColumnComparator.notIn},"Is Not One Of")),t},t.prototype.getColumnUniques=function(e,t){var n=this.props.root;return c.default.createElement(d.default,{allItems:n.colValMap.get(e),selectedItems:t.value})},t.prototype.prepCriteriaValue=function(e){switch(e.comparator){case u.eColumnComparator.in:case u.eColumnComparator.notIn:e.value=new Map;break;default:"string"!=typeof e.value&&(e.value="")}},t.prototype.render=function(){var e=this,t=[];return 0===this.newCriteria.length?t.push(c.default.createElement("div",{className:"sft-fcf-row"},c.default.createElement("span",{className:"sft-fcf-label"},"No Criteria defined"))):this.newCriteria.forEach((function(n){var o,i=e.getOptions(n);switch(n.comparator){case u.eColumnComparator.in:case u.eColumnComparator.notIn:o=e.getColumnUniques(e.props.developerName,n);break;default:o=c.default.createElement("input",{type:"text",className:"sft-fcf-input",defaultValue:n.value,onChange:function(e){n.value=e.target.value}})}t.push(c.default.createElement("div",{className:"sft-fcf-row"},c.default.createElement("select",{className:"sft-fcf-select",onChange:function(t){n.comparator=parseInt(t.target.options[t.target.selectedIndex].value),e.prepCriteriaValue(n),e.forceUpdate()}},i),o,c.default.createElement("span",{className:"sft-fcf-button glyphicon glyphicon-remove-sign",title:"Remove criteria",onClick:function(t){e.newCriteria=e.newCriteria.filter((function(e){return e!==n})),e.forceUpdate()}})))})),t.push(c.default.createElement("div",{className:"sft-fcf-buttons"},c.default.createElement("span",{className:"sft-fcf-button glyphicon glyphicon-plus-sign",title:"Add criteria",onClick:this.addCriteria}))),c.default.createElement("div",{className:"modal-dialog-content"},t)},t}(c.default.Component);t.default=p},function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(0));n(37);var s=function(e){function t(t){var n=e.call(this,t)||this;return n.expanded=!1,n.showCheckboxes=n.showCheckboxes.bind(n),n}return i(t,e),t.prototype.showCheckboxes=function(){var e=document.getElementById("checkboxes");this.expanded?(e.style.display="none",this.expanded=!1):(e.style.display="flex",this.expanded=!0)},t.prototype.render=function(){var e=this,t=[];return this.props.allItems.forEach((function(n){t.push(a.default.createElement("div",{className:"checkbox-row"},a.default.createElement("div",{className:"checkbox-checkbox-wrapper"},a.default.createElement("input",{type:"checkbox",id:n,key:n,className:"sft-checkbox",checked:e.props.selectedItems.has(n),onClick:function(t){e.props.selectedItems.set(n,n),e.forceUpdate()}})),a.default.createElement("div",{className:"checkbox-label-wrapper"},a.default.createElement("span",{className:"checkbox-row-label"},n))))})),a.default.createElement("div",{className:"multiselect"},a.default.createElement("div",{className:"selectBox",onClick:this.showCheckboxes},a.default.createElement("select",null,a.default.createElement("option",null,"Select an option")),a.default.createElement("div",{className:"overSelect"})),a.default.createElement("div",{className:"checkboxScroller"},a.default.createElement("div",{className:"checkboxes",id:"checkboxes"},t)))},t}(a.default.Component);t.default=s},function(e,t,n){},function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(0)),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.render=function(){var e,t,n,o,i=this.props.root,r="Selected "+i.selectedRowMap.size+" of "+i.currentRowMap.size+" items from a total dataset of "+i.rowMap.size,s="page "+(i.currentRowPage+1)+" of "+i.currentRowPages.length;return i.currentRowPage>0?(e=a.default.createElement("span",{className:"glyphicon glyphicon-fast-backward sft-footer-pagination-button",title:"First page",onClick:i.firstPage}),t=a.default.createElement("span",{className:"glyphicon glyphicon-step-backward sft-footer-pagination-button",title:"Previous page",onClick:i.previousPage})):(e=a.default.createElement("span",{className:"glyphicon glyphicon-fast-backward sft-footer-pagination-button sft-footer-pagination-button-disabled"}),t=a.default.createElement("span",{className:"glyphicon glyphicon-step-backward sft-footer-pagination-button sft-footer-pagination-button-disabled"})),i.currentRowPage<i.currentRowPages.length-1?(o=a.default.createElement("span",{className:"glyphicon glyphicon-fast-forward sft-footer-pagination-button",title:"Last page",onClick:i.lastPage}),n=a.default.createElement("span",{className:"glyphicon glyphicon-step-forward sft-footer-pagination-button",title:"Next page",onClick:i.nextPage})):(o=a.default.createElement("span",{className:"glyphicon glyphicon-fast-forward sft-footer-pagination-button sft-footer-pagination-button-disabled"}),n=a.default.createElement("span",{className:"glyphicon glyphicon-step-forward sft-footer-pagination-button sft-footer-pagination-button-disabled"})),a.default.createElement("div",{className:"sft-footer"},a.default.createElement("div",{className:"sft-footer-summary"},a.default.createElement("span",{className:"sft-footer-summary-label"},r)),a.default.createElement("div",{className:"sft-footer-pagination"},e,t,a.default.createElement("span",{className:"sft-footer-pagination-label"},s),n,o))},t}(a.default.Component);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(5),i=function(){function e(){}return e.export=function(e,t,n){var o=this,i="",r="",a="";t.forEach((function(t){0===r.length&&(r=o.buildHeaders(e,t.objectData)),a=o.buildRow(e,t.objectData),i+=a}));var s=new Blob([r+i],{type:"text/csv"});if(navigator.msSaveBlob)navigator.msSaveBlob(s,n);else{var l=document.createElement("a");if(void 0!==l.download){var c=URL.createObjectURL(s);l.setAttribute("href",c),l.setAttribute("download",n),l.style.visibility="hidden",document.body.appendChild(l),l.click(),document.body.removeChild(l)}}},e.buildHeaders=function(e,t){var n="";return e.forEach((function(e){switch(e.contentType){case o.eContentType.ContentList:t.properties[e.developerName].value.items.forEach((function(e){n.length>0&&(n+=","),n+='"'+e.properties.ATTRIBUTE_DISPLAY_NAME.value+'"'}));break;default:n.length>0&&(n+=","),n+='"'+e.label+'"'}})),n+="\r\n"},e.buildRow=function(e,t){var n="";return e.forEach((function(e){switch(e.contentType){case o.eContentType.ContentList:t.properties[e.developerName].value.items.forEach((function(e){n.length>0&&(n+=","),n+='"'+e.properties.ATTRIBUTE_VALUE.value+'"'}));break;default:n.length>0&&(n+=","),n+='"'+t.properties[e.developerName].value+'"'}})),n+="\r\n"},e}();t.default=i},function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(0)),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.render=function(){var e=this.props.root,t=[],n=[];return n.push(a.default.createElement("div",{className:"sft-ribbon-button-wrapper",onClick:function(t){t.stopPropagation(),e.doExport(e.rowMap)}},a.default.createElement("span",{key:"exportAll",className:"glyphicon glyphicon-floppy-save sft-ribbon-button-icon",title:"Export All"}),a.default.createElement("span",{className:"sft-ribbon-button-label"},"Export All"))),e.rowMap.size>e.currentRowMap.size&&n.push(a.default.createElement("div",{className:"sft-ribbon-button-wrapper",onClick:function(t){t.stopPropagation(),e.doExport(e.currentRowMap)}},a.default.createElement("span",{key:"exportShown",className:"glyphicon glyphicon-floppy-save sft-ribbon-button-icon",title:"Export Shown"}),a.default.createElement("span",{className:"sft-ribbon-button-label"},"Export Shown"))),Object.keys(e.outcomes).forEach((function(o){var i,r,s,l=e.outcomes[o];l.isBulkAction&&"OnSelect"!==l.developerName&&"OnChange"!==l.developerName&&!l.developerName.toLowerCase().startsWith("cm")&&("true"===(null===(i=l.attributes.RequiresSelected)||void 0===i?void 0:i.value)?e.selectedRowMap.size>0&&t.push(a.default.createElement("div",{className:"sft-ribbon-button-wrapper",onClick:function(t){e.doOutcome(o,void 0)}},a.default.createElement("span",{key:o,className:"glyphicon glyphicon-"+((null===(r=l.attributes.icon)||void 0===r?void 0:r.value)||"plus")+" sft-ribbon-button-icon",title:l.label||o}),a.default.createElement("span",{className:"sft-ribbon-button-label"},l.label||o))):n.push(a.default.createElement("div",{className:"sft-ribbon-button-wrapper",onClick:function(t){e.doOutcome(o,void 0)}},a.default.createElement("span",{key:o,className:"glyphicon glyphicon-"+((null===(s=l.attributes.icon)||void 0===s?void 0:s.value)||"plus")+" sft-ribbon-button-icon",title:l.label||o}),a.default.createElement("span",{className:"sft-ribbon-button-label"},l.label||o))))})),e.selectedRowMap.size>0&&t.push(a.default.createElement("div",{className:"sft-ribbon-button-wrapper",onClick:function(t){t.stopPropagation(),e.doExport(e.selectedRowMap)}},a.default.createElement("span",{key:"exportSelected",className:"glyphicon glyphicon-floppy-save sft-ribbon-button-icon",title:"Export Selected"}),a.default.createElement("span",{className:"sft-ribbon-button-label"},"Export Selected"))),a.default.createElement("div",{className:"sft-ribbon"},a.default.createElement("div",{className:"sft-ribbon-left-wrapper"},a.default.createElement("div",{className:"sft-ribbon-title-wrapper"},a.default.createElement("span",{className:"sft-ribbon-title"},"Available actions:")),a.default.createElement("div",{className:"sft-ribbon-hbuttons-wrapper"},t)),a.default.createElement("div",{className:"sft-ribbon-right-wrapper"},a.default.createElement("div",{className:"sft-ribbon-title-wrapper"},a.default.createElement("span",{className:"sft-ribbon-title"})),a.default.createElement("div",{className:"sft-ribbon-hbuttons-wrapper"},n)))},t}(a.default.Component);t.default=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dGaWVsZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dPYmplY3REYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRmxvd0Jhc2VDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zsb3ctY29tcG9uZW50LW1vZGVsL2xpYi9GbG93T2JqZWN0RGF0YUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRmxvd0NvbXBvbmVudE1vZGVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRmxvd0F0dHJpYnV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0RpYWxvZ3MvQ29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRmxvd0Rpc3BsYXlDb2x1bW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zsb3ctY29tcG9uZW50LW1vZGVsL2xpYi9GbG93T2JqZWN0RGF0YVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRmxvd091dGNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zsb3ctY29tcG9uZW50LW1vZGVsL2xpYi9EaWFsb2dzL0Zsb3dDb250ZXh0TWVudS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29sdW1uRmlsdGVycy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbHVtbkNyaXRlcmlhLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL1NlYXJjaEZpbHRlclRhYmxlLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zsb3ctY29tcG9uZW50LW1vZGVsL2xpYi9FdmVudE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC50aHJvdHRsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvRmxvd1BhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zsb3ctY29tcG9uZW50LW1vZGVsL2xpYi9EaWFsb2dzL0Zsb3dEaWFsb2dCb3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zsb3ctY29tcG9uZW50LW1vZGVsL2xpYi9EaWFsb2dzL0Zsb3dNZXNzYWdlQm94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbG93LWNvbXBvbmVudC1tb2RlbC9saWIvSWNvblBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxvdy1jb21wb25lbnQtbW9kZWwvbGliL0Zsb3dDaGFydC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUm93SXRlbS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQ2VsbEl0ZW0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NlYXJjaEZpbHRlclRhYmxlUm93LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvU2VhcmNoRmlsdGVyVGFibGVIZWFkZXJzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvQ29sdW1uRmlsdGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9GaWx0ZXJDb25maWdGb3JtLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvTXVsdGlTZWxlY3QudHN4Iiwid2VicGFjazovLy8uL3NyYy9TZWFyY2hGaWx0ZXJUYWJsZUZvb3Rlci50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL01vZGVsRXhwb3J0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NlYXJjaEZpbHRlclRhYmxlUmliYm9uLnRzeCJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlJlYWN0IiwiRmxvd0ZpZWxkIiwiZUNvbnRlbnRUeXBlIiwiRmxvd09iamVjdERhdGFfMSIsIkZsb3dPYmplY3REYXRhQXJyYXlfMSIsImZpZWxkIiwidGhpcyIsIkNvbnRlbnRUeXBlIiwidW5rbm93biIsIkRldmVsb3Blck5hbWUiLCJUeXBlRWxlbWVudERldmVsb3Blck5hbWUiLCJUeXBlRWxlbWVudElkIiwiVHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWUiLCJUeXBlRWxlbWVudFByb3BlcnR5SWQiLCJWYWx1ZUVsZW1lbnRJZCIsImNvbnRlbnRUeXBlIiwiZGV2ZWxvcGVyTmFtZSIsInR5cGVFbGVtZW50RGV2ZWxvcGVyTmFtZSIsInR5cGVFbGVtZW50SWQiLCJ0eXBlRWxlbWVudFByb3BlcnR5RGV2ZWxvcGVyTmFtZSIsInR5cGVFbGVtZW50UHJvcGVydHlJZCIsInZhbHVlRWxlbWVudElkIiwiQ29udGVudE9iamVjdCIsIlZhbHVlIiwib2JqZWN0RGF0YSIsIkZsb3dPYmplY3REYXRhIiwidW5kZWZpbmVkIiwiQ29udGVudExpc3QiLCJGbG93T2JqZWN0RGF0YUFycmF5IiwiY29udGVudFZhbHVlIiwiY29uZmlndXJhYmxlIiwic2V0IiwiaUZsb3dGaWVsZCIsIm9kIiwicHVzaCIsImlPYmplY3REYXRhIiwiaUZsb3dPYmplY3REYXRhQXJyYXkiLCJGbG93T2JqZWN0RGF0YVByb3BlcnR5XzEiLCJkYXRhIiwiRXh0ZXJuYWxJZCIsIkludGVybmFsSWQiLCJJc1NlbGVjdGVkIiwiT3JkZXIiLCJQcm9wZXJ0aWVzIiwiaW50ZXJuYWxJZCIsImV4dGVybmFsSWQiLCJvcmRlciIsImlzU2VsZWN0ZWQiLCJwcm9wZXJ0aWVzIiwibGVuZ3RoIiwiX2kiLCJfYSIsIkZsb3dPYmplY3REYXRhUHJvcGVydHkiLCJjb25zb2xlIiwibG9nIiwibmV3SW5zdGFuY2UiLCJtYW55d2hvIiwidXRpbHMiLCJndWlkIiwiYWRkUHJvcGVydHkiLCJuZXdQcm9wZXJ0eSIsInJlbW92ZVByb3BlcnR5IiwiY2xvbmUiLCJuZXdUeXBlTmFtZSIsIl90aGlzIiwia2V5cyIsImZvckVhY2giLCJuZXdQcm9wIiwic2VsZWN0ZWQiLCJwcm9wcyIsImlGbG93T2JqZWN0RGF0YVByb3BlcnR5Iiwib3V0cHV0IiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwiX18iLCJjb25zdHJ1Y3RvciIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiX19nZW5lcmF0b3IiLCJib2R5IiwiZiIsInkiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiaXRlcmF0b3IiLCJ2Iiwib3AiLCJUeXBlRXJyb3IiLCJwb3AiLCJGbG93QmFzZUNvbXBvbmVudCIsImVMb2FkaW5nU3RhdGUiLCJGbG93QXR0cmlidXRlXzEiLCJGbG93RGlzcGxheUNvbHVtbl8xIiwiRmxvd0ZpZWxkXzEiLCJGbG93T3V0Y29tZV8xIiwidGhyb3R0bGUiLCJfc3VwZXIiLCJGaWVsZHMiLCJBdHRyaWJ1dGVzIiwiT3V0Y29tZXMiLCJzZW5kQ29sbGFib3JhdGlvbk1lc3NhZ2UiLCJfc2VuZENvbGxhYm9yYXRpb25NZXNzYWdlIiwiTG9hZGluZ1N0YXRlIiwiaW5pdGl0aWFsaXppbmciLCJsb2FkQWxsVmFsdWVzIiwiZG9udExvYWRBbGxWYWx1ZXMiLCJ1cGRhdGVWYWx1ZXMiLCJ0cmlnZ2VyT3V0Y29tZSIsIkNvbXBvbmVudElkIiwiaWQiLCJQYXJlbnRJZCIsInBhcmVudElkIiwiRmxvd0tleSIsImZsb3dLZXkiLCJsb2FkTW9kZWwiLCJsb2FkQXR0cmlidXRlcyIsImxvYWRPdXRjb21lcyIsInJlY2VpdmVNZXNzYWdlIiwiZ2V0U3RhdGVWYWx1ZSIsInNldFN0YXRlVmFsdWUiLCJnZXRTdGF0ZVZhbHVlVHlwZSIsIm9uQmVmb3JlU2VuZCIsIm9uRG9uZSIsImNhbGN1bGF0ZVZhbHVlIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImJhc2VVcmwiLCJzZXR0aW5ncyIsImdsb2JhbCIsImxvY2F0aW9uIiwib3JpZ2luIiwiU3RhdGVJZCIsImV4dHJhY3RTdGF0ZUlkIiwiVGVuYW50SWQiLCJleHRyYWN0VGVuYW50SWQiLCJpbnZva2V1cmwiLCJ1cmwiLCJ1c2VydXJsIiwidmFsdWV1cmwiLCJpbml0aXRpYWxpemVkIiwicmVhZHkiLCJNb2RlbCIsIlVzZXIiLCJocmVmIiwiSXNEZXNpZ25UaW1lIiwiSlNPTiIsInBhcnNlIiwic2Vzc2lvblN0b3JhZ2UiLCJmbG93VXNlciIsImF1dGhlbnRpY2F0aW9uVG9rZW4iLCJnZXRBdHRyaWJ1dGUiLCJhdHRyaWJ1dGVOYW1lIiwiZGVmYXVsdFZhbHVlIiwiYXR0cmlidXRlcyIsInhociIsInJlcXVlc3QiLCJvYyIsImdldE91dGNvbWVCeUlkIiwibWFwRWxlbWVudEludm9rZVJlcXVlc3QiLCJzZWxlY3RlZE91dGNvbWVJZCIsIm9jdCIsImV2ZW50TWFuYWdlciIsIm91dGNvbWVCZWluZ1RyaWdnZXJlZCIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsInN0cmlwcGVkIiwicmVwbGFjZSIsInZhbCIsInN0cmlwcGVkQml0cyIsInNwbGl0IiwicG9zIiwiZmllbGRzIiwiZWxlIiwib3V0Y29tZV8xIiwiaW52b2tlVHlwZSIsIm1vZGVsIiwicGFyc2VFbmdpbmVSZXNwb25zZSIsInByZXNlcnZlU3RhdGUiLCJhdHRyIiwidGFyZ2V0VXJsIiwiX2IiLCJ0b0xvd2VyQ2FzZSIsImNsb3NlIiwiQXV0b09wZW5VcmwiLCJvcGVuIiwiYWxlcnQiLCJBdXRvTmF2VXJsIiwicHJpbnQiLCJjb21wb25lbnREaWRNb3VudCIsIm1vdW50aW5nIiwiYWRkRG9uZUxpc3RlbmVyIiwiY29tcG9uZW50SWQiLCJhZGRCZWZvcmVTZW5kTGlzdGVuZXIiLCJtb3VudGVkIiwicmVtb3ZlTG9hZGluZ0luZGljYXRvciIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVtb3ZlQmVmb3JlU2VuZExpc3RlbmVyIiwicmVtb3ZlRG9uZUxpc3RlbmVyIiwibG9hZE91dGNvbWUiLCJvdXRjb21lSWQiLCJvdXRjb21lIiwiZ2V0T3V0Y29tZSIsIkZsb3dPdXRjb21lIiwib3V0cyIsImdldE91dGNvbWVzIiwib3V0c18xIiwib3V0c18yIiwib3V0Y29tZXMiLCJnZXRDb21wb25lbnQiLCJhdHRycyIsIkZsb3dBdHRyaWJ1dGUiLCJjb250ZW50IiwiZGF0YVNvdXJjZSIsImRpc3BsYXlDb2x1bW5zIiwiZW5hYmxlZCIsImlzRW5hYmxlZCIsImhlaWdodCIsImhlbHBJbmZvIiwiaGludEluZm8iLCJoaW50VmFsdWUiLCJqb2luVXJpIiwiam9pblVSSSIsIm1heFNpemUiLCJtdWx0aVNlbGVjdCIsImlzTXVsdGlTZWxlY3QiLCJyZWFkT25seSIsImlzRWRpdGFibGUiLCJyZXF1aXJlZCIsImlzUmVxdWlyZWQiLCJzaXplIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJ2aXNpYmxlIiwiaXNWaXNpYmxlIiwid2lkdGgiLCJkcyIsImRzXzEiLCJhZGRJdGVtIiwiY29scyIsImNvbHVtbnMiLCJjb2xzXzEiLCJjb2wiLCJGbG93RGlzcGxheUNvbHVtbiIsImxvYWRWYWx1ZSIsInZhbHVlTmFtZSIsImxvYWRpbmciLCJjYWxsUmVxdWVzdE9sZCIsImdldFJlc3VsdEJvZHlUZXh0IiwicmVzcG9uc2UiLCJ0ZXh0Iiwic3Vic3RyIiwiY2FsbFJlcXVlc3QiLCJtZXRob2QiLCJyZXN1bHRzIiwiaGVhZGVycyIsInRlbmFudElkIiwiY3JlZGVudGlhbHMiLCJmZXRjaCIsImpzb24iLCJlcnJvclRleHQiLCJzdGF0dXMiLCJjb25uZWN0aW9uIiwic3RhdGUiLCJnZXRBdXRoZW50aWNhdGlvblRva2VuIiwidXNlcnZhbCIsInUiLCJtYXAiLCJkaXJlY3RvcnlJZCIsImRpcmVjdG9yeU5hbWUiLCJlbWFpbCIsImZpcnN0TmFtZSIsImdyb3VwSWQiLCJncm91cE5hbWUiLCJpcEFkZHJlc3MiLCJsYW5ndWFnZSIsImxhc3ROYW1lIiwicm9sZUlkIiwicm9sZU5hbWUiLCJ1c2VyTmFtZSIsImZsb3dTdGF0ZSIsImZsb3dNb2RlbCIsInNlbGVjdGVkTW9kZWxJdGVtcyIsImdldFNlbGVjdGVkSXRlbXMiLCJpdGVtcyIsImN0IiwiaWdub3JlU3RhdGUiLCJvbGRTdGF0ZSIsIm5ld1N0YXRlIiwib2JqZWN0RGF0YUFycmF5IiwibG9hZGluZ1N0YXRlIiwic2F2aW5nIiwic3RyaW5naWZ5Iiwic2V0Q29tcG9uZW50IiwidG9JU09TdHJpbmciLCJjb2xsYWJvcmF0aW9uIiwiaXNJbml0aWFsaXplZCIsImV2ZW50SGFuZGxlZCIsImEiLCJ2YWx1ZXMiLCJ1cGRhdGVGaWVsZHMiLCJtZXNzYWdlIiwib3V0Y29tZU5hbWUiLCJtb3ZpbmciLCJpRmxvd091dGNvbWUiLCJjb21wb25lbnQiLCJvbk91dGNvbWUiLCJtb3ZlVG8iLCJmbG93RWxlbWVudElkIiwiaW5mbyIsInJlc3AiLCJzdGF0ZUlkIiwiZ2V0U3RhdGUiLCJjdXJyZW50TWFwRWxlbWVudElkIiwicGFnZVJlcXVlc3QiLCJwYWdlQ29tcG9uZW50SW5wdXRSZXNwb25zZXMiLCJwYWdlQ29tcG9uZW50SWQiLCJzZWxlY3RlZE1hcEVsZW1lbnRJZCIsInN0YXRlVG9rZW4iLCJ0b2tlbiIsImVuZ2luZSIsInJlbmRlciIsIm5vdyIsIkRhdGUiLCJ0aW1lc3RhbXAiLCJnZXRIb3VycyIsInNsaWNlIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJqb2luIiwibGF1bmNoRmxvd1NpbGVudCIsInRlbmFudCIsImZsb3dJZCIsInBsYXllciIsImlucHV0cyIsImxhdW5jaEZsb3dUYWIiLCJjb21wb25lbnREaWRVcGRhdGUiLCJhY3Rpb24iLCJ0b1VwcGVyQ2FzZSIsImZpZWxkTmFtZSIsIm1zZyIsImhhbmRsZU1lc3NhZ2UiLCJDb21wb25lbnQiLCJlU29ydE9yZGVyIiwiYXJyYXkiLCJJdGVtcyIsIml0ZW0iLCJzb3J0IiwiYXNjZW5kaW5nIiwidmFsQSIsInZhbEIiLCJDb250ZW50TnVtYmVyIiwicGFyc2VGbG9hdCIsIkNvbnRlbnREYXRlVGltZSIsImNsZWFySXRlbXMiLCJvYmoiLCJnZXRJdGVtV2l0aFByb3BlcnR5TmFtZSIsImZpbmRQcm9wZXJ0eSIsIndpdGhWYWx1ZSIsInJldHVyblByb3BlcnR5IiwiY29tcGFyZVRvIiwiQ29udGVudFN0cmluZyIsIkNvbnRlbnRCb29sZWFuIiwiU3RyaW5nIiwiZ2V0SXRlbVdpdGhQcm9wZXJ0eVZhbHVlIiwiZ2V0SW5kZXhPZkl0ZW1XaXRoUHJvcGVydHlWYWx1ZSIsInJlbW92ZUl0ZW1XaXRoUHJvcGVydHlWYWx1ZSIsIm1vZGlmaWVkQ291bnQiLCJzcGxpY2UiLCJyZW1vdmVJdGVtQXRJbmRleCIsImluZGV4IiwiX19jcmVhdGVCaW5kaW5nIiwiayIsImsyIiwiX19leHBvcnRTdGFyIiwiTmFtZSIsIkRyYWdFdmVudCIsImVEcmFnRXZlbnRUeXBlIiwibW9kYWxEaWFsb2dCdXR0b24iLCJoYW5kbGVyIiwidHlwZSIsInNvdXJjZUVsZW1lbnQiLCJ0YXJnZXRFbGVtZW50IiwibW91c2VYIiwibW91c2VZIiwibW91c2VPZmZzZXRYIiwibW91c2VPZmZzZXRZIiwic3RhcnQiLCJldnQiLCJkcmFnIiwiZW5kIiwidGFyZ2V0IiwiY29sdW1uIiwiQ29sdW1uIiwiQ29tcG9uZW50VHlwZSIsImNvbXBvbmVudFR5cGUiLCJDb250ZW50Rm9ybWF0IiwiY29udGVudEZvcm1hdCIsIkRpc3BsYXlPcmRlciIsIkxhYmVsIiwiUmVhZE9ubHkiLCJUeXBlRWxlbWVtdFByb3BlcnR5VG9EaXNwbGF5SWQiLCJ0eXBlRWxlbWVtdFByb3BlcnR5VG9EaXNwbGF5SWQiLCJWaXNpYmxlIiwiaXNEaXNwbGF5VmFsdWUiLCJpRmxvd0Rpc3BsYXlDb2x1bW4iLCJjdiIsIm9iamQiLCJpc05hTiIsImR0IiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJlUGFnZUFjdGlvblR5cGUiLCJlUGFnZUFjdGlvbkJpbmRpbmdUeXBlIiwiSWQiLCJJc0J1bGtBY3Rpb24iLCJpc0J1bGtBY3Rpb24iLCJJc091dCIsImlzT3V0IiwiUGFnZUFjdGlvbkJpbmRpbmdUeXBlIiwicGFnZUFjdGlvbkJpbmRpbmdUeXBlIiwiUGFnZUFjdGlvblR5cGUiLCJwYWdlQWN0aW9uVHlwZSIsIlBhZ2VPYmplY3RCaW5kaW5nSWQiLCJwYWdlT2JqZWN0QmluZGluZ0lkIiwiT3V0Y29tZSIsIkZsb3dDb250ZXh0TWVudSIsImRpc3BsYXlTdHlsZSIsIm1lbnVJdGVtcyIsInNob3dDb250ZXh0TWVudSIsImhpZGVDb250ZXh0TWVudSIsInBvc2l0aW9uQ29udGV4dE1lbnUiLCJzZXRNZW51IiwibWVudSIsImlubmVyV2lkdGgiLCJsZWZ0IiwicmlnaHQiLCJpbm5lckhlaWdodCIsInRvcCIsImJvdHRvbSIsImRpc3BsYXkiLCJtZW51SXRlbUFycmF5XzEiLCJmb3JjZVVwZGF0ZSIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJvbk1vdXNlTGVhdmUiLCJzdHlsZSIsInJlZiIsImVsZW1lbnQiLCJkZWZhdWx0IiwiZUZpbHRlckV2ZW50IiwiZVNvcnREaXJlY3Rpb24iLCJwYXJlbnQiLCJNYXAiLCJub3RpZnkiLCJnZXRTb3J0SWNvbiIsImdldEZpbHRlckljb24iLCJzb3J0Q2xpY2tlZCIsImZpbHRlckNsaWNrZWQiLCJzYXZlRmlsdGVyIiwiY2FuY2VsRmlsdGVyIiwibWF0Y2hlc0NyaXRlcmlhIiwic2V0RGlhbG9nIiwiZGlhbG9nIiwiZXZlbnQiLCJmaWx0ZXJzQ2hhbmdlZCIsImhhcyIsInNvcnROb25lIiwic29ydFRvZ2dsZSIsInJvb3QiLCJjb2xNYXAiLCJtZXNzYWdlQm94Iiwic2hvd01lc3NhZ2VCb3giLCJmaWx0ZXIiLCJmaWx0ZXJDbGVhciIsImNsZWFyRmlsdGVycyIsImNyaXRlcmlhIiwibmV3Q3JpdGVyaWEiLCJoaWRlTWVzc2FnZUJveCIsIm9uQ2xpY2siLCJ0aXRsZSIsIm5vbmUiLCJkZXNjZW5kaW5nIiwiRnJhZ21lbnQiLCJzb3VyY2UiLCJtYXRjaGVzIiwib2JqRGF0YSIsImNyaXQiLCJjb21wYXJhdG9yIiwiZUNvbHVtbkNvbXBhcmF0b3IiLCJlcXVhbFRvIiwibm90RXF1YWxUbyIsImNvbnRhaW5zIiwiaW5kZXhPZiIsIm5vdENvbnRhaW5zIiwiaW4iLCJub3RJbiIsImdldFNvcnRDb2x1bW4iLCJzb3J0Q29sdW1uIiwiY2FuZGlkYXRlcyIsImZyb20iLCJjb2xsYXRvciIsIkludGwiLCJDb2xsYXRvciIsIm51bWVyaWMiLCJzZW5zaXRpdml0eSIsInNvcnRlZCIsImNvbXBhcmUiLCJyZXZlcnNlIiwidmVyc2lvbiIsInJvd01hcCIsImN1cnJlbnRSb3dNYXAiLCJtYXhQYWdlUm93cyIsImN1cnJlbnRSb3dQYWdlcyIsImN1cnJlbnRSb3dQYWdlIiwic2VsZWN0ZWRSb3dNYXAiLCJyb3dzIiwiY29sVmFsTWFwIiwibGFzdENvbnRlbnQiLCJmaWx0ZXJzIiwiZmxvd01vdmVkIiwiYnVpbGRDb3JlVGFibGUiLCJidWlsZFJpYmJvbiIsImJ1aWxkRm9vdGVyIiwidG9nZ2xlU2VsZWN0IiwiZmlyc3RQYWdlIiwicHJldmlvdXNQYWdlIiwibmV4dFBhZ2UiLCJsYXN0UGFnZSIsImRvRXhwb3J0IiwicGFyc2VJbnQiLCJzb3J0Um93cyIsInBhZ2luYXRlUm93cyIsImJ1aWxkVGFibGVSb3dzIiwiZmlsdGVyUm93cyIsInNldFJvdyIsImRlbGV0ZSIsInNldFJpYmJvbiIsInJpYmJvbiIsInNldEhlYWRlcnMiLCJzZXRGb290ZXIiLCJmb290ZXIiLCJtZSIsInNldFRpbWVvdXQiLCJyaWJib25FbGVtZW50IiwiaGVhZGVyc0VsZW1lbnQiLCJmb290ZXJFbGVtZW50Iiwibm9kZSIsImN1cnJlbnRQYWdlIiwidG9nZ2xlU2VsZWN0QWxsIiwiY2hlY2tlZCIsImNsZWFyIiwicm93Iiwic2F2ZVNlbGVjdGVkIiwic2VsZWN0ZWRJdGVtcyIsInRJdGVtIiwibG9hZFNlbGVjdGVkIiwicm93RWxlbWVudHMiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImxpc3RJdGVtcyIsImNvbnRleHRNZW51IiwiY21DbGljayIsImNsaWVudFgiLCJjbGllbnRZIiwiZG9PdXRjb21lIiwic2VsZWN0ZWRJdGVtIiwiaGFuZGxlRXZlbnQiLCJvcGRhdGEiLCJleHBvcnQiLCJjbGFzc2VzIiwib25Db250ZXh0TWVudSIsIkZsb3dNZXNzYWdlQm94IiwiRmxvd0NvbXBvbmVudCIsInJlZ2lzdGVyIiwiU2VhcmNoRmlsdGVyVGFibGUiLCJiZWZvcmVTZW5kTGlzdGVuZXJzIiwiZG9uZUxpc3RlbmVycyIsImZhaWxMaXN0ZW5lcnMiLCJoaXN0b3J5IiwiYmVmb3JlU2VuZCIsImZhaWwiLCJhZGRGYWlsTGlzdGVuZXIiLCJyZW1vdmVGYWlsTGlzdGVuZXIiLCJpbml0aWFsaXplIiwiaW52b2tlIiwicmVUcmltIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzT2N0YWwiLCJmcmVlUGFyc2VJbnQiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJzZWxmIiwiRnVuY3Rpb24iLCJvYmplY3RUb1N0cmluZyIsInRvU3RyaW5nIiwibmF0aXZlTWF4IiwiTWF0aCIsIm1heCIsIm5hdGl2ZU1pbiIsIm1pbiIsImRlYm91bmNlIiwiZnVuYyIsIndhaXQiLCJvcHRpb25zIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwidHJhaWxpbmciLCJpbnZva2VGdW5jIiwidGltZSIsImFyZ3MiLCJsZWFkaW5nRWRnZSIsInRpbWVyRXhwaXJlZCIsInNob3VsZEludm9rZSIsInRpbWVTaW5jZUxhc3RDYWxsIiwidHJhaWxpbmdFZGdlIiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJhcmd1bWVudHMiLCJ0b051bWJlciIsImlzT2JqZWN0IiwiY2FuY2VsIiwiY2xlYXJUaW1lb3V0IiwiZmx1c2giLCJpc09iamVjdExpa2UiLCJpc1N5bWJvbCIsIm90aGVyIiwidmFsdWVPZiIsImlzQmluYXJ5IiwidGVzdCIsIkZsb3dQYWdlIiwiRmxvd0RpYWxvZ0JveCIsIkNvbW1vbl8xIiwiZHJhZ0V2ZW50IiwiZGlhbG9nVmlzaWJsZSIsImRpYWxvZ1RpdGxlIiwiZGlhbG9nQnV0dG9ucyIsImRpYWxvZ09uQ2xvc2UiLCJoaWRlRGlhbG9nIiwiaGFuZGxlS2V5VXAiLCJoYW5kbGVPdXRzaWRlQ2xpY2siLCJzaG93RGlhbG9nIiwicGFyZW50WENlbnRlciIsIm9mZnNldFBhcmVudCIsImNsaWVudFdpZHRoIiwicGFyZW50WUNlbnRlciIsImNsaWVudEhlaWdodCIsImRpYWxvZ1hPZmZzZXQiLCJkaWFsb2dZT2Zmc2V0IiwiY2xhc3NMaXN0IiwiYWRkIiwicG9zaXRpb25EaWFsb2ciLCJzdG9wRXZlbnRCdWJibGUiLCJjYW5jZWxCdWJibGUiLCJyZXR1cm5WYWx1ZSIsImJ1dHRvbnMiLCJvbkNsb3NlIiwiZGlhbG9nQ29udGVudCIsIjI3Iiwia2V5Q29kZSIsIl9sb29wXzEiLCJidXR0b24iLCJvbk1vdXNlRG93biIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZVVwIiwiZmxleERpcmVjdGlvbiIsImZsZXhHcm93IiwibWFyZ2luTGVmdCIsImN1cnNvciIsImNvbG9yIiwibWFyZ2luUmlnaHQiLCJmb250U2l6ZSIsImNoaWxkcmVuIiwibW92ZU1lIiwiY2xpZW50UmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm1zZ2JveFZpc2libGUiLCJtc2dib3hUaXRsZSIsIm1zZ2JveEJ1dHRvbnMiLCJtc2dib3hPbkNsb3NlIiwibXNnYm94Q29udGVudCIsIkljb25QaWNrZXIiLCJpY29ucyIsIm9uQ2hhbmdlVmFsdWUiLCJvbmNoYW5nZSIsImFkZEljb24iLCJhZGRJY29ucyIsImlubmVyVGV4dCIsIm9uQ2hhbmdlIiwib3B0IiwiY2xzXzEiLCJyb2xlIiwiRmxvd0NoYXJ0IiwiRmxvd0NoYXJ0Q29sdW1uRGVmaW5pdGlvbiIsImVGbG93Q2hhcnRUeXBlIiwiRmxvd0Jhc2VDb21wb25lbnRfMSIsImFwaUtleSIsImJlZ2luQ2hhcnRzQXBpIiwiYXBpTG9hZGVkIiwiZHJhd0NoYXJ0IiwiZ29vZ2xlIiwiY2hhcnRzIiwiRzEzQ2hhcnRMb2FkaW5nIiwic2NyaXB0IiwiZG9jdW1lbnQiLCJzcmMiLCJhcHBlbmRDaGlsZCIsInZpc3VhbGl6YXRpb24iLCJHZW9DaGFydCIsImxvYWQiLCJwYWNrYWdlcyIsIm1hcHNBcGlLZXkiLCJzZXRPbkxvYWRDYWxsYmFjayIsImJ1aWxkRGF0YSIsImRhdGFUYWJsZSIsInByb3BlcnR5TmFtZXMiLCJwcm9wIiwiY29sdW1uTmFtZXMiLCJjaGFydERhdGEiLCJhcnJheVRvRGF0YVRhYmxlIiwiY2hhcnQiLCJjaGFydFR5cGUiLCJCYXJDaGFydCIsImdldEVsZW1lbnRCeUlkIiwiQ29sdW1uQ2hhcnQiLCJQaWVDaGFydCIsIkRvbnV0Q2hhcnQiLCJkcmF3Iiwib3JpZ2luYWxWYWx1ZSIsIm5ld1ZhbHVlIiwic29ydEljb24iLCJmaWx0ZXJJY29uIiwic29ydEFzY2VuZGluZyIsInNvcnREZXNjZW5kaW5nIiwiYWRkQ3JpdGVyaWEiLCJnZXRPcHRpb25zIiwiZ2V0Q29sdW1uVW5pcXVlcyIsImFsbEl0ZW1zIiwicHJlcENyaXRlcmlhVmFsdWUiLCJjcml0Qm94Iiwic2VsZWN0ZWRJbmRleCIsImV4cGFuZGVkIiwic2hvd0NoZWNrYm94ZXMiLCJjaGVja2JveGVzIiwiY2hlY2tCb3hlcyIsInByZXZQYWdlIiwic3VtbWFyeSIsInBhZyIsImZpbGVOYW1lIiwiYnVpbGRIZWFkZXJzIiwiYnVpbGRSb3ciLCJibG9iIiwiQmxvYiIsIm5hdmlnYXRvciIsIm1zU2F2ZUJsb2IiLCJsaW5rIiwiZG93bmxvYWQiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJzZXRBdHRyaWJ1dGUiLCJ2aXNpYmlsaXR5IiwiY2xpY2siLCJyZW1vdmVDaGlsZCIsImxlZnRCdXR0b25zIiwicmlnaHRCdXR0b25zIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixF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LFNBQ3RCcnNCLEtBQUtxc0IsUUFBUSxPQUFRLFFBQ3JCcnNCLEtBQUtxc0IsUUFBUSxPQUFRLFFBQ3JCcnNCLEtBQUtxc0IsUUFBUSxPQUFRLFFBQ3JCcnNCLEtBQUtxc0IsUUFBUSxPQUFRLFFBQ3JCcnNCLEtBQUtxc0IsUUFBUSxlQUFnQixnQkFDN0Jyc0IsS0FBS3FzQixRQUFRLFdBQVksWUFDekJyc0IsS0FBS3FzQixRQUFRLFNBQVUsVUFDdkJyc0IsS0FBS3FzQixRQUFRLFFBQVMsU0FDdEJyc0IsS0FBS3FzQixRQUFRLGNBQWUsZUFDNUJyc0IsS0FBS3FzQixRQUFRLFNBQVUsVUFDdkJyc0IsS0FBS3FzQixRQUFRLFVBQVcsV0FDeEJyc0IsS0FBS3FzQixRQUFRLFdBQVksWUFDekJyc0IsS0FBS3FzQixRQUFRLE9BQVEsUUFDckJyc0IsS0FBS3FzQixRQUFRLE9BQVEsUUFDckJyc0IsS0FBS3FzQixRQUFRLGFBQWMsY0FDM0Jyc0IsS0FBS3FzQixRQUFRLGFBQWMsY0FDM0Jyc0IsS0FBS3FzQixRQUFRLGNBQWUsZUFDNUJyc0IsS0FBS3FzQixRQUFRLFlBQWEsYUFDMUJyc0IsS0FBS3FzQixRQUFRLFNBQVUsVUFDdkJyc0IsS0FBS3FzQixRQUFRLFVBQVcsV0FDeEJyc0IsS0FBS3FzQixRQUFRLE1BQU8sT0FDcEJyc0IsS0FBS3FzQixRQUFRLE9BQVEsUUFDckJyc0IsS0FBS3FzQixRQUFRLE9BQVEsUUFDckJyc0IsS0FBS3FzQixRQUFRLFdBQVksWUFDekJyc0IsS0FBS3FzQixRQUFRLFFBQVMsU0FDdEJyc0IsS0FBS3FzQixRQUFRLFNBQVUsVUFDdkJyc0IsS0FBS3FzQixRQUFRLE9BQVEsUUFDckJyc0IsS0FBS3FzQixRQUFRLE9BQVEsUUFDckJyc0IsS0FBS3FzQixRQUFRLFNBQVUsVUFDdkJyc0IsS0FBS3FzQixRQUFRLGNBQWUsZUFDNUJyc0IsS0FBS3FzQixRQUFRLGFBQWMsY0FDM0Jyc0IsS0FBS3FzQixRQUFRLGFBQWMsY0FDM0Jyc0IsS0FBS3FzQixRQUFRLGVBQWdCLGdCQUM3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SCxLQVFsQ215QixFQUFheHZCLEtBQ1QsK0JBQ1FnYixVQUFVLDRCQUNWbUMsUUFBUyxTQUFDMVosR0FBWWdaLEVBQUtnRyxVQUFVcGxCLE9BQUttQyxLQUUxQyxnQ0FDSW5DLElBQUtBLEVBQ0wyZCxVQUFXLHlCQUFvRCxRQUExQixFQUFBbFAsRUFBUS9DLFdBQWlCLFlBQUMsZUFBRWhNLFFBQVMsUUFBVSwwQkFDcEZxZ0IsTUFBT3RSLEVBQVF6SCxPQUFTaEgsSUFHNUIsZ0NBQ0kyZCxVQUFVLDJCQUVUbFAsRUFBUXpILE9BQVNoSCxTQVEzQ29mLEVBQUs4QyxlQUFlNVIsS0FBTyxHQUMxQjRoQixFQUFZdnZCLEtBQ1IsK0JBQ0lnYixVQUFVLDRCQUNWbUMsUUFBUyxTQUFDMVosR0FBWUEsRUFBRTBlLGtCQUFtQjFGLEVBQUs0RCxTQUFTNUQsRUFBSzhDLGtCQUU5RCxnQ0FDSWxpQixJQUFLLGlCQUNMMmQsVUFBVyx5REFDWG9DLE1BQU8sb0JBR1gsZ0NBQ0lwQyxVQUFVLDJCQUVULHFCQVFiLCtCQUNJQSxVQUFVLGNBRVYsK0JBQ0lBLFVBQVUsMkJBRVYsK0JBQ0lBLFVBQVUsNEJBRVYsZ0NBQ0lBLFVBQVUsb0JBRVQsdUJBSVQsK0JBQ0lBLFVBQVUsK0JBRVR1VSxJQUdULCtCQUNJdlUsVUFBVSw0QkFFWCwrQkFDS0EsVUFBVSw0QkFFVixnQ0FDSUEsVUFBVSxzQkFNbEIsK0JBQ0lBLFVBQVUsK0JBRVR3VSxNQU16QixFQWhMQSxDQUFxRCxVQUFNOWEsVyIsImZpbGUiOiJzZnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTQpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkZsb3dGaWVsZCA9IGV4cG9ydHMuZUNvbnRlbnRUeXBlID0gdm9pZCAwO1xyXG52YXIgRmxvd09iamVjdERhdGFfMSA9IHJlcXVpcmUoXCIuL0Zsb3dPYmplY3REYXRhXCIpO1xyXG52YXIgRmxvd09iamVjdERhdGFBcnJheV8xID0gcmVxdWlyZShcIi4vRmxvd09iamVjdERhdGFBcnJheVwiKTtcclxudmFyIGVDb250ZW50VHlwZTtcclxuKGZ1bmN0aW9uIChlQ29udGVudFR5cGUpIHtcclxuICAgIGVDb250ZW50VHlwZVtlQ29udGVudFR5cGVbXCJ1bmtub3duXCJdID0gMF0gPSBcInVua25vd25cIjtcclxuICAgIGVDb250ZW50VHlwZVtlQ29udGVudFR5cGVbXCJDb250ZW50U3RyaW5nXCJdID0gMV0gPSBcIkNvbnRlbnRTdHJpbmdcIjtcclxuICAgIGVDb250ZW50VHlwZVtlQ29udGVudFR5cGVbXCJDb250ZW50TnVtYmVyXCJdID0gMl0gPSBcIkNvbnRlbnROdW1iZXJcIjtcclxuICAgIGVDb250ZW50VHlwZVtlQ29udGVudFR5cGVbXCJDb250ZW50T2JqZWN0XCJdID0gM10gPSBcIkNvbnRlbnRPYmplY3RcIjtcclxuICAgIGVDb250ZW50VHlwZVtlQ29udGVudFR5cGVbXCJDb250ZW50Qm9vbGVhblwiXSA9IDRdID0gXCJDb250ZW50Qm9vbGVhblwiO1xyXG4gICAgZUNvbnRlbnRUeXBlW2VDb250ZW50VHlwZVtcIkNvbnRlbnRMaXN0XCJdID0gNV0gPSBcIkNvbnRlbnRMaXN0XCI7XHJcbiAgICBlQ29udGVudFR5cGVbZUNvbnRlbnRUeXBlW1wiQ29udGVudFBhc3N3b3JkXCJdID0gNl0gPSBcIkNvbnRlbnRQYXNzd29yZFwiO1xyXG4gICAgZUNvbnRlbnRUeXBlW2VDb250ZW50VHlwZVtcIkNvbnRlbnRDb250ZW50XCJdID0gN10gPSBcIkNvbnRlbnRDb250ZW50XCI7XHJcbiAgICBlQ29udGVudFR5cGVbZUNvbnRlbnRUeXBlW1wiQ29udGVudERhdGVUaW1lXCJdID0gOF0gPSBcIkNvbnRlbnREYXRlVGltZVwiO1xyXG4gICAgZUNvbnRlbnRUeXBlW2VDb250ZW50VHlwZVtcIkNvbnRlbnRFbmNyeXB0ZWRcIl0gPSA5XSA9IFwiQ29udGVudEVuY3J5cHRlZFwiO1xyXG59KShlQ29udGVudFR5cGUgPSBleHBvcnRzLmVDb250ZW50VHlwZSB8fCAoZXhwb3J0cy5lQ29udGVudFR5cGUgPSB7fSkpO1xyXG52YXIgRmxvd0ZpZWxkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmxvd0ZpZWxkKGZpZWxkKSB7XHJcbiAgICAgICAgdGhpcy5Db250ZW50VHlwZSA9IGVDb250ZW50VHlwZS51bmtub3duO1xyXG4gICAgICAgIHRoaXMuRGV2ZWxvcGVyTmFtZSA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5UeXBlRWxlbWVudERldmVsb3Blck5hbWUgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuVHlwZUVsZW1lbnRJZCA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5RGV2ZWxvcGVyTmFtZSA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5SWQgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuVmFsdWVFbGVtZW50SWQgPSBcIlwiO1xyXG4gICAgICAgIGlmIChmaWVsZCkge1xyXG4gICAgICAgICAgICB0aGlzLkNvbnRlbnRUeXBlID0gZUNvbnRlbnRUeXBlW2ZpZWxkLmNvbnRlbnRUeXBlXTtcclxuICAgICAgICAgICAgdGhpcy5EZXZlbG9wZXJOYW1lID0gZmllbGQuZGV2ZWxvcGVyTmFtZTtcclxuICAgICAgICAgICAgdGhpcy5UeXBlRWxlbWVudERldmVsb3Blck5hbWUgPSBmaWVsZC50eXBlRWxlbWVudERldmVsb3Blck5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnRJZCA9IGZpZWxkLnR5cGVFbGVtZW50SWQ7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWUgPSBmaWVsZC50eXBlRWxlbWVudFByb3BlcnR5RGV2ZWxvcGVyTmFtZTtcclxuICAgICAgICAgICAgdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5SWQgPSBmaWVsZC50eXBlRWxlbWVudFByb3BlcnR5SWQ7XHJcbiAgICAgICAgICAgIHRoaXMuVmFsdWVFbGVtZW50SWQgPSBmaWVsZC52YWx1ZUVsZW1lbnRJZDtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLkNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVDb250ZW50VHlwZS5Db250ZW50T2JqZWN0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuVmFsdWUgPSBmaWVsZC5vYmplY3REYXRhID8gbmV3IEZsb3dPYmplY3REYXRhXzEuRmxvd09iamVjdERhdGEoZmllbGQub2JqZWN0RGF0YSkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVDb250ZW50VHlwZS5Db250ZW50TGlzdDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlZhbHVlID0gZmllbGQub2JqZWN0RGF0YSAmJiBmaWVsZC5vYmplY3REYXRhWzBdID8gbmV3IEZsb3dPYmplY3REYXRhQXJyYXlfMS5GbG93T2JqZWN0RGF0YUFycmF5KGZpZWxkLm9iamVjdERhdGEpIDogbmV3IEZsb3dPYmplY3REYXRhQXJyYXlfMS5GbG93T2JqZWN0RGF0YUFycmF5KFtdKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5WYWx1ZSA9IGZpZWxkLmNvbnRlbnRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RmllbGQucHJvdG90eXBlLCBcImNvbnRlbnRUeXBlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQ29udGVudFR5cGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dGaWVsZC5wcm90b3R5cGUsIFwiZGV2ZWxvcGVyTmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dGaWVsZC5wcm90b3R5cGUsIFwidHlwZUVsZW1lbnREZXZlbG9wZXJOYW1lXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVHlwZUVsZW1lbnREZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RmllbGQucHJvdG90eXBlLCBcInR5cGVFbGVtZW50SWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5UeXBlRWxlbWVudElkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RmllbGQucHJvdG90eXBlLCBcInR5cGVFbGVtZW50UHJvcGVydHlEZXZlbG9wZXJOYW1lXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dGaWVsZC5wcm90b3R5cGUsIFwidHlwZUVsZW1lbnRQcm9wZXJ0eUlkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RmllbGQucHJvdG90eXBlLCBcInZhbHVlRWxlbWVudElkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVmFsdWVFbGVtZW50SWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dGaWVsZC5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5WYWx1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBGbG93RmllbGQucHJvdG90eXBlLmlGbG93RmllbGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNvbnRlbnRWYWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgdmFyIG9iamVjdERhdGEgPSBbXTtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuQ29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudE9iamVjdDpcclxuICAgICAgICAgICAgICAgIHZhciBvZCA9IHRoaXMuVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBvYmplY3REYXRhLnB1c2gob2QuaU9iamVjdERhdGEoKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudExpc3Q6XHJcbiAgICAgICAgICAgICAgICB2YXIgb2RhID0gdGhpcy5WYWx1ZTtcclxuICAgICAgICAgICAgICAgIG9iamVjdERhdGEgPSBvZGEuaUZsb3dPYmplY3REYXRhQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY29udGVudFZhbHVlID0gdGhpcy5WYWx1ZSA/IHRoaXMuVmFsdWUgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvdXRwdXQgPSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBlQ29udGVudFR5cGVbdGhpcy5Db250ZW50VHlwZV0sXHJcbiAgICAgICAgICAgIGNvbnRlbnRWYWx1ZTogY29udGVudFZhbHVlLFxyXG4gICAgICAgICAgICBkZXZlbG9wZXJOYW1lOiB0aGlzLkRldmVsb3Blck5hbWUsXHJcbiAgICAgICAgICAgIG9iamVjdERhdGE6IG9iamVjdERhdGEsXHJcbiAgICAgICAgICAgIHR5cGVFbGVtZW50RGV2ZWxvcGVyTmFtZTogdGhpcy5UeXBlRWxlbWVudERldmVsb3Blck5hbWUsXHJcbiAgICAgICAgICAgIHR5cGVFbGVtZW50SWQ6IHRoaXMuVHlwZUVsZW1lbnRJZCxcclxuICAgICAgICAgICAgdHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWU6IHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWUsXHJcbiAgICAgICAgICAgIHR5cGVFbGVtZW50UHJvcGVydHlJZDogdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5SWQsXHJcbiAgICAgICAgICAgIHZhbHVlRWxlbWVudElkOiB0aGlzLlZhbHVlRWxlbWVudElkLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmxvd0ZpZWxkO1xyXG59KCkpO1xyXG5leHBvcnRzLkZsb3dGaWVsZCA9IEZsb3dGaWVsZDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93T2JqZWN0RGF0YSA9IHZvaWQgMDtcclxudmFyIEZsb3dPYmplY3REYXRhUHJvcGVydHlfMSA9IHJlcXVpcmUoXCIuL0Zsb3dPYmplY3REYXRhUHJvcGVydHlcIik7XHJcbnZhciBGbG93T2JqZWN0RGF0YSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZsb3dPYmplY3REYXRhKGRhdGEpIHtcclxuICAgICAgICB0aGlzLkRldmVsb3Blck5hbWUgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuRXh0ZXJuYWxJZCA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5JbnRlcm5hbElkID0gXCJcIjtcclxuICAgICAgICB0aGlzLklzU2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLk9yZGVyID0gMDtcclxuICAgICAgICB0aGlzLlR5cGVFbGVtZW50SWQgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuUHJvcGVydGllcyA9IHt9O1xyXG4gICAgICAgIGlmIChkYXRhICYmIGRhdGFbMF0pIHtcclxuICAgICAgICAgICAgdmFyIG9iamVjdERhdGEgPSBkYXRhWzBdO1xyXG4gICAgICAgICAgICB0aGlzLkRldmVsb3Blck5hbWUgPSBvYmplY3REYXRhLmRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMuSW50ZXJuYWxJZCA9IG9iamVjdERhdGEuaW50ZXJuYWxJZDtcclxuICAgICAgICAgICAgdGhpcy5FeHRlcm5hbElkID0gb2JqZWN0RGF0YS5leHRlcm5hbElkO1xyXG4gICAgICAgICAgICB0aGlzLk9yZGVyID0gb2JqZWN0RGF0YS5vcmRlcjtcclxuICAgICAgICAgICAgdGhpcy5Jc1NlbGVjdGVkID0gb2JqZWN0RGF0YS5pc1NlbGVjdGVkO1xyXG4gICAgICAgICAgICB0aGlzLlR5cGVFbGVtZW50SWQgPSBvYmplY3REYXRhLnR5cGVFbGVtZW50SWQ7XHJcbiAgICAgICAgICAgIGlmIChvYmplY3REYXRhLnByb3BlcnRpZXMgJiYgb2JqZWN0RGF0YS5wcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBvYmplY3REYXRhLnByb3BlcnRpZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuUHJvcGVydGllc1twcm9wZXJ0eS5kZXZlbG9wZXJOYW1lXSA9IG5ldyBGbG93T2JqZWN0RGF0YVByb3BlcnR5XzEuRmxvd09iamVjdERhdGFQcm9wZXJ0eShwcm9wZXJ0eSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibnVsbCBkYXRhXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUsIFwiZGV2ZWxvcGVyTmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChkZXZlbG9wZXJOYW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuRGV2ZWxvcGVyTmFtZSA9IGRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPYmplY3REYXRhLnByb3RvdHlwZSwgXCJleHRlcm5hbElkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuRXh0ZXJuYWxJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGV4dGVybmFsSWQpIHtcclxuICAgICAgICAgICAgdGhpcy5FeHRlcm5hbElkID0gZXh0ZXJuYWxJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd09iamVjdERhdGEucHJvdG90eXBlLCBcImludGVybmFsSWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5JbnRlcm5hbElkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoaW50ZXJuYWxJZCkge1xyXG4gICAgICAgICAgICB0aGlzLkludGVybmFsSWQgPSBpbnRlcm5hbElkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUsIFwiaXNTZWxlY3RlZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLklzU2VsZWN0ZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpc1NlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuSXNTZWxlY3RlZCA9IGlzU2VsZWN0ZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPYmplY3REYXRhLnByb3RvdHlwZSwgXCJvcmRlclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLk9yZGVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAob3JkZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5PcmRlciA9IG9yZGVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUsIFwidHlwZUVsZW1lbnRJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlR5cGVFbGVtZW50SWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0eXBlRWxlbWVudElkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnRJZCA9IHR5cGVFbGVtZW50SWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPYmplY3REYXRhLnByb3RvdHlwZSwgXCJwcm9wZXJ0aWVzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuUHJvcGVydGllcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBGbG93T2JqZWN0RGF0YS5uZXdJbnN0YW5jZSA9IGZ1bmN0aW9uIChkZXZlbG9wZXJOYW1lKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgICAgIGRldmVsb3Blck5hbWU6IGRldmVsb3Blck5hbWUsXHJcbiAgICAgICAgICAgIGV4dGVybmFsSWQ6IFwiXCIsXHJcbiAgICAgICAgICAgIGludGVybmFsSWQ6IG1hbnl3aG8udXRpbHMuZ3VpZCgpLFxyXG4gICAgICAgICAgICBpc1NlbGVjdGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgb3JkZXI6IDAsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IFtdLFxyXG4gICAgICAgICAgICB0eXBlRWxlbWVudElkOiBcIlwiXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gbmV3IHRoaXMoW2RhdGFdKTtcclxuICAgIH07XHJcbiAgICBGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUuYWRkUHJvcGVydHkgPSBmdW5jdGlvbiAobmV3UHJvcGVydHkpIHtcclxuICAgICAgICB0aGlzLlByb3BlcnRpZXNbbmV3UHJvcGVydHkuZGV2ZWxvcGVyTmFtZV0gPSBuZXdQcm9wZXJ0eTtcclxuICAgIH07XHJcbiAgICBGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUucmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuUHJvcGVydGllc1trZXldO1xyXG4gICAgfTtcclxuICAgIEZsb3dPYmplY3REYXRhLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIChuZXdUeXBlTmFtZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGNsb25lID0gRmxvd09iamVjdERhdGEubmV3SW5zdGFuY2UobmV3VHlwZU5hbWUgfHwgdGhpcy5EZXZlbG9wZXJOYW1lKTtcclxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICB2YXIgbmV3UHJvcCA9IF90aGlzLnByb3BlcnRpZXNba2V5XS5jbG9uZSgpO1xyXG4gICAgICAgICAgICBjbG9uZS5wcm9wZXJ0aWVzW2tleV0gPSBuZXdQcm9wO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjbG9uZTtcclxuICAgIH07XHJcbiAgICBGbG93T2JqZWN0RGF0YS5wcm90b3R5cGUuaU9iamVjdERhdGEgPSBmdW5jdGlvbiAoc2VsZWN0ZWQpIHtcclxuICAgICAgICB2YXIgcHJvcHMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXModGhpcy5wcm9wZXJ0aWVzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGtleSA9IF9hW19pXTtcclxuICAgICAgICAgICAgcHJvcHMucHVzaCh0aGlzLnByb3BlcnRpZXNba2V5XS5pRmxvd09iamVjdERhdGFQcm9wZXJ0eSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9iamVjdERhdGEgPSB7XHJcbiAgICAgICAgICAgIGRldmVsb3Blck5hbWU6IHRoaXMuZGV2ZWxvcGVyTmFtZSxcclxuICAgICAgICAgICAgZXh0ZXJuYWxJZDogdGhpcy5leHRlcm5hbElkLFxyXG4gICAgICAgICAgICBpbnRlcm5hbElkOiB0aGlzLmludGVybmFsSWQsXHJcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IHNlbGVjdGVkIHx8IHRoaXMuaXNTZWxlY3RlZCxcclxuICAgICAgICAgICAgb3JkZXI6IHRoaXMub3JkZXIsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHByb3BzLFxyXG4gICAgICAgICAgICB0eXBlRWxlbWVudElkOiB0aGlzLlR5cGVFbGVtZW50SWRcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBvYmplY3REYXRhO1xyXG4gICAgfTtcclxuICAgIEZsb3dPYmplY3REYXRhLnByb3RvdHlwZS5pRmxvd09iamVjdERhdGFBcnJheSA9IGZ1bmN0aW9uIChzZWxlY3RlZCkge1xyXG4gICAgICAgIHZhciBvdXRwdXQgPSBbXTtcclxuICAgICAgICBvdXRwdXQucHVzaCh0aGlzLmlPYmplY3REYXRhKHNlbGVjdGVkKSk7XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmxvd09iamVjdERhdGE7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmxvd09iamVjdERhdGEgPSBGbG93T2JqZWN0RGF0YTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuRmxvd0Jhc2VDb21wb25lbnQgPSBleHBvcnRzLmVMb2FkaW5nU3RhdGUgPSB2b2lkIDA7XHJcbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcclxucmVxdWlyZShcIi4vRXZlbnRNYW5hZ2VyXCIpO1xyXG52YXIgRmxvd0F0dHJpYnV0ZV8xID0gcmVxdWlyZShcIi4vRmxvd0F0dHJpYnV0ZVwiKTtcclxudmFyIEZsb3dEaXNwbGF5Q29sdW1uXzEgPSByZXF1aXJlKFwiLi9GbG93RGlzcGxheUNvbHVtblwiKTtcclxudmFyIEZsb3dGaWVsZF8xID0gcmVxdWlyZShcIi4vRmxvd0ZpZWxkXCIpO1xyXG52YXIgRmxvd09iamVjdERhdGFfMSA9IHJlcXVpcmUoXCIuL0Zsb3dPYmplY3REYXRhXCIpO1xyXG52YXIgRmxvd09iamVjdERhdGFBcnJheV8xID0gcmVxdWlyZShcIi4vRmxvd09iamVjdERhdGFBcnJheVwiKTtcclxudmFyIEZsb3dPdXRjb21lXzEgPSByZXF1aXJlKFwiLi9GbG93T3V0Y29tZVwiKTtcclxudmFyIHRocm90dGxlID0gcmVxdWlyZSgnbG9kYXNoLnRocm90dGxlJyk7XHJcbnZhciBlTG9hZGluZ1N0YXRlO1xyXG4oZnVuY3Rpb24gKGVMb2FkaW5nU3RhdGUpIHtcclxuICAgIGVMb2FkaW5nU3RhdGVbZUxvYWRpbmdTdGF0ZVtcInJlYWR5XCJdID0gMF0gPSBcInJlYWR5XCI7XHJcbiAgICBlTG9hZGluZ1N0YXRlW2VMb2FkaW5nU3RhdGVbXCJsb2FkaW5nXCJdID0gMV0gPSBcImxvYWRpbmdcIjtcclxuICAgIGVMb2FkaW5nU3RhdGVbZUxvYWRpbmdTdGF0ZVtcInNhdmluZ1wiXSA9IDJdID0gXCJzYXZpbmdcIjtcclxuICAgIGVMb2FkaW5nU3RhdGVbZUxvYWRpbmdTdGF0ZVtcIm1vdmluZ1wiXSA9IDNdID0gXCJtb3ZpbmdcIjtcclxuICAgIGVMb2FkaW5nU3RhdGVbZUxvYWRpbmdTdGF0ZVtcImluaXRpdGlhbGl6aW5nXCJdID0gNF0gPSBcImluaXRpdGlhbGl6aW5nXCI7XHJcbiAgICBlTG9hZGluZ1N0YXRlW2VMb2FkaW5nU3RhdGVbXCJpbml0aXRpYWxpemVkXCJdID0gNV0gPSBcImluaXRpdGlhbGl6ZWRcIjtcclxuICAgIGVMb2FkaW5nU3RhdGVbZUxvYWRpbmdTdGF0ZVtcIm1vdW50aW5nXCJdID0gNl0gPSBcIm1vdW50aW5nXCI7XHJcbiAgICBlTG9hZGluZ1N0YXRlW2VMb2FkaW5nU3RhdGVbXCJtb3VudGVkXCJdID0gN10gPSBcIm1vdW50ZWRcIjtcclxufSkoZUxvYWRpbmdTdGF0ZSA9IGV4cG9ydHMuZUxvYWRpbmdTdGF0ZSB8fCAoZXhwb3J0cy5lTG9hZGluZ1N0YXRlID0ge30pKTtcclxuLy9leHBvcnQgdHlwZSBlTG9hZGluZ1N0YXRlID0gXCJyZWFkeVwiIHwgXCJsb2FkaW5nXCIgfCBcInNhdmluZ1wiIHwgXCJtb3ZpbmdcIiB8IFwiaW5pdGl0aWFsaXppbmdcIiB8IFwiaW5pdGl0aWFsaXplZFwiIHwgXCJtb3VudGluZ1wiIHwgXCJtb3VudGVkXCI7XHJcbnZhciBGbG93QmFzZUNvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhGbG93QmFzZUNvbXBvbmVudCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEZsb3dCYXNlQ29tcG9uZW50KHByb3BzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuRmllbGRzID0ge307XHJcbiAgICAgICAgX3RoaXMuQXR0cmlidXRlcyA9IHt9O1xyXG4gICAgICAgIF90aGlzLk91dGNvbWVzID0ge307XHJcbiAgICAgICAgLy9zZW5kcyBhIGNvbGxhYm9yYXRpb24gbWVzc2FnZSBidXQgbGltaXRlZCB0byAxIGNhbGwgZXZlcnkgMTAwbXNcclxuICAgICAgICBfdGhpcy5zZW5kQ29sbGFib3JhdGlvbk1lc3NhZ2UgPSB0aHJvdHRsZShfdGhpcy5fc2VuZENvbGxhYm9yYXRpb25NZXNzYWdlLCAxMDAsIG51bGwpO1xyXG4gICAgICAgIF90aGlzLkZpZWxkcyA9IHt9O1xyXG4gICAgICAgIF90aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUuaW5pdGl0aWFsaXppbmc7XHJcbiAgICAgICAgX3RoaXMubG9hZEFsbFZhbHVlcyA9IF90aGlzLmxvYWRBbGxWYWx1ZXMuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuZG9udExvYWRBbGxWYWx1ZXMgPSBfdGhpcy5kb250TG9hZEFsbFZhbHVlcy5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy51cGRhdGVWYWx1ZXMgPSBfdGhpcy51cGRhdGVWYWx1ZXMuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMudHJpZ2dlck91dGNvbWUgPSBfdGhpcy50cmlnZ2VyT3V0Y29tZS5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5Db21wb25lbnRJZCA9IF90aGlzLnByb3BzLmlkO1xyXG4gICAgICAgIF90aGlzLlBhcmVudElkID0gX3RoaXMucHJvcHMucGFyZW50SWQ7XHJcbiAgICAgICAgX3RoaXMuRmxvd0tleSA9IF90aGlzLnByb3BzLmZsb3dLZXk7XHJcbiAgICAgICAgX3RoaXMuQXR0cmlidXRlcyA9IHt9O1xyXG4gICAgICAgIF90aGlzLmxvYWRNb2RlbCA9IF90aGlzLmxvYWRNb2RlbC5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5sb2FkQXR0cmlidXRlcyA9IF90aGlzLmxvYWRBdHRyaWJ1dGVzLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLmxvYWRPdXRjb21lcyA9IF90aGlzLmxvYWRPdXRjb21lcy5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5yZWNlaXZlTWVzc2FnZSA9IF90aGlzLnJlY2VpdmVNZXNzYWdlLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLmdldFN0YXRlVmFsdWUgPSBfdGhpcy5nZXRTdGF0ZVZhbHVlLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLnNldFN0YXRlVmFsdWUgPSBfdGhpcy5zZXRTdGF0ZVZhbHVlLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLmdldFN0YXRlVmFsdWVUeXBlID0gX3RoaXMuZ2V0U3RhdGVWYWx1ZVR5cGUuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuc2VuZENvbGxhYm9yYXRpb25NZXNzYWdlID0gX3RoaXMuc2VuZENvbGxhYm9yYXRpb25NZXNzYWdlLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLm9uQmVmb3JlU2VuZCA9IF90aGlzLm9uQmVmb3JlU2VuZC5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5vbkRvbmUgPSBfdGhpcy5vbkRvbmUuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuY2FsY3VsYXRlVmFsdWUgPSBfdGhpcy5jYWxjdWxhdGVWYWx1ZS5iaW5kKF90aGlzKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIF90aGlzLnJlY2VpdmVNZXNzYWdlLCBmYWxzZSk7XHJcbiAgICAgICAgX3RoaXMubG9hZE1vZGVsKCk7XHJcbiAgICAgICAgX3RoaXMubG9hZEF0dHJpYnV0ZXMoKTtcclxuICAgICAgICBfdGhpcy5sb2FkT3V0Y29tZXMoKTtcclxuICAgICAgICB2YXIgYmFzZVVybCA9IFwiXCI7XHJcbiAgICAgICAgaWYgKCghbWFueXdoby5zZXR0aW5ncy5nbG9iYWwoJ3BsYXRmb3JtLnVyaScpKSAmJiAobWFueXdoby5zZXR0aW5ncy5nbG9iYWwoJ3BsYXRmb3JtLnVyaScpLmxlbmd0aCA8PSAwKSkge1xyXG4gICAgICAgICAgICBiYXNlVXJsID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbiB8fCAnaHR0cHM6Ly9mbG93Lm1hbnl3aG8uY29tJztcclxuICAgICAgICB9XHJcbiAgICAgICAgX3RoaXMuU3RhdGVJZCA9IG1hbnl3aG8udXRpbHMuZXh0cmFjdFN0YXRlSWQoX3RoaXMucHJvcHMuZmxvd0tleSk7XHJcbiAgICAgICAgX3RoaXMuVGVuYW50SWQgPSBtYW55d2hvLnV0aWxzLmV4dHJhY3RUZW5hbnRJZChfdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICBfdGhpcy5pbnZva2V1cmwgPSBiYXNlVXJsICsgXCIvYXBpL3J1bi8xL3N0YXRlL1wiICsgX3RoaXMuU3RhdGVJZDtcclxuICAgICAgICBfdGhpcy51cmwgPSBiYXNlVXJsICsgXCIvYXBpL3J1bi8xL3N0YXRlL1wiICsgX3RoaXMuU3RhdGVJZCArIFwiL3ZhbHVlc1wiO1xyXG4gICAgICAgIF90aGlzLnVzZXJ1cmwgPSBiYXNlVXJsICsgXCIvYXBpL3J1bi8xL3N0YXRlL1wiICsgX3RoaXMuU3RhdGVJZCArIFwiL3ZhbHVlcy8wM2RjNDFkZC0xYzZiLTRiMzMtYmY2MS1jYmQxZDA3NzhmZmZcIjtcclxuICAgICAgICBfdGhpcy52YWx1ZXVybCA9IGJhc2VVcmwgKyBcIi9hcGkvcnVuLzEvc3RhdGUvXCIgKyBfdGhpcy5TdGF0ZUlkICsgXCIvdmFsdWVzL25hbWVcIjtcclxuICAgICAgICBfdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLmluaXRpdGlhbGl6ZWQ7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJ0ZW5hbnRJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlRlbmFudElkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwic3RhdGVJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlN0YXRlSWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJmbG93S2V5XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuRmxvd0tleTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcImNvbXBvbmVudElkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQ29tcG9uZW50SWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJwYXJlbnRJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlBhcmVudElkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiaXNSZWFkeVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLkxvYWRpbmdTdGF0ZSA9PT0gZUxvYWRpbmdTdGF0ZS5yZWFkeSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcImxvYWRpbmdTdGF0ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkxvYWRpbmdTdGF0ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcIm91dGNvbWVzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuT3V0Y29tZXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyaWJ1dGVzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQXR0cmlidXRlcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcImZpZWxkc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkZpZWxkcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcIm1vZGVsXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuTW9kZWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJ1c2VyXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVXNlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcImpvaW5VUklcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWY7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJpc0Rlc2lnblRpbWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Jc0Rlc2lnblRpbWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJhdXRoZW50aWNhdGlvblRva2VuXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZmxvd1VzZXIpLmF1dGhlbnRpY2F0aW9uVG9rZW47XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lLCBkZWZhdWx0VmFsdWUpIHtcclxuICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0udmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlIHx8ICcnO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUub25CZWZvcmVTZW5kID0gZnVuY3Rpb24gKHhociwgcmVxdWVzdCkge1xyXG4gICAgICAgIGlmIChyZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgIHZhciBvYyA9IHRoaXMuZ2V0T3V0Y29tZUJ5SWQocmVxdWVzdC5tYXBFbGVtZW50SW52b2tlUmVxdWVzdC5zZWxlY3RlZE91dGNvbWVJZCk7XHJcbiAgICAgICAgICAgIHZhciBvY3QgPSBtYW55d2hvLmV2ZW50TWFuYWdlci5vdXRjb21lQmVpbmdUcmlnZ2VyZWQ7XHJcbiAgICAgICAgICAgIGlmIChvYykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvY3QgfHwgb2N0LmlkICE9PSBvYy5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLm91dGNvbWVCZWluZ1RyaWdnZXJlZCA9IG9jO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5vdXRjb21lQmVpbmdUcmlnZ2VyZWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIHRoaXMgdGFrZXMgYSBzdHJpbmcgY29udGFpbmluZyBlaXRoZXIgYSBsaXRlcmFsIHZhbHVlIG9yIHRoZSBuYW1lIG9mIGEgZmllbGQgc3Vycm91bmRlZCB3aXRoIHt7Li59fVxyXG4gICAgLy8gaWYgaXQncyBsaXRlcmFsIGl0IGp1c3QgcmV0dXJucyBvdGhlcndpc2UgaXQgZ2V0cyB0aGUgdmFsdWUuXHJcbiAgICAvLyBpdCBjYW4gZ28gZG93biBsZXZlbHMgbGlrZSB2YWwuYXR0cmlidXRlLnN1YnZhbCBldGNcclxuICAgIC8vIE5PVEU6IHRoZXJlJ3MgYSBnb29kIGNoYW5jZSB0aW1pbmcgd2lzZSB0aGF0IHRoZXJlIGFyZSBubyBmaWVsZHMgeWV0XHJcbiAgICAvLyBzbyB3ZSBqdXN0IHJldHVybiB2YWx1ZSBpZiBhbnkgZXJyb3JzIGFyZSBlbmNvdW50ZXJlZCBsaWtlIHZhbCA9PT0gbnVsbFxyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmNhbGN1bGF0ZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgLy8gaXMgaXQgcmVwbGFjZWFibGU/ICBzdGFydHMgYW5kIGVuZHMgd2l0aCB7e319XHJcbiAgICAgICAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoJ3t7JykgJiYgdmFsdWUuZW5kc1dpdGgoJ319JykpIHtcclxuICAgICAgICAgICAgLy8gdmFsdWUgcG9pbnRzIHRvIGEgZmllbGQsIGdldCBpdCdzIHZhbHVlXHJcbiAgICAgICAgICAgIHZhciBzdHJpcHBlZCA9IHZhbHVlLnJlcGxhY2UoJ3t7JywgJycpO1xyXG4gICAgICAgICAgICBzdHJpcHBlZCA9IHN0cmlwcGVkLnJlcGxhY2UoJ319JywgJycpO1xyXG4gICAgICAgICAgICB2YXIgdmFsID0gdm9pZCAwO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XHJcbiAgICAgICAgICAgIC8vIGl0IGNvdWxkIGJlIGEgc3ViIGZpZWxkIHdpdGggcGFyZW50LmNoaWxkXHJcbiAgICAgICAgICAgIHZhciBzdHJpcHBlZEJpdHMgPSBzdHJpcHBlZC5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAvLyBsb29wIG92ZXIgYml0c1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwb3MgPSAwOyBwb3MgPCBzdHJpcHBlZEJpdHMubGVuZ3RoOyBwb3MrKykge1xyXG4gICAgICAgICAgICAgICAgLy8gcG9zIDAgd2lsbCBzZXQgdmFsIGZvciBhbnkgY2hpbGQgZWxlbWVudHNcclxuICAgICAgICAgICAgICAgIGlmIChwb3MgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2lmKCF0aGlzLmZpZWxkc1tzdHJpcHBlZEJpdHNbcG9zXV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICBhd2FpdCB0aGlzLmxvYWRWYWx1ZShzdHJpcHBlZEJpdHNbcG9zXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gdGhpcy5maWVsZHNbc3RyaXBwZWRCaXRzW3Bvc11dO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUaGUgVmFsdWUgWycgKyBzdHJpcHBlZEJpdHNbcG9zXSArICddIHdhcyBub3QgZm91bmQsIGhhdmUgeW91IGluY2x1ZGVkIGl0IGluIHlvdXIgZmxvdycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWwuQ29udGVudFR5cGUgIT09IEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50T2JqZWN0ICYmIHZhbC5Db250ZW50VHlwZSAhPT0gRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB2YWwudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBkaWQgYml0cyAwIGdldCBhIHZhbD9cclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGUgPSB2YWwudmFsdWUucHJvcGVydGllc1tzdHJpcHBlZEJpdHNbcG9zXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGUuY29udGVudFR5cGUgPT09IEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50T2JqZWN0IHx8IGVsZS5jb250ZW50VHlwZSA9PT0gRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gdmFsLnZhbHVlLnByb3BlcnRpZXNbc3RyaXBwZWRCaXRzW3Bvc11dLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsLnZhbHVlLnByb3BlcnRpZXNbc3RyaXBwZWRCaXRzW3Bvc11dLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUub25Eb25lID0gZnVuY3Rpb24gKHhociwgcmVxdWVzdCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG91dGNvbWVfMTtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoeGhyLmludm9rZVR5cGUgPT09ICdGT1JXQVJEJykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLm1vZGVsLnBhcnNlRW5naW5lUmVzcG9uc2UoeGhyLCB0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRNb2RlbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRBdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZE91dGNvbWVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucHJlc2VydmVTdGF0ZSgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hbnl3aG8uZXZlbnRNYW5hZ2VyLm91dGNvbWVCZWluZ1RyaWdnZXJlZCAmJiBtYW55d2hvLmV2ZW50TWFuYWdlci5vdXRjb21lQmVpbmdUcmlnZ2VyZWQuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0Y29tZV8xID0gbWFueXdoby5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMobWFueXdoby5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyLCB0YXJnZXRVcmwsIF9hLCB1cmwsIHduZCwgdXJsLCB3bmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ciA9IG1hbnl3aG8uZXZlbnRNYW5hZ2VyLm91dGNvbWVCZWluZ1RyaWdnZXJlZC5hdHRyaWJ1dGVzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBhdHRyLm5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhdXRvY2xvc2VcIjogcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhdXRvb3BlblwiOiByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImF1dG9uYXZcIjogcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhdXRvbW92ZVwiOiByZXR1cm4gWzMgLypicmVhayovLCA2XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImF1dG9wcmludFwiOiByZXR1cm4gWzMgLypicmVhayovLCAxMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDExXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ci52YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBcInRydWVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMTFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFVybCA9IG91dGNvbWVfMS5hdHRyaWJ1dGVzLkF1dG9PcGVuVXJsIHx8IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0YXJnZXRVcmwgJiYgdGFyZ2V0VXJsLnZhbHVlLmxlbmd0aCA+IDApKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNhbGN1bGF0ZVZhbHVlKHRhcmdldFVybC52YWx1ZSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3bmQgPSB3aW5kb3cub3Blbih1cmwsIFwiX2JsYW5rXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiTm8gJ0F1dG9PcGVuVXJsJyBzcGVjaWZpZWQgaW4gdGhlIG91dGNvbWUncyBhdHRyaWJ1dGVzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFszIC8qYnJlYWsqLywgMTFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFVybCA9IG91dGNvbWVfMS5hdHRyaWJ1dGVzLkF1dG9OYXZVcmwgfHwgdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRhcmdldFVybCAmJiB0YXJnZXRVcmwudmFsdWUubGVuZ3RoID4gMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY2FsY3VsYXRlVmFsdWUodGFyZ2V0VXJsLnZhbHVlKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHduZCA9IHdpbmRvdy5vcGVuKHVybCwgXCJfYmxhbmtcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJObyAnQXV0b05hdlVybCcgc3BlY2lmaWVkIGluIHRoZSBvdXRjb21lJ3MgYXR0cmlidXRlc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDk6IHJldHVybiBbMyAvKmJyZWFrKi8sIDExXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnByaW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMTFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90dXJuIG9mIG1vdmluZyBmbGFnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5yZWFkeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5tb3VudGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGQgb3V0Y29tZSBtYW5hZ2VyIHN0dWZmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmFkZERvbmVMaXN0ZW5lcih0aGlzLm9uRG9uZSwgdGhpcy5jb21wb25lbnRJZCArIFwiX2NvcmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmFkZEJlZm9yZVNlbmRMaXN0ZW5lcih0aGlzLm9uQmVmb3JlU2VuZCwgdGhpcy5jb21wb25lbnRJZCArIFwiX2NvcmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByZXNlcnZlIHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucHJlc2VydmVTdGF0ZSgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByZXNlcnZlIHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLm1vdW50ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hbnl3aG8udXRpbHMucmVtb3ZlTG9hZGluZ0luZGljYXRvcignbG9hZGVyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5wcmVzZXJ2ZVN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLm1vdW50aW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnNldFN0YXRlVmFsdWUodGhpcy5nZXRTdGF0ZVZhbHVlKCkpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmxvd01vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5Db21wb25lbnRJZCwgdGhpcy5GbG93S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmxvd1N0YXRlID0gbWFueXdoby5zdGF0ZS5nZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgdGhpcy5mbG93S2V5KSB8fCB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZmxvd01vZGVsKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZmxvd01vZGVsLmNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQ29udGVudE9iamVjdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvYmplY3REYXRhOiBhbnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmbG93U3RhdGUub2JqZWN0RGF0YSAmJiBmbG93U3RhdGUub2JqZWN0RGF0YVswXSAmJiBmbG93U3RhdGUub2JqZWN0RGF0YVswXS5wcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdERhdGEgPSBmbG93U3RhdGUub2JqZWN0RGF0YVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdERhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iamVjdERhdGEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvZDogRmxvd09iamVjdERhdGEgID0gbmV3IEZsb3dPYmplY3REYXRhKFtvYmplY3REYXRhXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldFN0YXRlVmFsdWUob2QsdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmKGZsb3dNb2RlbC5vYmplY3REYXRhICYmIGZsb3dNb2RlbC5vYmplY3REYXRhWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBvYmplY3REYXRhID0gZmxvd01vZGVsLm9iamVjdERhdGFbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLm1vdW50ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9vYmplY3REYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmplY3REYXRhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbGV0IG9kOiBGbG93T2JqZWN0RGF0YSAgPSBuZXcgRmxvd09iamVjdERhdGEoW29iamVjdERhdGFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hd2FpdCB0aGlzLnNldFN0YXRlVmFsdWUob2QsdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQ29udGVudExpc3QnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlzdERhdGE6IGFueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZsb3dTdGF0ZS5vYmplY3REYXRhICYmIGZsb3dTdGF0ZS5vYmplY3REYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3REYXRhID0gZmxvd1N0YXRlLm9iamVjdERhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0RGF0YSA9IGZsb3dNb2RlbC5vYmplY3REYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdERhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGxpc3REYXRhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0U3RhdGVWYWx1ZShuZXcgRmxvd09iamVjdERhdGFBcnJheShsaXN0RGF0YSksdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldFN0YXRlVmFsdWUoZmxvd01vZGVsLmNvbnRlbnRWYWx1ZSx0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLm1vdW50ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgbWFueXdoby5ldmVudE1hbmFnZXIucmVtb3ZlQmVmb3JlU2VuZExpc3RlbmVyKHRoaXMuY29tcG9uZW50SWQgKyBcIl9jb3JlXCIpO1xyXG4gICAgICAgICAgICAgICAgbWFueXdoby5ldmVudE1hbmFnZXIucmVtb3ZlRG9uZUxpc3RlbmVyKHRoaXMuY29tcG9uZW50SWQgKyBcIl9jb3JlXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmxvYWRPdXRjb21lID0gZnVuY3Rpb24gKG91dGNvbWVJZCkge1xyXG4gICAgICAgIGlmIChvdXRjb21lSWQpIHtcclxuICAgICAgICAgICAgdmFyIG91dGNvbWUgPSBtYW55d2hvLm1vZGVsLmdldE91dGNvbWUob3V0Y29tZUlkLCB0aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICBpZiAob3V0Y29tZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5PdXRjb21lc1tvdXRjb21lLmRldmVsb3Blck5hbWVdID0gbmV3IEZsb3dPdXRjb21lXzEuRmxvd091dGNvbWUob3V0Y29tZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5PdXRjb21lc1tvdXRjb21lLmRldmVsb3Blck5hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5sb2FkT3V0Y29tZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5PdXRjb21lcyA9IHt9O1xyXG4gICAgICAgIC8vIGFkZCB0aGUgb3V0Y29tZXMgZnJvbSB0aGlzIGNvbXBvbmVudFxyXG4gICAgICAgIHZhciBvdXRzID0gbWFueXdoby5tb2RlbC5nZXRPdXRjb21lcyh0aGlzLnByb3BzLmlkLCB0aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgb3V0c18xID0gb3V0czsgX2kgPCBvdXRzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBvdXRjb21lID0gb3V0c18xW19pXTtcclxuICAgICAgICAgICAgdGhpcy5PdXRjb21lc1tvdXRjb21lLmRldmVsb3Blck5hbWVdID0gbmV3IEZsb3dPdXRjb21lXzEuRmxvd091dGNvbWUob3V0Y29tZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFuZCB0aGUgb25lcyBmcm9tIHRoZSBwYXJlbnQgcGFnZVxyXG4gICAgICAgIG91dHMgPSBtYW55d2hvLm1vZGVsLmdldE91dGNvbWVzKCcnLCB0aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgIGZvciAodmFyIF9hID0gMCwgb3V0c18yID0gb3V0czsgX2EgPCBvdXRzXzIubGVuZ3RoOyBfYSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBvdXRjb21lID0gb3V0c18yW19hXTtcclxuICAgICAgICAgICAgdGhpcy5PdXRjb21lc1tvdXRjb21lLmRldmVsb3Blck5hbWVdID0gbmV3IEZsb3dPdXRjb21lXzEuRmxvd091dGNvbWUob3V0Y29tZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5nZXRPdXRjb21lQnlJZCA9IGZ1bmN0aW9uIChvdXRjb21lSWQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBvYztcclxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLm91dGNvbWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLm91dGNvbWVzW2tleV0uaWQgPT09IG91dGNvbWVJZCkge1xyXG4gICAgICAgICAgICAgICAgb2MgPSBfdGhpcy5vdXRjb21lc1trZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKCFvYykge1xyXG4gICAgICAgICAgICBvYyA9IHRoaXMubG9hZE91dGNvbWUob3V0Y29tZUlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9jO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5sb2FkQXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLkNvbXBvbmVudElkLCB0aGlzLkZsb3dLZXkpO1xyXG4gICAgICAgIGlmIChtb2RlbCkge1xyXG4gICAgICAgICAgICAvLyBhZGQgdGhlIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgdmFyIGF0dHJzID0gbW9kZWwuYXR0cmlidXRlcztcclxuICAgICAgICAgICAgaWYgKGF0dHJzKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXMoYXR0cnMpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5BdHRyaWJ1dGVzW2tleV0gPSBuZXcgRmxvd0F0dHJpYnV0ZV8xLkZsb3dBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUubG9hZE1vZGVsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBtb2RlbCA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KHRoaXMuQ29tcG9uZW50SWQsIHRoaXMuRmxvd0tleSk7XHJcbiAgICAgICAgaWYgKG1vZGVsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuTW9kZWwgPSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogbW9kZWwuY29udGVudFR5cGUsXHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBtb2RlbC5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgZGF0YVNvdXJjZTogbmV3IEZsb3dPYmplY3REYXRhQXJyYXlfMS5GbG93T2JqZWN0RGF0YUFycmF5KFtdKSxcclxuICAgICAgICAgICAgICAgIGRldmVsb3Blck5hbWU6IG1vZGVsLmRldmVsb3Blck5hbWUsXHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5Q29sdW1uczogW10sXHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBtb2RlbC5pc0VuYWJsZWQsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IG1vZGVsLmhlaWdodCxcclxuICAgICAgICAgICAgICAgIGhlbHBJbmZvOiBtb2RlbC5oZWxwSW5mbyxcclxuICAgICAgICAgICAgICAgIGhpbnRJbmZvOiBtb2RlbC5oaW50VmFsdWUsXHJcbiAgICAgICAgICAgICAgICBqb2luVXJpOiB0aGlzLmpvaW5VUkksXHJcbiAgICAgICAgICAgICAgICBsYWJlbDogbW9kZWwubGFiZWwsXHJcbiAgICAgICAgICAgICAgICBtYXhTaXplOiBtb2RlbC5tYXhTaXplLFxyXG4gICAgICAgICAgICAgICAgbXVsdGlTZWxlY3Q6IG1vZGVsLmlzTXVsdGlTZWxlY3QsXHJcbiAgICAgICAgICAgICAgICByZWFkT25seTogIW1vZGVsLmlzRWRpdGFibGUsXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogbW9kZWwuaXNSZXF1aXJlZCxcclxuICAgICAgICAgICAgICAgIHNpemU6IG1vZGVsLnNpemUsXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uTWVzc2FnZTogbW9kZWwudmFsaWRhdGlvbk1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiBtb2RlbC5pc1Zpc2libGUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogbW9kZWwud2lkdGgsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vIGdldCB0aGUgZGF0YXNvdXJjZSB2YWx1ZSBuYW1lXHJcbiAgICAgICAgICAgIHZhciBkcyA9IG1vZGVsLm9iamVjdERhdGE7XHJcbiAgICAgICAgICAgIGlmIChkcykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBkc18xID0gZHM7IF9pIDwgZHNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2QgPSBkc18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLk1vZGVsLmRhdGFTb3VyY2UuYWRkSXRlbShuZXcgRmxvd09iamVjdERhdGFfMS5GbG93T2JqZWN0RGF0YShbb2RdKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGNvbHMgPSBtb2RlbC5jb2x1bW5zO1xyXG4gICAgICAgICAgICBpZiAoY29scykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBjb2xzXzEgPSBjb2xzOyBfYSA8IGNvbHNfMS5sZW5ndGg7IF9hKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29sID0gY29sc18xW19hXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLk1vZGVsLmRpc3BsYXlDb2x1bW5zLnB1c2gobmV3IEZsb3dEaXNwbGF5Q29sdW1uXzEuRmxvd0Rpc3BsYXlDb2x1bW4oY29sKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmxvYWRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZU5hbWUpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLmxvYWRpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY2FsbFJlcXVlc3RPbGQodGhpcy52YWx1ZXVybCArIFwiL1wiICsgdmFsdWVOYW1lLCAnR0VUJywge30pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuRmllbGRzW3ZhbHVlLmRldmVsb3Blck5hbWVdID0gbmV3IEZsb3dGaWVsZF8xLkZsb3dGaWVsZCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLnJlYWR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy5GaWVsZHNbdmFsdWUuZGV2ZWxvcGVyTmFtZV1dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUuZ2V0UmVzdWx0Qm9keVRleHQgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZXNwb25zZS50ZXh0KClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHQuc3RhcnRzV2l0aChcIlxcXCJcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cigxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dC5lbmRzV2l0aChcIlxcXCJcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cigwLCB0ZXh0Lmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmNhbGxSZXF1ZXN0ID0gZnVuY3Rpb24gKHVybCwgbWV0aG9kLCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0cywgcmVxdWVzdDtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QubWV0aG9kID0gbWV0aG9kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiB0aGlzLmF1dGhlbnRpY2F0aW9uVG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIk1hbnlXaG9UZW5hbnRcIjogdGhpcy50ZW5hbnRJZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmNyZWRlbnRpYWxzID0gXCJzYW1lLW9yaWdpblwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWV0aG9kID09PSBcIlBPU1RcIiB8fCBtZXRob2QgPT09IFwiUFVUXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuYm9keSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZmV0Y2godXJsLCByZXF1ZXN0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqc29uLCBlcnJvclRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmdldFJlc3VsdEJvZHlUZXh0KHJlc3BvbnNlKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU09OLnBhcnNlKGpzb24pLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTG9hZGVkIFZhbHVlc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzdWx0c107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZ2V0UmVzdWx0Qm9keVRleHQocmVzcG9uc2UpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvclRleHQgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDYW4ndCBsb2FkIHZhbHVlcyAtIFwiICsgZXJyb3JUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzdWx0c107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmNhbGxSZXF1ZXN0T2xkID0gZnVuY3Rpb24gKHVybCwgbWV0aG9kLCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgb3V0cHV0LCB4aHI7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIG1hbnl3aG8uY29ubmVjdGlvbi5yZXF1ZXN0KHRoaXMsIG51bGwsIHVybCwgbWV0aG9kLCB0aGlzLlRlbmFudElkLCB0aGlzLlN0YXRlSWQsIG1hbnl3aG8uc3RhdGUuZ2V0QXV0aGVudGljYXRpb25Ub2tlbih0aGlzLkZsb3dLZXkpLCBkYXRhKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB4aHJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUubG9hZEFsbFZhbHVlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZXMsIHVzZXJ2YWwsIHUsIHByb3BzO1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUubG9hZGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5GaWVsZHMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jYWxsUmVxdWVzdE9sZCh0aGlzLnVybCwgJ0dFVCcsIHt9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh2YWx1ZXMgfHwgW10pLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLkZpZWxkc1t2YWx1ZS5kZXZlbG9wZXJOYW1lXSA9IG5ldyBGbG93RmllbGRfMS5GbG93RmllbGQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jYWxsUmVxdWVzdE9sZCh0aGlzLnVzZXJ1cmwsICdHRVQnLCB7fSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcnZhbCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tYW55d2hvLmNvbm5lY3Rpb24ucmVxdWVzdCh0aGlzLCBcIlwiLCB0aGlzLnVzZXJ1cmwgLCAnR0VUJywgdGhpcy5UZW5hbnRJZCwgdGhpcy5TdGF0ZUlkLCBtYW55d2hvLnN0YXRlLmdldEF1dGhlbnRpY2F0aW9uVG9rZW4odGhpcy5GbG93S2V5KSwge30pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlcnZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IG5ldyBGbG93RmllbGRfMS5GbG93RmllbGQodXNlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcyA9IHUudmFsdWUucHJvcGVydGllcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuVXNlciA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RvcnlJZDogcHJvcHNbJ0RpcmVjdG9yeSBJZCddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdG9yeU5hbWU6IHByb3BzWydEaXJlY3RvcnkgTmFtZSddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBwcm9wc1snRW1haWwnXS52YWx1ZSB8fCAnbWFyaycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROYW1lOiBwcm9wc1snRmlyc3QgTmFtZSddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwSWQ6IHByb3BzWydQcmltYXJ5IEdyb3VwIElkJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBOYW1lOiBwcm9wc1snUHJpbWFyeSBHcm91cCBOYW1lJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHByb3BzWydVc2VyIElEJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXBBZGRyZXNzOiBwcm9wc1snSVAgQWRkcmVzcyddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlOiBwcm9wc1snTGFuZ3VhZ2UnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0TmFtZTogcHJvcHNbJ0xhc3QgTmFtZSddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBwcm9wc1snTG9jYXRpb24nXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlSWQ6IHByb3BzWydSb2xlIElkJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZU5hbWU6IHByb3BzWydSb2xlIE5hbWUnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHByb3BzWydTdGF0dXMnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyTmFtZTogcHJvcHNbJ1VzZXJuYW1lJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5yZWFkeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmRvbnRMb2FkQWxsVmFsdWVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHVzZXJ2YWwsIHUsIHByb3BzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUubG9hZGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jYWxsUmVxdWVzdE9sZCh0aGlzLnVzZXJ1cmwsICdHRVQnLCB7fSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcnZhbCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tYW55d2hvLmNvbm5lY3Rpb24ucmVxdWVzdCh0aGlzLCBcIlwiLCB0aGlzLnVzZXJ1cmwgLCAnR0VUJywgdGhpcy5UZW5hbnRJZCwgdGhpcy5TdGF0ZUlkLCBtYW55d2hvLnN0YXRlLmdldEF1dGhlbnRpY2F0aW9uVG9rZW4odGhpcy5GbG93S2V5KSwge30pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlcnZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IG5ldyBGbG93RmllbGRfMS5GbG93RmllbGQodXNlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcyA9IHUudmFsdWUucHJvcGVydGllcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuVXNlciA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RvcnlJZDogcHJvcHNbJ0RpcmVjdG9yeSBJZCddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdG9yeU5hbWU6IHByb3BzWydEaXJlY3RvcnkgTmFtZSddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBwcm9wc1snRW1haWwnXS52YWx1ZSB8fCAnbWFyaycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROYW1lOiBwcm9wc1snRmlyc3QgTmFtZSddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwSWQ6IHByb3BzWydQcmltYXJ5IEdyb3VwIElkJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBOYW1lOiBwcm9wc1snUHJpbWFyeSBHcm91cCBOYW1lJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHByb3BzWydVc2VyIElEJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXBBZGRyZXNzOiBwcm9wc1snSVAgQWRkcmVzcyddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlOiBwcm9wc1snTGFuZ3VhZ2UnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0TmFtZTogcHJvcHNbJ0xhc3QgTmFtZSddLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBwcm9wc1snTG9jYXRpb24nXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlSWQ6IHByb3BzWydSb2xlIElkJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZU5hbWU6IHByb3BzWydSb2xlIE5hbWUnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHByb3BzWydTdGF0dXMnXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyTmFtZTogcHJvcHNbJ1VzZXJuYW1lJ10udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5yZWFkeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmdldFN0YXRlVmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGZsb3dTdGF0ZSA9IG1hbnl3aG8uc3RhdGUuZ2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsIHRoaXMuZmxvd0tleSkgfHwge307XHJcbiAgICAgICAgdmFyIGZsb3dNb2RlbCA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KHRoaXMuQ29tcG9uZW50SWQsIHRoaXMuRmxvd0tleSk7XHJcbiAgICAgICAgaWYgKGZsb3dNb2RlbCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGZsb3dNb2RlbC5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQ29udGVudE9iamVjdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsb3dTdGF0ZS5vYmplY3REYXRhICYmIGZsb3dTdGF0ZS5vYmplY3REYXRhWzBdICYmIGZsb3dTdGF0ZS5vYmplY3REYXRhWzBdLnByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZsb3dPYmplY3REYXRhXzEuRmxvd09iamVjdERhdGEoW2Zsb3dTdGF0ZS5vYmplY3REYXRhWzBdXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRNb2RlbEl0ZW1zID0gdGhpcy5tb2RlbC5kYXRhU291cmNlLmdldFNlbGVjdGVkSXRlbXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkTW9kZWxJdGVtcy5pdGVtcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRNb2RlbEl0ZW1zLml0ZW1zWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ0NvbnRlbnRMaXN0JzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmxvd1N0YXRlLm9iamVjdERhdGEgJiYgZmxvd1N0YXRlLm9iamVjdERhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZsb3dPYmplY3REYXRhQXJyYXlfMS5GbG93T2JqZWN0RGF0YUFycmF5KGZsb3dTdGF0ZS5vYmplY3REYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZE1vZGVsSXRlbXMgPSB0aGlzLm1vZGVsLmRhdGFTb3VyY2UuZ2V0U2VsZWN0ZWRJdGVtcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRNb2RlbEl0ZW1zLml0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZE1vZGVsSXRlbXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmxvd1N0YXRlLmNvbnRlbnRWYWx1ZSA/IGZsb3dTdGF0ZS5jb250ZW50VmFsdWUgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUuZ2V0U3RhdGVWYWx1ZVR5cGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGZsb3dNb2RlbCA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KHRoaXMuQ29tcG9uZW50SWQsIHRoaXMuRmxvd0tleSk7XHJcbiAgICAgICAgdmFyIGN0ID0gZmxvd01vZGVsLmNvbnRlbnRUeXBlO1xyXG4gICAgICAgIHJldHVybiBGbG93RmllbGRfMS5lQ29udGVudFR5cGVbY3RdO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS5zZXRTdGF0ZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBpZ25vcmVTdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG9sZFN0YXRlLCBmbG93TW9kZWwsIGZsb3dTdGF0ZSwgbmV3U3RhdGUsIG9iamVjdERhdGEsIG9iamVjdERhdGFBcnJheTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuTG9hZGluZ1N0YXRlID09PSBlTG9hZGluZ1N0YXRlLm1vdW50aW5nIHx8IHRoaXMuTG9hZGluZ1N0YXRlID09PSBlTG9hZGluZ1N0YXRlLnJlYWR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2xkU3RhdGUgPSB0aGlzLmxvYWRpbmdTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUuc2F2aW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGZsb3dNb2RlbCA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KHRoaXMuQ29tcG9uZW50SWQsIHRoaXMuRmxvd0tleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZmxvd1N0YXRlID0gbWFueXdoby5zdGF0ZS5nZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgdGhpcy5mbG93S2V5KSB8fCB7fTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmxvd01vZGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZmxvd01vZGVsLmNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdDb250ZW50T2JqZWN0JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuaXNTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdERhdGEgPSB2YWx1ZS5pRmxvd09iamVjdERhdGFBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmplY3REYXRhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlID0geyBcIm9iamVjdERhdGFcIjogb2JqZWN0RGF0YSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbmV3U3RhdGUgPSB7IG9iamVjdERhdGEgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCBuZXdTdGF0ZSwgdGhpcy5mbG93S2V5LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NvbnRlbnRMaXN0JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhQXJyYXkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhQXJyYXkgPSB2YWx1ZS5pRmxvd09iamVjdERhdGFBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhQXJyYXkgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iamVjdERhdGFBcnJheSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHsgXCJvYmplY3REYXRhXCI6IG9iamVjdERhdGFBcnJheSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbnl3aG8uc3RhdGUuc2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsIG5ld1N0YXRlLCB0aGlzLmZsb3dLZXksIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQ29udGVudERhdGUnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlID0geyBcImNvbnRlbnRWYWx1ZVwiOiB2YWx1ZS50b0lTT1N0cmluZygpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby5zdGF0ZS5zZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgbmV3U3RhdGUsIHRoaXMuZmxvd0tleSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9mbG93U3RhdGUuY29udGVudFZhbHVlID0gKHZhbHVlIGFzIERhdGUpLnRvSVNPU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlID0geyBcImNvbnRlbnRWYWx1ZVwiOiB2YWx1ZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbnl3aG8uc3RhdGUuc2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsIG5ld1N0YXRlLCB0aGlzLmZsb3dLZXksIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZmxvd1N0YXRlLmNvbnRlbnRWYWx1ZSA9IHZhbHVlIGFzIHN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IG9sZFN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbWFueXdoby5jb21wb25lbnQuaGFuZGxlRXZlbnQodGhpcyxtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLkNvbXBvbmVudElkLHRoaXMuRmxvd0tleSksdGhpcy5GbG93S2V5LG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vYXdhaXQgbWFueXdoby5lbmdpbmUuc3luYyh0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYW55d2hvLmNvbGxhYm9yYXRpb24uaXNJbml0aWFsaXplZCh0aGlzLmZsb3dLZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFueXdoby5jb2xsYWJvcmF0aW9uLnN5bmModGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy91cGRhdGVGaWVsZHMuZm9yRWFjaCgoZmllbGQ6IElGbG93RmllbGQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgbWFueXdoby5jb2xsYWJvcmF0aW9uLnB1c2godGhpcy5Db21wb25lbnRJZCx7XCJtZXNzYWdlXCI6IHtcImFjdGlvblwiOlwiUkVGUkVTSF9GSUVMRFwiLFwiZmllbGROYW1lXCI6IGZpZWxkLmRldmVsb3Blck5hbWUgfX0sdGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy99KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL21hbnl3aG8uY29tcG9uZW50LmhhbmRsZUV2ZW50KHRoaXMsbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgdGhpcy5mbG93S2V5KSx0aGlzLkZsb3dLZXksIHRoaXMuZXZlbnRIYW5kbGVkKTtcclxuICAgICAgICAgICAgICAgIC8vbWFueXdoby5lbmdpbmUuc3luYyh0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmV2ZW50SGFuZGxlZCA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJwaW5nXCIpO1xyXG4gICAgfTtcclxuICAgIEZsb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZS51cGRhdGVWYWx1ZXMgPSBmdW5jdGlvbiAodmFsdWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdXBkYXRlRmllbGRzLCBfaSwgX2EsIGZpZWxkO1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUuc2F2aW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVGaWVsZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlcy5jb25zdHJ1Y3Rvci5uYW1lID09PSBGbG93RmllbGRfMS5GbG93RmllbGQubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRmllbGRzLnB1c2godmFsdWVzLmlGbG93RmllbGQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKF9pID0gMCwgX2EgPSB2YWx1ZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRmllbGRzLnB1c2goZmllbGQuaUZsb3dGaWVsZCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNhbGxSZXF1ZXN0T2xkKHRoaXMudXJsLCAnUE9TVCcsIHVwZGF0ZUZpZWxkcyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2F3YWl0IG1hbnl3aG8uY29ubmVjdGlvbi5yZXF1ZXN0KHRoaXMsIG51bGwsIHRoaXMudXJsICwgJ1BPU1QnLCB0aGlzLlRlbmFudElkLCB0aGlzLlN0YXRlSWQsIG1hbnl3aG8uc3RhdGUuZ2V0QXV0aGVudGljYXRpb25Ub2tlbih0aGlzLkZsb3dLZXkpLCB1cGRhdGVGaWVsZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21hbnl3aG8uY29tcG9uZW50LmhhbmRsZUV2ZW50KHRoaXMsbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5Db21wb25lbnRJZCx0aGlzLkZsb3dLZXkpLHRoaXMuRmxvd0tleSxudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hd2FpdCBtYW55d2hvLmVuZ2luZS5zeW5jKHRoaXMuZmxvd0tleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYW55d2hvLmNvbGxhYm9yYXRpb24uaXNJbml0aWFsaXplZCh0aGlzLmZsb3dLZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL21hbnl3aG8uY29sbGFib3JhdGlvbi5zeW5jKHRoaXMuZmxvd0tleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVGaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLmNvbGxhYm9yYXRpb24ucHVzaChfdGhpcy5Db21wb25lbnRJZCwgeyBcIm1lc3NhZ2VcIjogeyBcImFjdGlvblwiOiBcIlJFRlJFU0hfRklFTERcIiwgXCJmaWVsZE5hbWVcIjogZmllbGQuZGV2ZWxvcGVyTmFtZSB9IH0sIF90aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLnJlYWR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUuX3NlbmRDb2xsYWJvcmF0aW9uTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgaWYgKG1hbnl3aG8uY29sbGFib3JhdGlvbi5pc0luaXRpYWxpemVkKHRoaXMuZmxvd0tleSkpIHtcclxuICAgICAgICAgICAgLy9tYW55d2hvLmNvbGxhYm9yYXRpb24uc3luYyh0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICBtYW55d2hvLmNvbGxhYm9yYXRpb24ucHVzaCh0aGlzLkNvbXBvbmVudElkLCB7IFwibWVzc2FnZVwiOiBtZXNzYWdlIH0sIHRoaXMuZmxvd0tleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8vdHJpZ2dlcnMgdGhlIHNwZWNpZmllZCBvdXRjb21lLCBvcHRpb25hbGx5IHBhc3NlcyBhIGRhdGEgb2JqZWN0IFxyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLnRyaWdnZXJPdXRjb21lID0gZnVuY3Rpb24gKG91dGNvbWVOYW1lLCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgb2M7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5tb3Zpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vdXRjb21lc1tvdXRjb21lTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9jID0gdGhpcy5vdXRjb21lc1tvdXRjb21lTmFtZV0uaUZsb3dPdXRjb21lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvYykgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIG1hbnl3aG8uY29tcG9uZW50Lm9uT3V0Y29tZShvYywgZGF0YSwgdGhpcy5GbG93S2V5KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2coJ0NvdWxkIG5vdCBmaW5kIG91dGNvbWUgJyArIG91dGNvbWVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLy90cmlnZ2VycyB0aGUgc3BlY2lmaWVkIG91dGNvbWUsIG9wdGlvbmFsbHkgcGFzc2VzIGEgZGF0YSBvYmplY3QgXHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUubW92ZVRvID0gZnVuY3Rpb24gKGZsb3dFbGVtZW50SWQsIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBiYXNlVXJsLCBpbnZva2V1cmwsIGluZm8sIHJlcXVlc3QsIHJlc3A7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5tb3Zpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VVcmwgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZva2V1cmwgPSBiYXNlVXJsICsgXCIvYXBpL3J1bi8xL3N0YXRlL1wiICsgdGhpcy5zdGF0ZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvID0gbWFueXdoby5zdGF0ZS5nZXRTdGF0ZSh0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuY3VycmVudE1hcEVsZW1lbnRJZCA9IGluZm8uY3VycmVudE1hcEVsZW1lbnRJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5pbnZva2VUeXBlID0gJ05BVklHQVRFJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5tYXBFbGVtZW50SW52b2tlUmVxdWVzdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Lm1hcEVsZW1lbnRJbnZva2VSZXF1ZXN0LnNlbGVjdGVkT3V0Y29tZUlkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5wYWdlUmVxdWVzdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VDb21wb25lbnRJbnB1dFJlc3BvbnNlczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgcGFnZUNvbXBvbmVudElkOiB0aGlzLmNvbXBvbmVudElkLCBjb250ZW50VmFsdWU6IG51bGwsIG9iamVjdERhdGE6IG51bGwgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc2VsZWN0ZWRNYXBFbGVtZW50SWQgPSBmbG93RWxlbWVudElkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnN0YXRlSWQgPSB0aGlzLnN0YXRlSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc3RhdGVUb2tlbiA9IGluZm8udG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIG1hbnl3aG8uY29ubmVjdGlvbi5yZXF1ZXN0KHRoaXMsIG51bGwsIGludm9rZXVybCwgJ1BPU1QnLCB0aGlzLnRlbmFudElkLCB0aGlzLnN0YXRlSWQsIG1hbnl3aG8uc3RhdGUuZ2V0QXV0aGVudGljYXRpb25Ub2tlbih0aGlzLmZsb3dLZXkpLCByZXF1ZXN0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLm1vZGVsLnBhcnNlRW5naW5lUmVzcG9uc2UocmVzcCwgdGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgbWFueXdoby5lbmdpbmUucmVuZGVyKHRoaXMuZmxvd0tleSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcclxuICAgICAgICB2YXIgdGltZSA9IFsoJzAnICsgbm93LmdldEhvdXJzKCkpLnNsaWNlKC0yKSwgKCcwJyArIG5vdy5nZXRNaW51dGVzKCkpLnNsaWNlKC0yKSxcclxuICAgICAgICAgICAgKCcwJyArIG5vdy5nZXRTZWNvbmRzKCkpLnNsaWNlKC0yKV07XHJcbiAgICAgICAgdmFyIHRpbWVzdGFtcCA9ICdbJyArIHRpbWUuam9pbignOicpICsgJ10gJztcclxuICAgICAgICBjb25zb2xlLmxvZyh0aW1lc3RhbXAgKyBtZXNzYWdlKTtcclxuICAgIH07XHJcbiAgICAvL2hlbHBlciB0byBzaWxlbnRseSBsYXVuY2ggYSBmbG93XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUubGF1bmNoRmxvd1NpbGVudCA9IGZ1bmN0aW9uICh0ZW5hbnQsIGZsb3dJZCwgcGxheWVyLCBvYmplY3REYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYmFzZVVybCwgdXJsLCBkYXRhO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBiYXNlVXJsID0gbWFueXdoby5zZXR0aW5ncy5nbG9iYWwoJ3BsYXRmb3JtLnVyaScpIHx8ICdodHRwczovL2Zsb3cubWFueXdoby5jb20nO1xyXG4gICAgICAgICAgICAgICAgdXJsID0gYmFzZVVybCArIFwiL2FwaS9ydW4vMS9zdGF0ZVwiO1xyXG4gICAgICAgICAgICAgICAgZGF0YSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZGF0YS5pZCA9IGZsb3dJZDtcclxuICAgICAgICAgICAgICAgIGRhdGEuZGV2ZWxvcGVyTmFtZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBkYXRhLmlucHV0cyA9IG9iamVjdERhdGEgPyBvYmplY3REYXRhLmlGbG93T2JqZWN0RGF0YUFycmF5KCkgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgbWFueXdoby5jb25uZWN0aW9uLnJlcXVlc3QodGhpcywgXCJcIiwgdXJsLCAnUE9TVCcsIHRoaXMuVGVuYW50SWQsIFwiXCIsIG1hbnl3aG8uc3RhdGUuZ2V0QXV0aGVudGljYXRpb25Ub2tlbih0aGlzLkZsb3dLZXkpLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vaGVscGVyIHRvIG9wZW4gYSBzcGVjaWZpYyBmbG93IGluIGEgbmV3IHRhYlxyXG4gICAgRmxvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLmxhdW5jaEZsb3dUYWIgPSBmdW5jdGlvbiAodGVuYW50LCBmbG93SWQsIHBsYXllciwgb2JqZWN0RGF0YSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGJhc2VVcmwsIHVybDtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgYmFzZVVybCA9IG1hbnl3aG8uc2V0dGluZ3MuZ2xvYmFsKCdwbGF0Zm9ybS51cmknKSB8fCAnaHR0cHM6Ly9mbG93LmJvb21pLmNvbSc7XHJcbiAgICAgICAgICAgICAgICB1cmwgPSBiYXNlVXJsICsgJy8nICsgdGVuYW50ICsgJy9wbGF5LycgKyBwbGF5ZXIgKyAnP2Zsb3ctaWQ9JyArIGZsb3dJZDtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybCwgJ19uZXcnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vdGhpcyB3aWxsIGdldCB0cmlnZ2VyZWQgYnkgdGhlIGNvbGxhYm9yYXRpb24gZW5naW5lXHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHN0YXRlLCBtZXNzYWdlLCBfYTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBtYW55d2hvLnN0YXRlLmdldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCB0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXRlKSByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHN0YXRlLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZE1vZGVsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCB7IFwibWVzc2FnZVwiOiB7fSB9LCB0aGlzLmZsb3dLZXksIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShtZXNzYWdlICYmIG1lc3NhZ2UuYWN0aW9uKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gbWVzc2FnZS5hY3Rpb24udG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUkVGUkVTSF9GSUVMRFMnOiByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1JFRlJFU0hfRklFTEQnOiByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9hZEFsbFZhbHVlcygpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmxvYWRWYWx1ZShtZXNzYWdlLmZpZWxkTmFtZSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA2XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG1lc3NhZ2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvL3RoaXMgaXMgdXNlZCBieSBvdGhlciBjb21wb25lbnRzIHdobyBtaWdodCB3YW50IHRvIHNlbmQgaW4gYSBnZW5lcmljIHdpbmRvdyBtZXNzYWdlXHJcbiAgICAvL25vdGhpbmcgdG8gZG8gd2l0aCBjb2xsYWJvcmF0aW9uXHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUucmVjZWl2ZU1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG1zZywgX2E7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWVzc2FnZS5kYXRhKSByZXR1cm4gWzMgLypicmVhayovLCA5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXNnID0gbWVzc2FnZS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1zZy5hY3Rpb24pIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IG1zZy5hY3Rpb24udG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnT1VUQ09NRSc6IHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUkVGUkVTSF9GSUVMRFMnOiByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1JFRlJFU0hfRklFTEQnOiByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMudHJpZ2dlck91dGNvbWUobXNnLmRhdGEpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmxvYWRBbGxWYWx1ZXMoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2FkVmFsdWUobXNnLmZpZWxkTmFtZSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA5XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaGFuZGxlTWVzc2FnZShtc2cpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OiByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGbG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlTWVzc2FnZSA9IGZ1bmN0aW9uIChtc2cpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGbG93QmFzZUNvbXBvbmVudDtcclxufShSZWFjdC5Db21wb25lbnQpKTtcclxuZXhwb3J0cy5GbG93QmFzZUNvbXBvbmVudCA9IEZsb3dCYXNlQ29tcG9uZW50O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkZsb3dPYmplY3REYXRhQXJyYXkgPSBleHBvcnRzLmVTb3J0T3JkZXIgPSB2b2lkIDA7XHJcbnZhciBGbG93RmllbGRfMSA9IHJlcXVpcmUoXCIuL0Zsb3dGaWVsZFwiKTtcclxudmFyIEZsb3dPYmplY3REYXRhXzEgPSByZXF1aXJlKFwiLi9GbG93T2JqZWN0RGF0YVwiKTtcclxudmFyIGVTb3J0T3JkZXI7XHJcbihmdW5jdGlvbiAoZVNvcnRPcmRlcikge1xyXG4gICAgZVNvcnRPcmRlcltlU29ydE9yZGVyW1wiYXNjZW5kaW5nXCJdID0gMF0gPSBcImFzY2VuZGluZ1wiO1xyXG4gICAgZVNvcnRPcmRlcltlU29ydE9yZGVyW1wiZGVzY2VuZGluZ1wiXSA9IDFdID0gXCJkZXNjZW5kaW5nXCI7XHJcbn0pKGVTb3J0T3JkZXIgPSBleHBvcnRzLmVTb3J0T3JkZXIgfHwgKGV4cG9ydHMuZVNvcnRPcmRlciA9IHt9KSk7XHJcbnZhciBGbG93T2JqZWN0RGF0YUFycmF5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmxvd09iamVjdERhdGFBcnJheShhcnJheSkge1xyXG4gICAgICAgIHRoaXMuSXRlbXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gYXJyYXkgfHwgW107IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gX2FbX2ldO1xyXG4gICAgICAgICAgICB0aGlzLkl0ZW1zLnB1c2gobmV3IEZsb3dPYmplY3REYXRhXzEuRmxvd09iamVjdERhdGEoW2l0ZW1dKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPYmplY3REYXRhQXJyYXkucHJvdG90eXBlLCBcIml0ZW1zXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuSXRlbXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRmxvd09iamVjdERhdGFBcnJheS5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uIChvcmRlciwgZmllbGROYW1lKSB7XHJcbiAgICAgICAgaWYgKG9yZGVyID09PSBlU29ydE9yZGVyLmFzY2VuZGluZykge1xyXG4gICAgICAgICAgICBpZiAoZmllbGROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5JdGVtcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbEE7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbEI7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChhLnByb3BlcnRpZXNbZmllbGROYW1lXS5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsQSA9IHBhcnNlRmxvYXQoYS5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsQiA9IHBhcnNlRmxvYXQoYi5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnREYXRlVGltZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbEEgPSBuZXcgRGF0ZShhLnByb3BlcnRpZXNbZmllbGROYW1lXS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxCID0gbmV3IERhdGUoYi5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxBID0gYS5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxCID0gYi5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgdmFsQSA8IHZhbEI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgdmFsQSA+IHZhbEI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuSXRlbXMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoZmllbGROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5JdGVtcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEgJiYgYiAmJiBhLnByb3BlcnRpZXMgJiYgYi5wcm9wZXJ0aWVzICYmIGEucHJvcGVydGllc1tmaWVsZE5hbWVdICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGIucHJvcGVydGllc1tmaWVsZE5hbWVdICYmIGEucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlICYmIGIucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhLnByb3BlcnRpZXNbZmllbGROYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBhLnByb3BlcnRpZXNbZmllbGROYW1lXS52YWx1ZSA8IGIucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGEucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlID4gYi5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0udmFsdWU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkl0ZW1zLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyOyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGbG93T2JqZWN0RGF0YUFycmF5LnByb3RvdHlwZS5hZGRJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICB0aGlzLkl0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFBcnJheS5wcm90b3R5cGUuY2xlYXJJdGVtcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLkl0ZW1zID0gW107XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFBcnJheS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNsb25lID0gbmV3IEZsb3dPYmplY3REYXRhQXJyYXkoKTtcclxuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICBjbG9uZS5hZGRJdGVtKG9iai5jbG9uZSgpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFBcnJheS5wcm90b3R5cGUuaUZsb3dPYmplY3REYXRhQXJyYXkgPSBmdW5jdGlvbiAoc2VsZWN0ZWQpIHtcclxuICAgICAgICB2YXIgb3V0cHV0ID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuSXRlbXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBvZCA9IF9hW19pXTtcclxuICAgICAgICAgICAgb3V0cHV0LnB1c2gob2QuaU9iamVjdERhdGEoc2VsZWN0ZWQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH07XHJcbiAgICBGbG93T2JqZWN0RGF0YUFycmF5LnByb3RvdHlwZS5nZXRJdGVtV2l0aFByb3BlcnR5TmFtZSA9IGZ1bmN0aW9uIChmaW5kUHJvcGVydHksIHdpdGhWYWx1ZSwgcmV0dXJuUHJvcGVydHkpIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5JdGVtczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSBfYVtfaV07XHJcbiAgICAgICAgICAgIGlmIChpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XSAmJiBpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS52YWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBhcmVUbyA9IHdpdGhWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0uY29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50U3RyaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVUbyA9IGNvbXBhcmVUby50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBwYXJzZUZsb2F0KGNvbXBhcmVUby50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudEJvb2xlYW46XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVUbyA9IG5ldyBTdHJpbmcoY29tcGFyZVRvKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBjb21wYXJlVG8pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5wcm9wZXJ0aWVzW3JldHVyblByb3BlcnR5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBGbG93T2JqZWN0RGF0YUFycmF5LnByb3RvdHlwZS5nZXRTZWxlY3RlZEl0ZW1zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZXN1bHRzID0gbmV3IEZsb3dPYmplY3REYXRhQXJyYXkoKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5JdGVtczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSBfYVtfaV07XHJcbiAgICAgICAgICAgIGlmIChpdGVtLmlzU2VsZWN0ZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdHMuYWRkSXRlbShpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgIH07XHJcbiAgICBGbG93T2JqZWN0RGF0YUFycmF5LnByb3RvdHlwZS5nZXRJdGVtV2l0aFByb3BlcnR5VmFsdWUgPSBmdW5jdGlvbiAoZmluZFByb3BlcnR5LCB3aXRoVmFsdWUpIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5JdGVtczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSBfYVtfaV07XHJcbiAgICAgICAgICAgIGlmIChpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XSAmJiBpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS52YWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBhcmVUbyA9IHdpdGhWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0uY29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50U3RyaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVUbyA9IG5ldyBTdHJpbmcoY29tcGFyZVRvKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBwYXJzZUZsb2F0KG5ldyBTdHJpbmcoY29tcGFyZVRvKS50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudEJvb2xlYW46XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVUbyA9IG5ldyBTdHJpbmcoY29tcGFyZVRvKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBjb21wYXJlVG8pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGbG93T2JqZWN0RGF0YUFycmF5LnByb3RvdHlwZS5nZXRJbmRleE9mSXRlbVdpdGhQcm9wZXJ0eVZhbHVlID0gZnVuY3Rpb24gKGZpbmRQcm9wZXJ0eSwgd2l0aFZhbHVlKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcG9zID0gMDsgcG9zIDwgdGhpcy5pdGVtcy5sZW5ndGg7IHBvcysrKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1twb3NdO1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0gJiYgaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0udmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBjb21wYXJlVG8gPSB3aXRoVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldLmNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudFN0cmluZzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBjb21wYXJlVG8udG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudE51bWJlcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gcGFyc2VGbG9hdChuZXcgU3RyaW5nKGNvbXBhcmVUbykudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRCb29sZWFuOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBuZXcgU3RyaW5nKGNvbXBhcmVUbykudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gY29tcGFyZVRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFBcnJheS5wcm90b3R5cGUucmVtb3ZlSXRlbVdpdGhQcm9wZXJ0eVZhbHVlID0gZnVuY3Rpb24gKGZpbmRQcm9wZXJ0eSwgd2l0aFZhbHVlKSB7XHJcbiAgICAgICAgdmFyIG1vZGlmaWVkQ291bnQgPSAwO1xyXG4gICAgICAgIGZvciAodmFyIHBvcyA9IDA7IHBvcyA8IHRoaXMuaXRlbXMubGVuZ3RoOyBwb3MrKykge1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbcG9zXTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldICYmIGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldLnZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29tcGFyZVRvID0gd2l0aFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRTdHJpbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gY29tcGFyZVRvLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnROdW1iZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVUbyA9IHBhcnNlRmxvYXQobmV3IFN0cmluZyhjb21wYXJlVG8pLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50Qm9vbGVhbjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gbmV3IFN0cmluZyhjb21wYXJlVG8pLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IGNvbXBhcmVUbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKHBvcywgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtb2RpZmllZENvdW50O1xyXG4gICAgfTtcclxuICAgIEZsb3dPYmplY3REYXRhQXJyYXkucHJvdG90eXBlLnJlbW92ZUl0ZW1BdEluZGV4ID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgdmFyIG1vZGlmaWVkQ291bnQgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLml0ZW1zW2luZGV4XSkge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1zLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIG1vZGlmaWVkQ291bnQgPSBpbmRleDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1vZGlmaWVkQ291bnQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZsb3dPYmplY3REYXRhQXJyYXk7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmxvd09iamVjdERhdGFBcnJheSA9IEZsb3dPYmplY3REYXRhQXJyYXk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSkpO1xyXG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRmxvd0NvbXBvbmVudFwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9GbG93UGFnZVwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9EaWFsb2dzL0Zsb3dEaWFsb2dCb3hcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRGlhbG9ncy9GbG93TWVzc2FnZUJveFwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9EaWFsb2dzL0Zsb3dDb250ZXh0TWVudVwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9EaWFsb2dzL0NvbW1vblwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9JY29uUGlja2VyXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0Zsb3dCYXNlQ29tcG9uZW50XCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0Zsb3dBdHRyaWJ1dGVcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRmxvd0Rpc3BsYXlDb2x1bW5cIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRmxvd0ZpZWxkXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0Zsb3dPYmplY3REYXRhXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0Zsb3dPYmplY3REYXRhQXJyYXlcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRmxvd09iamVjdERhdGFQcm9wZXJ0eVwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9GbG93T3V0Y29tZVwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9GbG93Q2hhcnRcIiksIGV4cG9ydHMpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkZsb3dBdHRyaWJ1dGUgPSB2b2lkIDA7XHJcbnZhciBGbG93QXR0cmlidXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmxvd0F0dHJpYnV0ZShuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuTmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5WYWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dBdHRyaWJ1dGUucHJvdG90eXBlLCBcIm5hbWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5OYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93QXR0cmlidXRlLnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlZhbHVlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBGbG93QXR0cmlidXRlO1xyXG59KCkpO1xyXG5leHBvcnRzLkZsb3dBdHRyaWJ1dGUgPSBGbG93QXR0cmlidXRlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkRyYWdFdmVudCA9IGV4cG9ydHMuZURyYWdFdmVudFR5cGUgPSBleHBvcnRzLm1vZGFsRGlhbG9nQnV0dG9uID0gdm9pZCAwO1xyXG52YXIgbW9kYWxEaWFsb2dCdXR0b24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBtb2RhbERpYWxvZ0J1dHRvbihsYWJlbCwgaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcclxuICAgICAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1vZGFsRGlhbG9nQnV0dG9uO1xyXG59KCkpO1xyXG5leHBvcnRzLm1vZGFsRGlhbG9nQnV0dG9uID0gbW9kYWxEaWFsb2dCdXR0b247XHJcbnZhciBlRHJhZ0V2ZW50VHlwZTtcclxuKGZ1bmN0aW9uIChlRHJhZ0V2ZW50VHlwZSkge1xyXG4gICAgZURyYWdFdmVudFR5cGVbZURyYWdFdmVudFR5cGVbXCJ1bmtub3duXCJdID0gMF0gPSBcInVua25vd25cIjtcclxuICAgIGVEcmFnRXZlbnRUeXBlW2VEcmFnRXZlbnRUeXBlW1wiY2FudmFzXCJdID0gMV0gPSBcImNhbnZhc1wiO1xyXG4gICAgZURyYWdFdmVudFR5cGVbZURyYWdFdmVudFR5cGVbXCJ0YWJsZVwiXSA9IDJdID0gXCJ0YWJsZVwiO1xyXG4gICAgZURyYWdFdmVudFR5cGVbZURyYWdFdmVudFR5cGVbXCJsaW5rXCJdID0gM10gPSBcImxpbmtcIjtcclxuICAgIGVEcmFnRXZlbnRUeXBlW2VEcmFnRXZlbnRUeXBlW1wiZGlhbG9nXCJdID0gNF0gPSBcImRpYWxvZ1wiO1xyXG59KShlRHJhZ0V2ZW50VHlwZSA9IGV4cG9ydHMuZURyYWdFdmVudFR5cGUgfHwgKGV4cG9ydHMuZURyYWdFdmVudFR5cGUgPSB7fSkpO1xyXG52YXIgRHJhZ0V2ZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRHJhZ0V2ZW50KCkge1xyXG4gICAgICAgIHRoaXMudHlwZSA9IGVEcmFnRXZlbnRUeXBlLnVua25vd247XHJcbiAgICAgICAgdGhpcy5zb3VyY2VFbGVtZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnRhcmdldEVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubW91c2VYID0gMDtcclxuICAgICAgICB0aGlzLm1vdXNlWSA9IDA7XHJcbiAgICAgICAgdGhpcy5tb3VzZU9mZnNldFggPSAwO1xyXG4gICAgICAgIHRoaXMubW91c2VPZmZzZXRZID0gMDtcclxuICAgIH1cclxuICAgIERyYWdFdmVudC5zdGFydCA9IGZ1bmN0aW9uICh0eXBlLCBzb3VyY2VFbGVtZW50LCBtb3VzZVgsIG1vdXNlWSkge1xyXG4gICAgICAgIHZhciBldnQgPSBuZXcgRHJhZ0V2ZW50KCk7XHJcbiAgICAgICAgZXZ0LnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIGV2dC5zb3VyY2VFbGVtZW50ID0gc291cmNlRWxlbWVudDtcclxuICAgICAgICBldnQudGFyZ2V0RWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgZXZ0Lm1vdXNlWCA9IG1vdXNlWDtcclxuICAgICAgICBldnQubW91c2VZID0gbW91c2VZO1xyXG4gICAgICAgIGV2dC5tb3VzZU9mZnNldFggPSBtb3VzZVg7XHJcbiAgICAgICAgZXZ0Lm1vdXNlT2Zmc2V0WSA9IG1vdXNlWTtcclxuICAgICAgICByZXR1cm4gZXZ0O1xyXG4gICAgfTtcclxuICAgIERyYWdFdmVudC5wcm90b3R5cGUuZHJhZyA9IGZ1bmN0aW9uIChtb3VzZVgsIG1vdXNlWSkge1xyXG4gICAgICAgIHRoaXMubW91c2VYID0gbW91c2VYO1xyXG4gICAgICAgIHRoaXMubW91c2VZID0gbW91c2VZO1xyXG4gICAgfTtcclxuICAgIERyYWdFdmVudC5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKHRhcmdldCwgbW91c2VYLCBtb3VzZVkpIHtcclxuICAgICAgICB0aGlzLnRhcmdldEVsZW1lbnQgPSB0YXJnZXQ7XHJcbiAgICAgICAgdGhpcy5tb3VzZVggPSBtb3VzZVg7XHJcbiAgICAgICAgdGhpcy5tb3VzZVkgPSBtb3VzZVk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gZURyYWdFdmVudFR5cGUudW5rbm93bjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRHJhZ0V2ZW50O1xyXG59KCkpO1xyXG5leHBvcnRzLkRyYWdFdmVudCA9IERyYWdFdmVudDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93RGlzcGxheUNvbHVtbiA9IHZvaWQgMDtcclxudmFyIEZsb3dGaWVsZF8xID0gcmVxdWlyZShcIi4vRmxvd0ZpZWxkXCIpO1xyXG52YXIgRmxvd0Rpc3BsYXlDb2x1bW4gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGbG93RGlzcGxheUNvbHVtbihjb2x1bW4pIHtcclxuICAgICAgICB0aGlzLkNvbHVtbiA9IGNvbHVtbjtcclxuICAgICAgICB0aGlzLkNvbXBvbmVudFR5cGUgPSBjb2x1bW4uY29tcG9uZW50VHlwZTtcclxuICAgICAgICB0aGlzLkNvbnRlbnRGb3JtYXQgPSBjb2x1bW4uY29udGVudEZvcm1hdDtcclxuICAgICAgICB0aGlzLkNvbnRlbnRUeXBlID0gRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlW2NvbHVtbi5jb250ZW50VHlwZV07XHJcbiAgICAgICAgdGhpcy5EZXZlbG9wZXJOYW1lID0gY29sdW1uLmRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgdGhpcy5EaXNwbGF5T3JkZXIgPSBjb2x1bW4ub3JkZXI7XHJcbiAgICAgICAgdGhpcy5MYWJlbCA9IGNvbHVtbi5sYWJlbDtcclxuICAgICAgICB0aGlzLlJlYWRPbmx5ID0gIWNvbHVtbi5pc0VkaXRhYmxlO1xyXG4gICAgICAgIHRoaXMuVHlwZUVsZW1lbXRQcm9wZXJ0eVRvRGlzcGxheUlkID0gY29sdW1uLnR5cGVFbGVtZW10UHJvcGVydHlUb0Rpc3BsYXlJZDtcclxuICAgICAgICB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlJZCA9IGNvbHVtbi50eXBlRWxlbWVudFByb3BlcnR5SWQ7XHJcbiAgICAgICAgdGhpcy5WaXNpYmxlID0gY29sdW1uLmlzRGlzcGxheVZhbHVlO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dEaXNwbGF5Q29sdW1uLnByb3RvdHlwZSwgXCJjb21wb25lbnRUeXBlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQ29tcG9uZW50VHlwZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Rpc3BsYXlDb2x1bW4ucHJvdG90eXBlLCBcImNvbnRlbnRGb3JtYXRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Db250ZW50Rm9ybWF0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RGlzcGxheUNvbHVtbi5wcm90b3R5cGUsIFwiY29udGVudFR5cGVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Db250ZW50VHlwZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Rpc3BsYXlDb2x1bW4ucHJvdG90eXBlLCBcImRldmVsb3Blck5hbWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5EZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RGlzcGxheUNvbHVtbi5wcm90b3R5cGUsIFwidmlzaWJsZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlZpc2libGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dEaXNwbGF5Q29sdW1uLnByb3RvdHlwZSwgXCJyZWFkT25seVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlYWRPbmx5O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93RGlzcGxheUNvbHVtbi5wcm90b3R5cGUsIFwibGFiZWxcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5MYWJlbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Rpc3BsYXlDb2x1bW4ucHJvdG90eXBlLCBcImRpc3BsYXlPcmRlclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkRpc3BsYXlPcmRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Rpc3BsYXlDb2x1bW4ucHJvdG90eXBlLCBcInR5cGVFbGVtZW50UHJvcGVydHlJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd0Rpc3BsYXlDb2x1bW4ucHJvdG90eXBlLCBcInR5cGVFbGVtZW10UHJvcGVydHlUb0Rpc3BsYXlJZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlR5cGVFbGVtZW10UHJvcGVydHlUb0Rpc3BsYXlJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBGbG93RGlzcGxheUNvbHVtbi5wcm90b3R5cGUuaUZsb3dEaXNwbGF5Q29sdW1uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkNvbHVtbjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmxvd0Rpc3BsYXlDb2x1bW47XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmxvd0Rpc3BsYXlDb2x1bW4gPSBGbG93RGlzcGxheUNvbHVtbjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93T2JqZWN0RGF0YVByb3BlcnR5ID0gdm9pZCAwO1xyXG52YXIgRmxvd0ZpZWxkXzEgPSByZXF1aXJlKFwiLi9GbG93RmllbGRcIik7XHJcbnZhciBGbG93T2JqZWN0RGF0YV8xID0gcmVxdWlyZShcIi4vRmxvd09iamVjdERhdGFcIik7XHJcbnZhciBGbG93T2JqZWN0RGF0YUFycmF5XzEgPSByZXF1aXJlKFwiLi9GbG93T2JqZWN0RGF0YUFycmF5XCIpO1xyXG52YXIgRmxvd09iamVjdERhdGFQcm9wZXJ0eSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZsb3dPYmplY3REYXRhUHJvcGVydHkocHJvcGVydHkpIHtcclxuICAgICAgICB0aGlzLkNvbnRlbnRGb3JtYXQgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuQ29udGVudFR5cGUgPSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUudW5rbm93bjtcclxuICAgICAgICB0aGlzLkRldmVsb3Blck5hbWUgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuVHlwZUVsZW1lbnRJZCA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5SWQgPSBcIlwiO1xyXG4gICAgICAgIGlmIChwcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICB0aGlzLkRldmVsb3Blck5hbWUgPSBwcm9wZXJ0eS5kZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgICAgICB0aGlzLkNvbnRlbnRUeXBlID0gRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlW3Byb3BlcnR5LmNvbnRlbnRUeXBlXTtcclxuICAgICAgICAgICAgdGhpcy5Db250ZW50Rm9ybWF0ID0gcHJvcGVydHkuY29udGVudEZvcm1hdCA/IHByb3BlcnR5LmNvbnRlbnRGb3JtYXQgOiBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLlR5cGVFbGVtZW50SWQgPSBwcm9wZXJ0eS50eXBlRWxlbWVudElkID8gcHJvcGVydHkudHlwZUVsZW1lbnRJZCA6IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkID0gcHJvcGVydHkudHlwZUVsZW1lbnRQcm9wZXJ0eUlkO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuQ29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRPYmplY3Q6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5WYWx1ZSA9IHByb3BlcnR5Lm9iamVjdERhdGEgPyBuZXcgRmxvd09iamVjdERhdGFfMS5GbG93T2JqZWN0RGF0YShwcm9wZXJ0eS5vYmplY3REYXRhKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRMaXN0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBwcm9wZXJ0eS5vYmplY3REYXRhID8gbmV3IEZsb3dPYmplY3REYXRhQXJyYXlfMS5GbG93T2JqZWN0RGF0YUFycmF5KHByb3BlcnR5Lm9iamVjdERhdGEpIDogbmV3IEZsb3dPYmplY3REYXRhQXJyYXlfMS5GbG93T2JqZWN0RGF0YUFycmF5KFtdKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHByb3BlcnR5LmNvbnRlbnRWYWx1ZSA/IHByb3BlcnR5LmNvbnRlbnRWYWx1ZSA6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBGbG93T2JqZWN0RGF0YVByb3BlcnR5Lm5ld0luc3RhbmNlID0gZnVuY3Rpb24gKGRldmVsb3Blck5hbWUsIGNvbnRlbnRUeXBlLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBjdiA9IFwiXCI7XHJcbiAgICAgICAgdmFyIG9iamQgPSBbXTtcclxuICAgICAgICBzd2l0Y2ggKGNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRPYmplY3Q6XHJcbiAgICAgICAgICAgICAgICB2YXIgb2QgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIG9iamQucHVzaChvZC5pT2JqZWN0RGF0YSgpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TGlzdDpcclxuICAgICAgICAgICAgICAgIHZhciBvZGEgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIG9iamQgPSBvZGEuaUZsb3dPYmplY3REYXRhQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY3YgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgY29udGVudEZvcm1hdDogXCJcIixcclxuICAgICAgICAgICAgY29udGVudFR5cGU6IEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZVtjb250ZW50VHlwZV0sXHJcbiAgICAgICAgICAgIGNvbnRlbnRWYWx1ZTogY3YsXHJcbiAgICAgICAgICAgIGRldmVsb3Blck5hbWU6IGRldmVsb3Blck5hbWUsXHJcbiAgICAgICAgICAgIG9iamVjdERhdGE6IG9iamQsXHJcbiAgICAgICAgICAgIHR5cGVFbGVtZW50SWQ6IFwiXCIsXHJcbiAgICAgICAgICAgIHR5cGVFbGVtZW50UHJvcGVydHlJZDogXCJcIixcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBuZXcgdGhpcyhkYXRhKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd09iamVjdERhdGFQcm9wZXJ0eS5wcm90b3R5cGUsIFwiY29udGVudEZvcm1hdFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkNvbnRlbnRGb3JtYXQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjb250ZW50Rm9ybWF0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudEZvcm1hdCA9IGNvbnRlbnRGb3JtYXQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPYmplY3REYXRhUHJvcGVydHkucHJvdG90eXBlLCBcImNvbnRlbnRUeXBlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQ29udGVudFR5cGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICB0aGlzLkNvbnRlbnRUeXBlID0gY29udGVudFR5cGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPYmplY3REYXRhUHJvcGVydHkucHJvdG90eXBlLCBcImRldmVsb3Blck5hbWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5EZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGV2ZWxvcGVyTmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLkRldmVsb3Blck5hbWUgPSBkZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YVByb3BlcnR5LnByb3RvdHlwZSwgXCJ0eXBlRWxlbWVudElkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVHlwZUVsZW1lbnRJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHR5cGVFbGVtZW50SWQpIHtcclxuICAgICAgICAgICAgdGhpcy5UeXBlRWxlbWVudElkID0gdHlwZUVsZW1lbnRJZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd09iamVjdERhdGFQcm9wZXJ0eS5wcm90b3R5cGUsIFwidHlwZUVsZW1lbnRQcm9wZXJ0eUlkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodHlwZUVsZW1lbnRQcm9wZXJ0eUlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkID0gdHlwZUVsZW1lbnRQcm9wZXJ0eUlkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T2JqZWN0RGF0YVByb3BlcnR5LnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudE51bWJlcjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLlZhbHVlID8gdGhpcy5WYWx1ZSA6ICcwJyk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50Qm9vbGVhbjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFN0cmluZyh0aGlzLlZhbHVlKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLlZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRmxvd09iamVjdERhdGFQcm9wZXJ0eS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlO1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TGlzdDpcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IEZsb3dPYmplY3REYXRhQXJyYXlfMS5GbG93T2JqZWN0RGF0YUFycmF5KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5hZGRJdGVtKGl0ZW0uY2xvbmUoaXRlbS5kZXZlbG9wZXJOYW1lKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50T2JqZWN0OlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnZhbHVlLmNsb25lKHRoaXMudmFsdWUuZGV2ZWxvcGVyTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNsb25lID0gRmxvd09iamVjdERhdGFQcm9wZXJ0eS5uZXdJbnN0YW5jZSh0aGlzLmRldmVsb3Blck5hbWUsIHRoaXMuY29udGVudFR5cGUsIHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICB9O1xyXG4gICAgRmxvd09iamVjdERhdGFQcm9wZXJ0eS5wcm90b3R5cGUuaUZsb3dPYmplY3REYXRhUHJvcGVydHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNvbnRlbnRWYWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgdmFyIG9iamVjdERhdGEgPSBbXTtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuQ29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudE9iamVjdDpcclxuICAgICAgICAgICAgICAgIHZhciBvZCA9IHRoaXMuVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBpdCBoYXMgbm8gZGV2ZWxvcGVyTmFtZSB0aGVuIHNraXAgaXRcclxuICAgICAgICAgICAgICAgIGlmIChvZCAmJiBvZC5kZXZlbG9wZXJOYW1lICYmIG9kLmRldmVsb3Blck5hbWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdERhdGEucHVzaChvZC5pT2JqZWN0RGF0YSgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TGlzdDpcclxuICAgICAgICAgICAgICAgIHZhciBvZGEgPSB0aGlzLlZhbHVlO1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0RGF0YSA9IG9kYS5pRmxvd09iamVjdERhdGFBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBjb250ZW50VmFsdWUgPSB0aGlzLlZhbHVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvdXRwdXQgPSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnRGb3JtYXQ6IHRoaXMuQ29udGVudEZvcm1hdCxcclxuICAgICAgICAgICAgY29udGVudFR5cGU6IEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZVt0aGlzLkNvbnRlbnRUeXBlXSxcclxuICAgICAgICAgICAgY29udGVudFZhbHVlOiBjb250ZW50VmFsdWUsXHJcbiAgICAgICAgICAgIGRldmVsb3Blck5hbWU6IHRoaXMuRGV2ZWxvcGVyTmFtZSxcclxuICAgICAgICAgICAgb2JqZWN0RGF0YTogb2JqZWN0RGF0YSxcclxuICAgICAgICAgICAgdHlwZUVsZW1lbnRJZDogdGhpcy5UeXBlRWxlbWVudElkLFxyXG4gICAgICAgICAgICB0eXBlRWxlbWVudFByb3BlcnR5SWQ6IHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd09iamVjdERhdGFQcm9wZXJ0eS5wcm90b3R5cGUsIFwiZGlzcGxheVN0cmluZ1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBsYWJlbCA9ICcnO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5WYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLkNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudFN0cmluZzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IHRoaXMuVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlLkNvbnRlbnRCb29sZWFuOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5WYWx1ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSAnVHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9ICdGYWxzZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGbG93RmllbGRfMS5lQ29udGVudFR5cGUuQ29udGVudERhdGVUaW1lOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IERhdGUucGFyc2UodGhpcy5WYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4oZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdCA9IG5ldyBEYXRlKGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsLmxlbmd0aCA8PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkdC50b0xvY2FsZURhdGVTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkdC50b0xvY2FsZVN0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gRmxvd0ZpZWxkXzEuZUNvbnRlbnRUeXBlW3RoaXMuQ29udGVudFR5cGVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsID0gJ1VuZGVmaW5lZCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGxhYmVsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBGbG93T2JqZWN0RGF0YVByb3BlcnR5O1xyXG59KCkpO1xyXG5leHBvcnRzLkZsb3dPYmplY3REYXRhUHJvcGVydHkgPSBGbG93T2JqZWN0RGF0YVByb3BlcnR5O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkZsb3dPdXRjb21lID0gZXhwb3J0cy5lUGFnZUFjdGlvblR5cGUgPSBleHBvcnRzLmVQYWdlQWN0aW9uQmluZGluZ1R5cGUgPSB2b2lkIDA7XHJcbnZhciBGbG93QXR0cmlidXRlXzEgPSByZXF1aXJlKFwiLi9GbG93QXR0cmlidXRlXCIpO1xyXG52YXIgZVBhZ2VBY3Rpb25CaW5kaW5nVHlwZTtcclxuKGZ1bmN0aW9uIChlUGFnZUFjdGlvbkJpbmRpbmdUeXBlKSB7XHJcbiAgICBlUGFnZUFjdGlvbkJpbmRpbmdUeXBlW1wiU2F2ZVwiXSA9IFwiU0FWRVwiO1xyXG4gICAgZVBhZ2VBY3Rpb25CaW5kaW5nVHlwZVtcIlBhcnRpYWxTYXZlXCJdID0gXCJQQVJUSUFMX1NBVkVcIjtcclxuICAgIGVQYWdlQWN0aW9uQmluZGluZ1R5cGVbXCJOb1NhdmVcIl0gPSBcIk5PX1NBVkVcIjtcclxufSkoZVBhZ2VBY3Rpb25CaW5kaW5nVHlwZSA9IGV4cG9ydHMuZVBhZ2VBY3Rpb25CaW5kaW5nVHlwZSB8fCAoZXhwb3J0cy5lUGFnZUFjdGlvbkJpbmRpbmdUeXBlID0ge30pKTtcclxudmFyIGVQYWdlQWN0aW9uVHlwZTtcclxuKGZ1bmN0aW9uIChlUGFnZUFjdGlvblR5cGUpIHtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIk5ld1wiXSA9IFwiTkVXXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJRdWVyeVwiXSA9IFwiUVVFUllcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIkluc2VydFwiXSA9IFwiSU5TRVJUXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJVcGRhdGVcIl0gPSBcIlVQREFURVwiO1xyXG4gICAgZVBhZ2VBY3Rpb25UeXBlW1wiVXBzZXJ0XCJdID0gXCJVUFNFUlRcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIkRlbGV0ZVwiXSA9IFwiREVMRVRFXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJSZW1vdmVcIl0gPSBcIlJFTU9WRVwiO1xyXG4gICAgZVBhZ2VBY3Rpb25UeXBlW1wiQWRkXCJdID0gXCJBRERcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIkVkaXRcIl0gPSBcIkVESVRcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIk5leHRcIl0gPSBcIk5FWFRcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIkJhY2tcIl0gPSBcIkJBQ0tcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIkRvbmVcIl0gPSBcIkRPTkVcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIlNhdmVcIl0gPSBcIlNBVkVcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIkNhbmNlbFwiXSA9IFwiQ0FOQ0VMXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJBcHBseVwiXSA9IFwiQVBQTFlcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIkltcG9ydFwiXSA9IFwiSU1QT1JUXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJDbG9zZVwiXSA9IFwiQ0xPU0VcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIk9wZW5cIl0gPSBcIk9QRU5cIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIlN1Ym1pdFwiXSA9IFwiU1VCTUlUXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJFc2NhbGF0ZVwiXSA9IFwiRVNDQUxBVEVcIjtcclxuICAgIGVQYWdlQWN0aW9uVHlwZVtcIlJlamVjdFwiXSA9IFwiUkVKRUNUXCI7XHJcbiAgICBlUGFnZUFjdGlvblR5cGVbXCJEZWxlZ2F0ZVwiXSA9IFwiREVMRUdBVEVcIjtcclxufSkoZVBhZ2VBY3Rpb25UeXBlID0gZXhwb3J0cy5lUGFnZUFjdGlvblR5cGUgfHwgKGV4cG9ydHMuZVBhZ2VBY3Rpb25UeXBlID0ge30pKTtcclxudmFyIEZsb3dPdXRjb21lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmxvd091dGNvbWUob3V0Y29tZSkge1xyXG4gICAgICAgIHRoaXMuRGV2ZWxvcGVyTmFtZSA9IG91dGNvbWUuZGV2ZWxvcGVyTmFtZTtcclxuICAgICAgICB0aGlzLklkID0gb3V0Y29tZS5pZDtcclxuICAgICAgICB0aGlzLklzQnVsa0FjdGlvbiA9IG91dGNvbWUuaXNCdWxrQWN0aW9uO1xyXG4gICAgICAgIHRoaXMuSXNPdXQgPSBvdXRjb21lLmlzT3V0O1xyXG4gICAgICAgIHRoaXMuTGFiZWwgPSBvdXRjb21lLmxhYmVsO1xyXG4gICAgICAgIHRoaXMuT3JkZXIgPSBvdXRjb21lLm9yZGVyO1xyXG4gICAgICAgIHRoaXMuUGFnZUFjdGlvbkJpbmRpbmdUeXBlID0gb3V0Y29tZS5wYWdlQWN0aW9uQmluZGluZ1R5cGU7XHJcbiAgICAgICAgdGhpcy5QYWdlQWN0aW9uVHlwZSA9IG91dGNvbWUucGFnZUFjdGlvblR5cGU7XHJcbiAgICAgICAgdGhpcy5QYWdlT2JqZWN0QmluZGluZ0lkID0gb3V0Y29tZS5wYWdlT2JqZWN0QmluZGluZ0lkO1xyXG4gICAgICAgIHRoaXMuQXR0cmlidXRlcyA9IHt9O1xyXG4gICAgICAgIGlmIChvdXRjb21lLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKG91dGNvbWUuYXR0cmlidXRlcyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5BdHRyaWJ1dGVzW2tleV0gPSBuZXcgRmxvd0F0dHJpYnV0ZV8xLkZsb3dBdHRyaWJ1dGUoa2V5LCBvdXRjb21lLmF0dHJpYnV0ZXNba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5PdXRjb21lID0gb3V0Y29tZTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T3V0Y29tZS5wcm90b3R5cGUsIFwiZGV2ZWxvcGVyTmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPdXRjb21lLnByb3RvdHlwZSwgXCJpZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLklkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T3V0Y29tZS5wcm90b3R5cGUsIFwiaXNCdWxrQWN0aW9uXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuSXNCdWxrQWN0aW9uO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T3V0Y29tZS5wcm90b3R5cGUsIFwiaXNPdXRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Jc091dDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd091dGNvbWUucHJvdG90eXBlLCBcImxhYmVsXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuTGFiZWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZsb3dPdXRjb21lLnByb3RvdHlwZSwgXCJvcmRlclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLk9yZGVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T3V0Y29tZS5wcm90b3R5cGUsIFwicGFnZUFjdGlvbkJpbmRpbmdUeXBlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuUGFnZUFjdGlvbkJpbmRpbmdUeXBlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T3V0Y29tZS5wcm90b3R5cGUsIFwicGFnZUFjdGlvblR5cGVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5QYWdlQWN0aW9uVHlwZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvd091dGNvbWUucHJvdG90eXBlLCBcInBhZ2VPYmplY3RCaW5kaW5nSWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5QYWdlT2JqZWN0QmluZGluZ0lkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG93T3V0Y29tZS5wcm90b3R5cGUsIFwiYXR0cmlidXRlc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkF0dHJpYnV0ZXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRmxvd091dGNvbWUucHJvdG90eXBlLmlGbG93T3V0Y29tZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5PdXRjb21lO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGbG93T3V0Y29tZTtcclxufSgpKTtcclxuZXhwb3J0cy5GbG93T3V0Y29tZSA9IEZsb3dPdXRjb21lO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XHJcbnJlcXVpcmUoXCIuL0Zsb3dDb250ZXh0TWVudS5jc3NcIik7XHJcbnZhciBGbG93Q29udGV4dE1lbnUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRmxvd0NvbnRleHRNZW51LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRmxvd0NvbnRleHRNZW51KHByb3BzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuZGlzcGxheVN0eWxlID0ge307XHJcbiAgICAgICAgX3RoaXMubWVudUl0ZW1zID0gW107XHJcbiAgICAgICAgX3RoaXMuc2hvd0NvbnRleHRNZW51ID0gX3RoaXMuc2hvd0NvbnRleHRNZW51LmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLmhpZGVDb250ZXh0TWVudSA9IF90aGlzLmhpZGVDb250ZXh0TWVudS5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5wb3NpdGlvbkNvbnRleHRNZW51ID0gX3RoaXMucG9zaXRpb25Db250ZXh0TWVudS5iaW5kKF90aGlzKTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBGbG93Q29udGV4dE1lbnUucHJvdG90eXBlLnNldE1lbnUgPSBmdW5jdGlvbiAobWVudSkge1xyXG4gICAgICAgIHRoaXMubWVudSA9IG1lbnU7XHJcbiAgICB9O1xyXG4gICAgRmxvd0NvbnRleHRNZW51LnByb3RvdHlwZS5wb3NpdGlvbkNvbnRleHRNZW51ID0gZnVuY3Rpb24gKG1vdXNlWCwgbW91c2VZKSB7XHJcbiAgICAgICAgdmFyIG1lbnVQb3N0aW9uID0ge307XHJcbiAgICAgICAgaWYgKG1vdXNlWCA8ICh3aW5kb3cuaW5uZXJXaWR0aCAvIDIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVN0eWxlLmxlZnQgPSAobW91c2VYIC0gMTApOyAvLyArIFwicHhcIjsgXHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVN0eWxlLnJpZ2h0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5U3R5bGUubGVmdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5U3R5bGUucmlnaHQgPSAod2luZG93LmlubmVyV2lkdGggLSAobW91c2VYICsgMTApKTsgLy8gKyBcInB4XCI7IFxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobW91c2VZIDwgKHdpbmRvdy5pbm5lckhlaWdodCAvIDIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVN0eWxlLnRvcCA9IChtb3VzZVkgLSAxMCk7IC8vICsgXCJweFwiOyBcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5U3R5bGUuYm90dG9tID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5U3R5bGUudG9wID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlTdHlsZS5ib3R0b20gPSAod2luZG93LmlubmVySGVpZ2h0IC0gKG1vdXNlWSArIDEwKSkgKyBcInB4XCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGlzcGxheVN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICB9O1xyXG4gICAgRmxvd0NvbnRleHRNZW51LnByb3RvdHlwZS5zaG93Q29udGV4dE1lbnUgPSBmdW5jdGlvbiAobW91c2VYLCBtb3VzZVksIG1lbnVJdGVtcykge1xyXG4gICAgICAgIGlmIChtZW51SXRlbXMuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgdmFyIG1lbnVJdGVtQXJyYXlfMSA9IFtdO1xyXG4gICAgICAgICAgICBtZW51SXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgbWVudUl0ZW1BcnJheV8xLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLm1lbnVJdGVtcyA9IG1lbnVJdGVtQXJyYXlfMTtcclxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkNvbnRleHRNZW51KG1vdXNlWCwgbW91c2VZKTtcclxuICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGbG93Q29udGV4dE1lbnUucHJvdG90eXBlLmhpZGVDb250ZXh0TWVudSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmRpc3BsYXlTdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgdGhpcy5tZW51SXRlbXMgPSBbXTtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0NvbnRleHRNZW51LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiY21cIiwgb25Nb3VzZUxlYXZlOiB0aGlzLmhpZGVDb250ZXh0TWVudSwgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMuZGlzcGxheVN0eWxlLmxlZnQsXHJcbiAgICAgICAgICAgICAgICByaWdodDogdGhpcy5kaXNwbGF5U3R5bGUucmlnaHQsXHJcbiAgICAgICAgICAgICAgICB0b3A6IHRoaXMuZGlzcGxheVN0eWxlLnRvcCxcclxuICAgICAgICAgICAgICAgIGJvdHRvbTogdGhpcy5kaXNwbGF5U3R5bGUuYm90dG9tLFxyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogdGhpcy5kaXNwbGF5U3R5bGUuZGlzcGxheVxyXG4gICAgICAgICAgICB9LCByZWY6IGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiAoX3RoaXMuc2V0TWVudShlbGVtZW50KSk7IH0gfSxcclxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInVsXCIsIHsgY2xhc3NOYW1lOiBcImNtLWxpc3RcIiB9LCB0aGlzLm1lbnVJdGVtcykpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmxvd0NvbnRleHRNZW51O1xyXG59KFJlYWN0LkNvbXBvbmVudCkpO1xyXG5leHBvcnRzLmRlZmF1bHQgPSBGbG93Q29udGV4dE1lbnU7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBGbG93RGlzcGxheUNvbHVtbiwgRmxvd09iamVjdERhdGEsIEZsb3dPYmplY3REYXRhUHJvcGVydHksIG1vZGFsRGlhbG9nQnV0dG9uIH0gZnJvbSBcImZsb3ctY29tcG9uZW50LW1vZGVsXCI7XHJcbmltcG9ydCBDb2x1bW5GaWx0ZXIgZnJvbSBcIi4vQ29sdW1uRmlsdGVyXCI7XHJcbmltcG9ydCBTZWFyY2hGaWx0ZXJUYWJsZSBmcm9tIFwiLi9TZWFyY2hGaWx0ZXJUYWJsZVwiO1xyXG5pbXBvcnQgRmlsdGVyQ29uZmlnRm9ybSBmcm9tIFwiLi9GaWx0ZXJDb25maWdGb3JtXCI7XHJcbmltcG9ydCBDb2x1bW5Dcml0ZXJpYSwgeyBlQ29sdW1uQ29tcGFyYXRvciB9IGZyb20gXCIuL0NvbHVtbkNyaXRlcmlhXCI7XHJcbmltcG9ydCBSb3dJdGVtIGZyb20gXCIuL1Jvd0l0ZW1cIjtcclxuXHJcbmV4cG9ydCBlbnVtIGVGaWx0ZXJFdmVudCB7XHJcbiAgICBub25lID0gMCxcclxuICAgIHNvcnQgPSAxLFxyXG4gICAgZmlsdGVyID0gMlxyXG59XHJcblxyXG5leHBvcnQgZW51bSBlU29ydERpcmVjdGlvbiB7XHJcbiAgICBub25lID0gMCxcclxuICAgIGFzY2VuZGluZyA9IDEsXHJcbiAgICBkZXNjZW5kaW5nID0gLTFcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sdW1uRmlsdGVycyB7XHJcbiAgICBcclxuICAgIHByaXZhdGUgaXRlbXM6IE1hcDxzdHJpbmcsQ29sdW1uRmlsdGVyPiA9IG5ldyBNYXAoKTtcclxuICAgIHBhcmVudDogU2VhcmNoRmlsdGVyVGFibGU7XHJcblxyXG4gICAgZGlhbG9nOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGFyZW50OiBTZWFyY2hGaWx0ZXJUYWJsZSkge1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG5cclxuICAgICAgICB0aGlzLm5vdGlmeSA9IHRoaXMubm90aWZ5LmJpbmQodGhpcyk7XHJcblxyXG4gICAgICAgIHRoaXMuZ2V0U29ydEljb24gPSB0aGlzLmdldFNvcnRJY29uLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5nZXRGaWx0ZXJJY29uID0gdGhpcy5nZXRGaWx0ZXJJY29uLmJpbmQodGhpcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc29ydENsaWNrZWQgPSB0aGlzLnNvcnRDbGlja2VkLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJDbGlja2VkID0gdGhpcy5maWx0ZXJDbGlja2VkLmJpbmQodGhpcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc2F2ZUZpbHRlciA9IHRoaXMuc2F2ZUZpbHRlci5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY2FuY2VsRmlsdGVyID0gdGhpcy5jYW5jZWxGaWx0ZXIuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5tYXRjaGVzQ3JpdGVyaWEgPSB0aGlzLm1hdGNoZXNDcml0ZXJpYS5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHN0b3JlcyAvIGRlbGV0ZXMgYSByZWYgdG8gdGhlIGNoaWxkIGRpYWxvZyBjb21wb25lbnRcclxuICAgIHNldERpYWxvZyhlbGVtZW50OiBhbnkpIHtcclxuICAgICAgICB0aGlzLmRpYWxvZyA9IGVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdGhpcyBpcyBjYWxsZWQgd2hlbiBpbmRpdmlkdWFsIGZpbHRlcnMgY2hhbmdlXHJcbiAgICBub3RpZnkoa2V5OiBzdHJpbmcsIGV2ZW50OiBlRmlsdGVyRXZlbnQpIHtcclxuICAgICAgICB0aGlzLnBhcmVudC5maWx0ZXJzQ2hhbmdlZChrZXksZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldChrZXk6IHN0cmluZykgOiBDb2x1bW5GaWx0ZXIge1xyXG4gICAgICAgIGlmKHRoaXMuaXRlbXMuaGFzKGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuZ2V0KGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoYXMoa2V5OiBzdHJpbmcpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYodGhpcy5pdGVtcy5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc29ydENsaWNrZWQoa2V5OiBzdHJpbmcpe1xyXG4gICAgICAgIGlmKCF0aGlzLml0ZW1zLmhhcyhrZXkpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMuc2V0KGtleSxuZXcgQ29sdW1uRmlsdGVyKGtleSx0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbTogQ29sdW1uRmlsdGVyKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGV4Y2x1ZGUgY3VycmVudFxyXG4gICAgICAgICAgICBpZihpdGVtLmtleSAhPT0ga2V5KSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtLnNvcnROb25lKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIHRoaXMuaXRlbXMuZ2V0KGtleSkuc29ydFRvZ2dsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHRoZSBmaWx0ZXIgYnV0dG9uIHdhcyBwcmVzc2VkXHJcbiAgICBmaWx0ZXJDbGlja2VkKGtleTogc3RyaW5nKXtcclxuXHJcbiAgICAgICAgY29uc3Qgcm9vdDogU2VhcmNoRmlsdGVyVGFibGUgPSB0aGlzLnBhcmVudDtcclxuICAgICAgICBpZighdGhpcy5pdGVtcy5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1zLnNldChrZXksbmV3IENvbHVtbkZpbHRlcihrZXksdGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGxldCBjb2w6IEZsb3dEaXNwbGF5Q29sdW1uID0gdGhpcy5wYXJlbnQuY29sTWFwLmdldChrZXkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMucGFyZW50Lm1lc3NhZ2VCb3guc2hvd01lc3NhZ2VCb3goXCJGaWx0ZXIgXCIgKyBjb2wubGFiZWwsXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIDxGaWx0ZXJDb25maWdGb3JtIFxyXG4gICAgICAgICAgICAgICAgICAgIHJvb3Q9e3Jvb3R9XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50PXt0aGlzfVxyXG4gICAgICAgICAgICAgICAgICAgIGtleT17a2V5fVxyXG4gICAgICAgICAgICAgICAgICAgIGRldmVsb3Blck5hbWU9e2tleX1cclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI9e3RoaXMuaXRlbXMuZ2V0KGtleSl9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVmPXsoZWxlbWVudDogRmlsdGVyQ29uZmlnRm9ybSkgPT4ge3RoaXMuc2V0RGlhbG9nKGVsZW1lbnQpIH19XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgICBbbmV3IG1vZGFsRGlhbG9nQnV0dG9uKFwiQXBwbHlcIix0aGlzLnNhdmVGaWx0ZXIpLG5ldyBtb2RhbERpYWxvZ0J1dHRvbihcIkNhbmNlbFwiLHRoaXMuY2FuY2VsRmlsdGVyKV0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbHRlckNsZWFyKGtleTogc3RyaW5nKXtcclxuICAgICAgICB0aGlzLml0ZW1zLmdldChrZXkpLmNsZWFyRmlsdGVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmVGaWx0ZXIoKSB7XHJcbiAgICAgICAgbGV0IGtleTogc3RyaW5nID0gdGhpcy5kaWFsb2cuZmlsdGVyLmtleTtcclxuICAgICAgICB0aGlzLmRpYWxvZy5maWx0ZXIuY3JpdGVyaWEgPSB0aGlzLmRpYWxvZy5uZXdDcml0ZXJpYTtcclxuICAgICAgICB0aGlzLml0ZW1zLnNldChrZXksdGhpcy5kaWFsb2cuZmlsdGVyKTtcclxuICAgICAgICB0aGlzLmRpYWxvZz11bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQubWVzc2FnZUJveC5oaWRlTWVzc2FnZUJveCgpO1xyXG4gICAgICAgIHRoaXMubm90aWZ5KGtleSxlRmlsdGVyRXZlbnQuZmlsdGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBjYW5jZWxGaWx0ZXIoKSB7XHJcbiAgICAgICAgbGV0IGtleTogc3RyaW5nID0gdGhpcy5kaWFsb2cuZmlsdGVyLmtleTtcclxuICAgICAgICB0aGlzLmRpYWxvZz11bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQubWVzc2FnZUJveC5oaWRlTWVzc2FnZUJveCgpO1xyXG4gICAgICAgIHRoaXMubm90aWZ5KGtleSxlRmlsdGVyRXZlbnQuZmlsdGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTb3J0SWNvbihrZXk6IHN0cmluZykgOiBhbnkge1xyXG4gICAgICAgIGlmKHRoaXMuaXRlbXMuaGFzKGtleSkpIHtcclxuICAgICAgICAgICAgc3dpdGNoKHRoaXMuaXRlbXMuZ2V0KGtleSkuc29ydCl7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVTb3J0RGlyZWN0aW9uLm5vbmU6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtY29sdW1uLWhlYWRlci1mbGFnIGdseXBoaWNvbiBnbHlwaGljb24tYmFuLWNpcmNsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7dGhpcy5zb3J0Q2xpY2tlZChrZXkpfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiTm90IHNvcnRlZCAtIGNsaWNrIHRvIHRvZ2dsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAvL3JldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVTb3J0RGlyZWN0aW9uLmFzY2VuZGluZzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jb2x1bW4taGVhZGVyLWZsYWcgc2Z0LWNvbHVtbi1oZWFkZXItZmxhZy1ob3QgZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy11cFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7dGhpcy5zb3J0Q2xpY2tlZChrZXkpfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiQXNjZW5kaW5nIC0gY2xpY2sgdG8gdG9nZ2xlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBlU29ydERpcmVjdGlvbi5kZXNjZW5kaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNvbHVtbi1oZWFkZXItZmxhZyBzZnQtY29sdW1uLWhlYWRlci1mbGFnLWhvdCBnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LWRvd25cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGU6IGFueSkgPT4ge3RoaXMuc29ydENsaWNrZWQoa2V5KX19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIkRlc2NlbmRpbmcgLSBjbGljayB0byB0b2dnbGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICA8c3BhbiBcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtY29sdW1uLWhlYWRlci1mbGFnIGdseXBoaWNvbiBnbHlwaGljb24tYmFuLWNpcmNsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGU6IGFueSkgPT4ge3RoaXMuc29ydENsaWNrZWQoa2V5KX19XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJOb3Qgc29ydGVkIC0gY2xpY2sgdG8gdG9nZ2xlXCJcclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldEZpbHRlckljb24oa2V5OiBzdHJpbmcpIDogYW55IHtcclxuICAgICAgICBpZih0aGlzLml0ZW1zLmhhcyhrZXkpICYmIHRoaXMuaXRlbXMuZ2V0KGtleSkuY3JpdGVyaWE/Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxGcmFnbWVudD5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNvbHVtbi1oZWFkZXItYnV0dG9uIHNmdC1jb2x1bW4taGVhZGVyLWJ1dHRvbi1ob3QgZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2hcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7dGhpcy5maWx0ZXJDbGlja2VkKGtleSl9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIkNoYW5nZSBmaWx0ZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgIC8+LFxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtY29sdW1uLWhlYWRlci1idXR0b24gc2Z0LWNvbHVtbi1oZWFkZXItYnV0dG9uLWhvdCBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlOiBhbnkpID0+IHt0aGlzLmZpbHRlckNsZWFyKGtleSl9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIkNsZWFyIGZpbHRlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPHNwYW4gXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNvbHVtbi1oZWFkZXItYnV0dG9uIGdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoXCJcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7dGhpcy5maWx0ZXJDbGlja2VkKGtleSl9fVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdGhpcyB3aWxsIGZpbHRlciB0aGUgcGFzc2VkIHNvdXJjZSBtYXAgYmFzZWQgb24gdGhlIGN1cnJlbnQgZmlsdGVycyBhbmQgcmV0dXJuIGEgbmV3IG1hcCBvZiBtYXRjaGVzLlxyXG4gICAgZmlsdGVyKHNvdXJjZTogTWFwPHN0cmluZyxSb3dJdGVtPikgOiBNYXA8c3RyaW5nLFJvd0l0ZW0+IHtcclxuICAgICAgICBsZXQgbWF0Y2hlczogTWFwPHN0cmluZyxSb3dJdGVtPiA9IG5ldyBNYXAoKTtcclxuICAgICAgICBzb3VyY2UuZm9yRWFjaCgoaXRlbTogUm93SXRlbSwga2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgaWYodGhpcy5tYXRjaGVzQ3JpdGVyaWEoaXRlbSkpIHtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXMuc2V0KGtleSx1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXM7XHJcbiAgICAgICAgLy9yZXR1cm4gbmV3IE1hcChBcnJheS5mcm9tKHNvdXJjZSkuZmlsdGVyKHRoaXMubWF0Y2hlc0NyaXRlcmlhKSk7XHJcbiAgICB9XHJcblxyXG4gICAgbWF0Y2hlc0NyaXRlcmlhKHZhbHVlOiBSb3dJdGVtKSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCBvYmpEYXRhOiBGbG93T2JqZWN0RGF0YSA9IHZhbHVlLm9iamVjdERhdGE7XHJcbiAgICAgICAgbGV0IG1hdGNoZXM6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBlYWNoIGl0ZW0gcmVwcmVzZW50cyBhIGNvbHVtblxyXG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbTogQ29sdW1uRmlsdGVyKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGVhY2ggY3JpdGVyaWEgbmVlZHMgdG8gcGFzc1xyXG4gICAgICAgICAgICBpdGVtLmNyaXRlcmlhLmZvckVhY2goKGNyaXRlcmlhOiBDb2x1bW5Dcml0ZXJpYSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbDogc3RyaW5nID0gKG9iakRhdGEucHJvcGVydGllc1tpdGVtLmtleV0udmFsdWUgYXMgc3RyaW5nKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNyaXQ6IHN0cmluZztcclxuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBjcml0ZXJpYS52YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNyaXQgPSAoY3JpdGVyaWEudmFsdWUgYXMgc3RyaW5nKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc3dpdGNoKGNyaXRlcmlhLmNvbXBhcmF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGVDb2x1bW5Db21wYXJhdG9yLmVxdWFsVG86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbCAhPT0gY3JpdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcz1mYWxzZTsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlQ29sdW1uQ29tcGFyYXRvci5ub3RFcXVhbFRvOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih2YWwgPT09IGNyaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXM9ZmFsc2U7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZUNvbHVtbkNvbXBhcmF0b3IuY29udGFpbnM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbC5pbmRleE9mKGNyaXQpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcz1mYWxzZTsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlQ29sdW1uQ29tcGFyYXRvci5zdGFydHNXaXRoOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighdmFsLnN0YXJ0c1dpdGgoY3JpdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXM9ZmFsc2U7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZUNvbHVtbkNvbXBhcmF0b3IuZW5kc1dpdGg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCF2YWwuZW5kc1dpdGgoY3JpdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXM9ZmFsc2U7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZUNvbHVtbkNvbXBhcmF0b3Iubm90Q29udGFpbnM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbC5pbmRleE9mKGNyaXQpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXM9ZmFsc2U7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZUNvbHVtbkNvbXBhcmF0b3IuaW46XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY3JpdGVyaWEudmFsdWUgd2lsbCBiZSBhIG1hcCBvZiBhbGxvd2FibGUgdmFsdWVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCEgY3JpdGVyaWEudmFsdWUuaGFzKG9iakRhdGEucHJvcGVydGllc1tpdGVtLmtleV0udmFsdWUgYXMgc3RyaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcz1mYWxzZTsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlQ29sdW1uQ29tcGFyYXRvci5ub3RJbjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jcml0ZXJpYS52YWx1ZSB3aWxsIGJlIGEgbWFwIG9mIGFsbG93YWJsZSB2YWx1ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY3JpdGVyaWEudmFsdWUuaGFzKG9iakRhdGEucHJvcGVydGllc1tpdGVtLmtleV0udmFsdWUgYXMgc3RyaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcz1mYWxzZTsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICBcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzPWZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gbWF0Y2hlcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRTb3J0Q29sdW1uKCkgOiBDb2x1bW5GaWx0ZXIge1xyXG4gICAgICAgIGxldCBzb3J0Q29sdW1uIDogQ29sdW1uRmlsdGVyO1xyXG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoY29sIDogQ29sdW1uRmlsdGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKGNvbC5zb3J0ICE9PSBlU29ydERpcmVjdGlvbi5ub25lKSB7XHJcbiAgICAgICAgICAgICAgICBzb3J0Q29sdW1uID0gY29sO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHNvcnRDb2x1bW47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdGhpcyB3aWxsIHNvcnQgdGhlIHBhc3NlZCBtYXAgYmFzZWQgb24gdGhlIGN1cnJlbnQgZmlsdGVyJ3Mgc29ydHMgYW5kIHJldHVybiBhIG5ldyBtYXBcclxuICAgIHNvcnQoaXRlbXM6IE1hcDxzdHJpbmcsUm93SXRlbT4sc291cmNlOiBNYXA8c3RyaW5nLFJvd0l0ZW0+KSA6IE1hcDxzdHJpbmcsUm93SXRlbT4ge1xyXG4gICAgICAgIGxldCBzb3J0Q29sdW1uIDogQ29sdW1uRmlsdGVyID0gdGhpcy5nZXRTb3J0Q29sdW1uKCk7XHJcblxyXG4gICAgICAgIGxldCBjYW5kaWRhdGVzOiBNYXA8c3RyaW5nLFJvd0l0ZW0+ID0gbmV3IE1hcChBcnJheS5mcm9tKHNvdXJjZSkuZmlsdGVyKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBpZihpdGVtcy5oYXMoaXRlbVswXSkpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoc29ydENvbHVtbikge1xyXG4gICAgICAgICAgICBsZXQgY29sRGVmID0gdGhpcy5wYXJlbnQuY29sTWFwLmdldChzb3J0Q29sdW1uLmtleSk7XHJcbiAgICAgICAgICAgIHZhciBjb2xsYXRvciA9IG5ldyBJbnRsLkNvbGxhdG9yKHVuZGVmaW5lZCwge251bWVyaWM6IHRydWUsIHNlbnNpdGl2aXR5OiAnYmFzZSd9KTtcclxuICAgICAgICAgICAgbGV0IHNvcnRlZDogYW55ID0gQXJyYXkuZnJvbShjYW5kaWRhdGVzKS5zb3J0KChhOiBhbnksYjogYW55KSA9PiBcclxuICAgICAgICAgICAgICAgIGNvbGxhdG9yLmNvbXBhcmUoYVsxXS5vYmplY3REYXRhLnByb3BlcnRpZXNbc29ydENvbHVtbi5rZXldLnZhbHVlLGJbMV0ub2JqZWN0RGF0YS5wcm9wZXJ0aWVzW3NvcnRDb2x1bW4ua2V5XS52YWx1ZSlcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGlmKHNvcnRDb2x1bW4uc29ydCA9PT0gZVNvcnREaXJlY3Rpb24uZGVzY2VuZGluZykge1xyXG4gICAgICAgICAgICAgICAgc29ydGVkID0gc29ydGVkLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbGV0IHJlc3VsdHM6IE1hcDxzdHJpbmcsUm93SXRlbT4gPSBuZXcgTWFwKHNvcnRlZCk7XHJcbiAgICAgICAgICAgIHJlc3VsdHMuZm9yRWFjaCgoaXRlbTogUm93SXRlbSwga2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdHMuc2V0KGtleSx1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHNcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJcclxuZXhwb3J0IGVudW0gZUNvbHVtbkNvbXBhcmF0b3Ige1xyXG4gICAgZXF1YWxUbyxcclxuICAgIG5vdEVxdWFsVG8sXHJcbiAgICBzdGFydHNXaXRoLFxyXG4gICAgZW5kc1dpdGgsXHJcbiAgICBjb250YWlucyxcclxuICAgIG5vdENvbnRhaW5zLFxyXG4gICAgaW4sXHJcbiAgICBub3RJblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2x1bW5Dcml0ZXJpYSB7XHJcbiAgICBjb21wYXJhdG9yOiBlQ29sdW1uQ29tcGFyYXRvcjtcclxuICAgIHZhbHVlOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY29tcGFyYXRvcjogZUNvbHVtbkNvbXBhcmF0b3IsIHZhbHVlOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmNvbXBhcmF0b3I9Y29tcGFyYXRvcjtcclxuICAgICAgICB0aGlzLnZhbHVlPXZhbHVlO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0ICogZnJvbSAnLi9TZWFyY2hGaWx0ZXJUYWJsZSc7IiwiaW1wb3J0IFJlYWN0LCB7IENTU1Byb3BlcnRpZXMgfSBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgeyBlTG9hZGluZ1N0YXRlLCBGbG93Q29tcG9uZW50LCBGbG93T2JqZWN0RGF0YUFycmF5LCBGbG93T2JqZWN0RGF0YSwgRmxvd091dGNvbWUsICBGbG93RGlzcGxheUNvbHVtbiwgRmxvd01lc3NhZ2VCb3gsIG1vZGFsRGlhbG9nQnV0dG9uIH0gZnJvbSAnZmxvdy1jb21wb25lbnQtbW9kZWwnO1xyXG5pbXBvcnQgRmxvd0NvbnRleHRNZW51IGZyb20gJ2Zsb3ctY29tcG9uZW50LW1vZGVsL2xpYi9EaWFsb2dzL0Zsb3dDb250ZXh0TWVudSc7XHJcbmltcG9ydCBSb3dJdGVtIGZyb20gJy4vUm93SXRlbSc7XHJcbmltcG9ydCBDZWxsSXRlbSBmcm9tICcuL0NlbGxJdGVtJztcclxuaW1wb3J0IFNlYXJjaEZpbHRlclRhYmxlUm93IGZyb20gJy4vU2VhcmNoRmlsdGVyVGFibGVSb3cnO1xyXG5pbXBvcnQgJy4vU2VhcmNoRmlsdGVyVGFibGUuY3NzJztcclxuaW1wb3J0IFNlYXJjaEZpbHRlclRhYmxlSGVhZGVycyBmcm9tICcuL1NlYXJjaEZpbHRlclRhYmxlSGVhZGVycyc7XHJcbmltcG9ydCBDb2x1bW5GaWx0ZXJzLCB7IGVGaWx0ZXJFdmVudCwgZVNvcnREaXJlY3Rpb24gfSBmcm9tICcuL0NvbHVtbkZpbHRlcnMnO1xyXG5pbXBvcnQgU2VhcmNoRmlsdGVyVGFibGVGb290ZXIgZnJvbSAnLi9TZWFyY2hGaWx0ZXJUYWJsZUZvb3Rlcic7XHJcbmltcG9ydCBNb2RlbEV4cG9ydGVyIGZyb20gJy4vTW9kZWxFeHBvcnRlcic7XHJcbmltcG9ydCBTZWFyY2hGaWx0ZXJUYWJsZUhlYWRlckJ1dHRvbnMgZnJvbSAnLi9TZWFyY2hGaWx0ZXJUYWJsZUhlYWRlckJ1dHRvbnMnO1xyXG5pbXBvcnQgU2VhcmNoRmlsdGVyVGFibGVSaWJib24gZnJvbSAnLi9TZWFyY2hGaWx0ZXJUYWJsZVJpYmJvbic7XHJcblxyXG5cclxuLy9kZWNsYXJlIGNvbnN0IG1hbnl3aG86IElNYW55d2hvO1xyXG5kZWNsYXJlIGNvbnN0IG1hbnl3aG86IGFueTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaEZpbHRlclRhYmxlIGV4dGVuZHMgRmxvd0NvbXBvbmVudCB7XHJcbiAgICB2ZXJzaW9uOiBzdHJpbmc9XCIxLjAuMFwiO1xyXG4gICAgY29udGV4dDogYW55O1xyXG4gICBcclxuICAgIGNvbnRleHRNZW51OiBGbG93Q29udGV4dE1lbnU7XHJcbiAgICBtZXNzYWdlQm94OiBGbG93TWVzc2FnZUJveDtcclxuICAgXHJcbiAgICAvLyB0aGlzIGNvbnRhaW5zIHRoZSBtYXN0ZXIgY29weSBvZiB0aGUgbW9kZWwgZGF0YSwgaXQgZG9lc24ndCBjaGFuZ2UgdW5sZXNzIGRhdGEgcmVsb2FkZWRcclxuICAgIHJvd01hcDogTWFwPHN0cmluZyxhbnk+ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIC8vIHRoaXMgY29udGFpbnMgdGhlIGRpc3BsYXkgdGltZSBzdWJzZXQgb2Ygcm93TWFwIHdoaWNoIGlzIGZpbHRlcmVkICYgc29ydGVkLCBpdCBjaGFuZ2VzIHdpdGggZWFjaCBxdWVyeSBldGMsICBVc2VkIHRvIGJ1aWxkIHRoZSBhY3R1YWwgcm93c1xyXG4gICAgY3VycmVudFJvd01hcDogTWFwPHN0cmluZyxhbnk+ID0gbmV3IE1hcCgpO1xyXG4gICAgLy9jdXJyZW50Um93TWFwOiBBcnJheTxzdHJpbmc+ID0gW107Ly9NYXA8c3RyaW5nLGFueT4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgLy8gdGhpcyBob2xkcyB0aGUgbWF4IGl0ZW1zIHBlciBwYWdlXHJcbiAgICBtYXhQYWdlUm93czogbnVtYmVyID0gNTtcclxuXHJcbiAgICAvLyB0aGlzIGhvbGRzIHRoZSBpdGVtcyBpbiBwYWdlc1xyXG4gICAgY3VycmVudFJvd1BhZ2VzOiBBcnJheTxNYXA8c3RyaW5nLGFueT4+ID0gW107XHJcbiAgICBcclxuICAgIC8vIHRoaXMgaG9sZHMgdGhlIGN1cnJlbnQgcGFnaW5hdGlvbiBwYWdlIG51bWJlclxyXG4gICAgY3VycmVudFJvd1BhZ2U6IG51bWJlciA9IDA7XHJcblxyXG4gICAgLy8gdGhpcyBjb250YWlucyB0aGUgZGlzcGxheSB0aW1lIHN1YnNldCBvZiBjdXJyZW50Um93TWFwIHdoaWNoIGlzIHNlbGVjdGVkLCBlYWNoIHF1ZXJ5IHJlbW92ZXMgYW55IGl0ZW1zIG5vIGxvbmdlciBpbiByZXN1bHRzXHJcbiAgICBzZWxlY3RlZFJvd01hcDogTWFwPHN0cmluZyxhbnk+ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIC8vIHRoZXNlIGFyZSB0aGUgY2hpbGQgcm93IFJlYWN0IG9iamVjdHMsIHRoZXkgYXJlIHJlLXBvcHVsYXRlZCB3aXRoIGVhY2ggZmlsdGVyLCBzZWFyY2ggZXRjXHJcbiAgICByb3dzOiBNYXA8c3RyaW5nLFNlYXJjaEZpbHRlclRhYmxlUm93PiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICAvLyB0aGVzZSBhcmUgdGhlIGh0bWwgY2hpbGQgZWxlbWVudHMgdXNlZCBpbiByZW5kZXIuICBCdWlsdCBmcm9tIGN1cnJlbnRSb3dNYXBcclxuICAgIHJvd0VsZW1lbnRzOiBhbnlbXTtcclxuXHJcbiAgICAvLyB0aGlzIGlzIHRoZSBjb2x1bW4gZGVmaW5pdGlvbiBtYXAsIGl0IGRvZXNuJ3QgY2hhbmdlIHVubGVzcyBkYXRhIHJlbG9hZGVkXHJcbiAgICBjb2xNYXA6IE1hcDxzdHJpbmcsRmxvd0Rpc3BsYXlDb2x1bW4+ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIC8vIHRoaXMgaXMgdGhlIGNvbHVtbiB2YWx1ZSBtYXAsIGl0IGNvbmF0aW5zIGFsbCBwb3NzaWJsZSB2YWx1ZXMgZm9yIGVhY2ggY29sdW1uLCBpdCBkb2Vzbid0IGNoYW5nZSB1bmxlc3MgZGF0YSByZWxvYWRlZFxyXG4gICAgY29sVmFsTWFwOiBNYXA8c3RyaW5nLE1hcDxhbnksYW55Pj4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgLypcclxuICAgIC8vIHRoaXMgaXMgdGhlIHRpdGxlIGhlYWRlciBidXR0b25zIFJlYWN0IGNvbXBvbmVudFxyXG4gICAgaGVhZGVyQnV0dG9uczogU2VhcmNoRmlsdGVyVGFibGVIZWFkZXJCdXR0b25zO1xyXG5cclxuICAgIC8vIHRoaXMgaXMgdGhlIHRpdGxlIGhlYWRlciBidXR0b25zIGh0bWwgZWxlbWVudFxyXG4gICAgaGVhZGVyQnV0dG9uc0VsZW1lbnQ6IGFueTtcclxuKi9cclxuICAgIC8vIHRoaXMgaXMgdGhlIHRhYmxlIGhlYWRlcnMgUmVhY3QgY29tcG9uZW50XHJcbiAgICBoZWFkZXJzOiBTZWFyY2hGaWx0ZXJUYWJsZUhlYWRlcnM7XHJcblxyXG4gICAgLy8gdGhpcyBpcyB0aGUgdGFibGUgaGVhZGVycyBodG1sIGVsZW1lbnRcclxuICAgIGhlYWRlcnNFbGVtZW50OiBhbnk7XHJcblxyXG4gICAgLy8gdGhpcyBpcyB0aGUgZm9vdGVyIFJlYWN0IGNvbXBvbmVudFxyXG4gICAgcmliYm9uOiBTZWFyY2hGaWx0ZXJUYWJsZVJpYmJvbjtcclxuXHJcbiAgICAvLyB0aGlzIGlzIHRoZSBmb290ZXIgaHRtbCBlbGVtZW50XHJcbiAgICByaWJib25FbGVtZW50OiBhbnk7XHJcblxyXG4gICAgLy8gdGhpcyBpcyB0aGUgZm9vdGVyIFJlYWN0IGNvbXBvbmVudFxyXG4gICAgZm9vdGVyOiBTZWFyY2hGaWx0ZXJUYWJsZUhlYWRlcnM7XHJcblxyXG4gICAgLy8gdGhpcyBpcyB0aGUgZm9vdGVyIGh0bWwgZWxlbWVudFxyXG4gICAgZm9vdGVyRWxlbWVudDogYW55O1xyXG5cclxuICAgIC8vIHRoZXNlIGFyZSB0aGUgY2hpbGQgY29sdW1uIFJlYWN0IG9iamVjdHMsIGl0IGRvZXNuJ3QgY2hhbmdlIHVubGVzcyBkYXRhIHJlbG9hZGVkXHJcbiAgICBjb2xzOiBNYXA8c3RyaW5nLGFueT4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgLy8gdGhlc2UgYXJlIHRoZSBodG1sIGNvbHVtbiBoZWFkZXIgY2hpbGQgZWxlbWVudHMgdXNlZCBpbiByZW5kZXIuICBCdWlsdCBmcm9tIGNvbE1hcFxyXG4gICAgY29sRWxlbWVudHM6IGFueVtdO1xyXG5cclxuICAgIC8vIGNvbnRlbnQgaG9sZGVyIHRvIGF2b2lkIGJsYW5rIHBhZ2VzIGR1cmluZyBtb3ZlcyBcclxuICAgIGxhc3RDb250ZW50OiBhbnkgPSAoPGRpdj48L2Rpdj4pO1xyXG5cclxuICAgIC8vIHRoZXNlIGFyZSB0aGUgZmlsdGVyICYgc29ydCBjb250cm9sbGVyc1xyXG4gICAgZmlsdGVyczogQ29sdW1uRmlsdGVycyA9IG5ldyBDb2x1bW5GaWx0ZXJzKHRoaXMpO1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlTWVzc2FnZSA9IHRoaXMuaGFuZGxlTWVzc2FnZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZmxvd01vdmVkID0gdGhpcy5mbG93TW92ZWQuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLnNob3dDb250ZXh0TWVudSA9IHRoaXMuc2hvd0NvbnRleHRNZW51LmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5oaWRlQ29udGV4dE1lbnUgPSB0aGlzLmhpZGVDb250ZXh0TWVudS5iaW5kKHRoaXMpOyAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5idWlsZENvcmVUYWJsZSA9IHRoaXMuYnVpbGRDb3JlVGFibGUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmJ1aWxkUmliYm9uID0gdGhpcy5idWlsZFJpYmJvbi5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuYnVpbGRGb290ZXIgPSB0aGlzLmJ1aWxkRm9vdGVyLmJpbmQodGhpcyk7XHJcblxyXG4gICAgICAgIHRoaXMuZmlsdGVyc0NoYW5nZWQgPSB0aGlzLmZpbHRlcnNDaGFuZ2VkLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy50b2dnbGVTZWxlY3QgPSB0aGlzLnRvZ2dsZVNlbGVjdC5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLmZpcnN0UGFnZSA9IHRoaXMuZmlyc3RQYWdlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5wcmV2aW91c1BhZ2UgPSB0aGlzLnByZXZpb3VzUGFnZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMubmV4dFBhZ2UgPSB0aGlzLm5leHRQYWdlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5sYXN0UGFnZSA9IHRoaXMubGFzdFBhZ2UuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5kb0V4cG9ydCA9IHRoaXMuZG9FeHBvcnQuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5tYXhQYWdlUm93cyA9IHBhcnNlSW50KHRoaXMuZ2V0QXR0cmlidXRlKFwiUGFnaW5hdGlvblNpemVcIix1bmRlZmluZWQpIHx8IFwiMTBcIiApO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbHRlcnNDaGFuZ2VkKGtleTogc3RyaW5nLCBldmVudDogZUZpbHRlckV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5oZWFkZXJzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgc3dpdGNoKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGNhc2UgZUZpbHRlckV2ZW50LnNvcnQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNvcnRSb3dzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2luYXRlUm93cygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idWlsZFRhYmxlUm93cygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlIGVGaWx0ZXJFdmVudC5maWx0ZXI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlclJvd3MoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc29ydFJvd3MoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFnaW5hdGVSb3dzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkVGFibGVSb3dzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc3RvcmVzIC8gZGVsZXRlcyBhIHJlZiB0byBhIHRhYmxlIHJvdyBhcyBpdCdzIGNyZWF0ZWQgb3IgZGVzdHJveWVkXHJcbiAgICBzZXRSb3coa2V5OiBzdHJpbmcsIGVsZW1lbnQ6IFNlYXJjaEZpbHRlclRhYmxlUm93KSB7XHJcbiAgICAgICAgaWYoZWxlbWVudCl7XHJcbiAgICAgICAgICAgIHRoaXMucm93cy5zZXQoa2V5LCBlbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMucm93cy5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yb3dzLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHN0b3JlcyAvIGRlbGV0ZXMgYSByZWYgdG8gdGhlIGNvbHVtbiBoZWFkZXJzXHJcbiAgICBzZXRSaWJib24oZWxlbWVudDogU2VhcmNoRmlsdGVyVGFibGVSaWJib24pIHtcclxuICAgICAgICB0aGlzLnJpYmJvbiA9IGVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc3RvcmVzIC8gZGVsZXRlcyBhIHJlZiB0byB0aGUgY29sdW1uIGhlYWRlcnNcclxuICAgIHNldEhlYWRlcnMoZWxlbWVudDogU2VhcmNoRmlsdGVyVGFibGVIZWFkZXJzKSB7XHJcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gZWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBzdG9yZXMgLyBkZWxldGVzIGEgcmVmIHRvIHRoZSBmb290ZXIgY29tcG9uZW50XHJcbiAgICBzZXRGb290ZXIoZWxlbWVudDogU2VhcmNoRmlsdGVyVGFibGVGb290ZXIpIHtcclxuICAgICAgICB0aGlzLmZvb3RlciA9IGVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gXHJcbiAgICBhc3luYyBmbG93TW92ZWQoeGhyOiBhbnksIHJlcXVlc3Q6IGFueSkge1xyXG4gICAgICAgIGxldCBtZTogYW55ID0gdGhpcztcclxuICAgICAgICBpZih4aHIuaW52b2tlVHlwZT09PVwiRk9SV0FSRFwiKSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMubG9hZGluZ1N0YXRlICE9PSBlTG9hZGluZ1N0YXRlLnJlYWR5KXtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge21lLmZsb3dNb3ZlZCh4aHIsIHJlcXVlc3QpfSw1MDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idWlsZENvcmVUYWJsZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJSb3dzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNvcnRSb3dzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkVGFibGVSb3dzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgLy93aWxsIGdldCB0aGlzIGZyb20gYSBjb21wb25lbnQgYXR0cmlidXRlXHJcbiAgICAgICAgYXdhaXQgc3VwZXIuY29tcG9uZW50RGlkTW91bnQoKTtcclxuICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5hZGREb25lTGlzdGVuZXIodGhpcy5mbG93TW92ZWQsIHRoaXMuY29tcG9uZW50SWQpO1xyXG4gICAgICAgIC8vIGJ1aWxkIHRyZWVcclxuICAgICAgICB0aGlzLmJ1aWxkQ29yZVRhYmxlKCk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJSb3dzKCk7XHJcbiAgICAgICAgdGhpcy5zb3J0Um93cygpO1xyXG4gICAgICAgIHRoaXMuYnVpbGRUYWJsZVJvd3MoKTtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICBhc3luYyBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgICAgICBhd2FpdCBzdXBlci5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xyXG4gICAgICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLnJlbW92ZURvbmVMaXN0ZW5lcih0aGlzLmNvbXBvbmVudElkKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gcmVhZHMgdGhlIG1vZGVsXHJcbiAgICAvLyBjb25zdHJ1Y3RzIHRoZSBhIGZsYXQgYSBtYXAgb2Ygcm93cyByZWFkeSBmb3Igc2VhcmNoaW5nLCBzb3J0aW5nIGFuZCBkaXJlY3QgYWNjZXNzXHJcbiAgICAvLyBhbHNvIGJ1aWxkcyB0aGUgZGlzcGxheSBjb2x1bW4gbWFwXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICBidWlsZENvcmVUYWJsZSgpe1xyXG4gICAgICAgIHRoaXMucm93TWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMucm93cyA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICAgICAgLy9zb3J0IGRpc3BsYXkgY29scyBvbiBvcmRlclxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBjb2xzOiBBcnJheTxGbG93RGlzcGxheUNvbHVtbj4gPSB0aGlzLm1vZGVsLmRpc3BsYXlDb2x1bW5zLnNvcnQoKGE6IGFueSxiOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoKHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgYS5EaXNwbGF5T3JkZXIgPiBiLkRpc3BsYXlPcmRlcjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgICAgIGNhc2UgYS5EaXNwbGF5T3JkZXIgPT09IGIuRGlzcGxheU9yZGVyOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY29sTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGNvbHMuZm9yRWFjaCgoY29sOiBGbG93RGlzcGxheUNvbHVtbikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbE1hcC5zZXQoY29sLmRldmVsb3Blck5hbWUsIGNvbCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29sVmFsTWFwLnNldChjb2wuZGV2ZWxvcGVyTmFtZSwgbmV3IE1hcCgpKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMucmliYm9uRWxlbWVudCA9IChcclxuICAgICAgICAgICAgPFNlYXJjaEZpbHRlclRhYmxlUmliYm9uIFxyXG4gICAgICAgICAgICAgICAgcm9vdD17dGhpc31cclxuICAgICAgICAgICAgICAgIHJlZj17KGVsZW1lbnQ6IFNlYXJjaEZpbHRlclRhYmxlUmliYm9uKSA9PiB7dGhpcy5zZXRSaWJib24oZWxlbWVudCl9fVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuaGVhZGVyc0VsZW1lbnQgPSAoXHJcbiAgICAgICAgICAgIDxTZWFyY2hGaWx0ZXJUYWJsZUhlYWRlcnMgXHJcbiAgICAgICAgICAgICAgICByb290PXt0aGlzfVxyXG4gICAgICAgICAgICAgICAgcmVmPXsoZWxlbWVudDogU2VhcmNoRmlsdGVyVGFibGVIZWFkZXJzKSA9PiB7dGhpcy5zZXRIZWFkZXJzKGVsZW1lbnQpfX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmZvb3RlckVsZW1lbnQgPSAoXHJcbiAgICAgICAgICAgIDxTZWFyY2hGaWx0ZXJUYWJsZUZvb3RlciBcclxuICAgICAgICAgICAgICAgIHJvb3Q9e3RoaXN9XHJcbiAgICAgICAgICAgICAgICByZWY9eyhlbGVtZW50OiBTZWFyY2hGaWx0ZXJUYWJsZUZvb3RlcikgPT4ge3RoaXMuc2V0Rm9vdGVyKGVsZW1lbnQpfX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMubW9kZWwuZGF0YVNvdXJjZS5pdGVtcy5mb3JFYWNoKChpdGVtOiBGbG93T2JqZWN0RGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAvL2NvbnN0cnVjdCBJdGVtXHJcbiAgICAgICAgICAgIGlmKGl0ZW0uaXNTZWxlY3RlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFJvd01hcC5zZXQoaXRlbS5pbnRlcm5hbElkLHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IG5vZGUgPSBuZXcgUm93SXRlbSgpO1xyXG4gICAgICAgICAgICBub2RlLmlkID0gaXRlbS5pbnRlcm5hbElkO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb2xNYXAuZm9yRWFjaCgoY29sOkZsb3dEaXNwbGF5Q29sdW1uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBub2RlLmNvbHVtbnMuc2V0KGNvbC5kZXZlbG9wZXJOYW1lLCBuZXcgQ2VsbEl0ZW0oY29sLmRldmVsb3Blck5hbWUsIGl0ZW0ucHJvcGVydGllc1tjb2wuZGV2ZWxvcGVyTmFtZV0/LnZhbHVlIGFzIGFueSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xWYWxNYXAuZ2V0KGNvbC5kZXZlbG9wZXJOYW1lKS5zZXQoaXRlbS5wcm9wZXJ0aWVzW2NvbC5kZXZlbG9wZXJOYW1lXT8udmFsdWUsaXRlbS5wcm9wZXJ0aWVzW2NvbC5kZXZlbG9wZXJOYW1lXT8udmFsdWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG5vZGUub2JqZWN0RGF0YSA9IGl0ZW07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJvd01hcC5zZXQobm9kZS5pZCxub2RlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gd2UganVzdCBsb2FkZWQgdGhlIGNvcmUgcm93IGRhdGEsIHRyaWdnZXIgdGhlIGZpbHRlcnMgdG8gZ2VuZXJhdGUgYW5kIHNvcnQgdGhlIGN1cnJlbnRSb3dNYXBcclxuICAgICAgICB0aGlzLmZpbHRlclJvd3MoKTtcclxuICAgICAgICB0aGlzLnNvcnRSb3dzKCk7XHJcbiAgICAgICAgdGhpcy5wYWdpbmF0ZVJvd3MoKTtcclxuXHJcbiAgICAgICAgdGhpcy5idWlsZFJpYmJvbigpO1xyXG4gICAgICAgIHRoaXMuYnVpbGRGb290ZXIoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gZmlsdGVycyB0aGUgY3VycmVudFJvd01hcFxyXG4gICAgZmlsdGVyUm93cygpIHtcclxuICAgICAgICBpZiAodGhpcy5yb3dNYXAuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Um93TWFwID0gdGhpcy5maWx0ZXJzLmZpbHRlcih0aGlzLnJvd01hcCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyByZW1vdmUgYW55IHNlbGVjdGVkIGl0ZW1zIG5vdCBpbiB0aGUgY3VycmVudFJvd01hcFxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRSb3dNYXAuZm9yRWFjaCgoaXRlbTogUm93SXRlbSwgaW50ZXJuYWxJZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmN1cnJlbnRSb3dNYXAuaGFzKGludGVybmFsSWQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93TWFwLmRlbGV0ZShpbnRlcm5hbElkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHNvcnRzIHRoZSBjdXJyZW50Um93TWFwIGJ5IGdldHRpbmcgdGhlIGN1cnJlbnQgc29ydCBjb2x1bW4gZnJvbSBmaWx0ZXJzXHJcbiAgICBzb3J0Um93cygpIHtcclxuICAgICAgICBcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50Um93TWFwLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFJvd01hcCA9IHRoaXMuZmlsdGVycy5zb3J0KHRoaXMuY3VycmVudFJvd01hcCwgdGhpcy5yb3dNYXApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyB0aGlzIGdvZXMgdGhyb3VnaCBjdXJyZW50Um93TWFwIGFuZCBzcGxpdHMgdGhlbSBpbnRvIHBhZ2VzIGJhc2VkIG9uIG1heFBhZ2VSb3dzXHJcbiAgICBwYWdpbmF0ZVJvd3MoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Um93UGFnZXMgPSBbXTtcclxuICAgICAgICBsZXQgY3VycmVudFBhZ2U6IE1hcDxzdHJpbmcsUm93SXRlbT4gPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Um93TWFwLmZvckVhY2goKGl0ZW06IFJvd0l0ZW0sa2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgaWYoY3VycmVudFBhZ2Uuc2l6ZSA8IHRoaXMubWF4UGFnZVJvd3MpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlLnNldChrZXksdW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFJvd1BhZ2VzLnB1c2goY3VycmVudFBhZ2UpO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2UgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZS5zZXQoa2V5LHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBhZGQgYW55IHN0cmFnZ2xlcnNcclxuICAgICAgICB0aGlzLmN1cnJlbnRSb3dQYWdlcy5wdXNoKGN1cnJlbnRQYWdlKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRSb3dQYWdlID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBmaXJzdFBhZ2UoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Um93UGFnZSA9IDA7XHJcbiAgICAgICAgdGhpcy5idWlsZFRhYmxlUm93cygpO1xyXG4gICAgICAgIHRoaXMuYnVpbGRSaWJib24oKTtcclxuICAgICAgICB0aGlzLmJ1aWxkRm9vdGVyKCk7XHJcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByZXZpb3VzUGFnZSgpIHtcclxuICAgICAgICBpZih0aGlzLmN1cnJlbnRSb3dQYWdlID4gMSkgeyB0aGlzLmN1cnJlbnRSb3dQYWdlIC09IDEgfSBlbHNlIHsgdGhpcy5jdXJyZW50Um93UGFnZSA9IDAgfTtcclxuICAgICAgICB0aGlzLmJ1aWxkVGFibGVSb3dzKCk7XHJcbiAgICAgICAgdGhpcy5idWlsZFJpYmJvbigpO1xyXG4gICAgICAgIHRoaXMuYnVpbGRGb290ZXIoKTtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmV4dFBhZ2UoKSB7XHJcbiAgICAgICAgaWYodGhpcy5jdXJyZW50Um93UGFnZSA8ICh0aGlzLmN1cnJlbnRSb3dQYWdlcy5sZW5ndGggLSAxKSkgeyB0aGlzLmN1cnJlbnRSb3dQYWdlICs9IDEgfSBlbHNlIHsgdGhpcy5jdXJyZW50Um93UGFnZSA9IHRoaXMuY3VycmVudFJvd1BhZ2VzLmxlbmd0aCAtIDEgfTtcclxuICAgICAgICB0aGlzLmJ1aWxkVGFibGVSb3dzKCk7XHJcbiAgICAgICAgdGhpcy5idWlsZFJpYmJvbigpO1xyXG4gICAgICAgIHRoaXMuYnVpbGRGb290ZXIoKTtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbGFzdFBhZ2UoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Um93UGFnZSA9IHRoaXMuY3VycmVudFJvd1BhZ2VzLmxlbmd0aCAtIDEgO1xyXG4gICAgICAgIHRoaXMuYnVpbGRUYWJsZVJvd3MoKTtcclxuICAgICAgICB0aGlzLmJ1aWxkUmliYm9uKCk7XHJcbiAgICAgICAgdGhpcy5idWlsZEZvb3RlcigpO1xyXG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIHRvZ2dsZXMgYWxsIHJvd3Mgc2VsZWN0ZWQgc3RhdHVzXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIHRvZ2dsZVNlbGVjdEFsbChldmVudDogYW55KSB7XHJcbiAgICAgICAgaWYoZXZlbnQudGFyZ2V0LmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Um93TWFwLmZvckVhY2goKGl0ZW06IFJvd0l0ZW0sIGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93TWFwLnNldChrZXksXCJcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFJvd01hcC5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnJvd3MuZm9yRWFjaCgocm93OiBTZWFyY2hGaWx0ZXJUYWJsZVJvdykgPT4ge1xyXG4gICAgICAgICAgICByb3cuZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmJ1aWxkUmliYm9uKCk7XHJcbiAgICAgICAgdGhpcy5idWlsZEZvb3RlcigpO1xyXG4gICAgICAgIHRoaXMuc2F2ZVNlbGVjdGVkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlU2VsZWN0KGV2ZW50OiBhbnksIGtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYoZXZlbnQudGFyZ2V0LmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFJvd01hcC5zZXQoa2V5LFwiXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFJvd01hcC5kZWxldGUoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yb3dzLmdldChrZXkpLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgdGhpcy5idWlsZFJpYmJvbigpO1xyXG4gICAgICAgIHRoaXMuYnVpbGRGb290ZXIoKTtcclxuICAgICAgICB0aGlzLnNhdmVTZWxlY3RlZCgpO1xyXG4gICAgfVxyXG4gICBcclxuICAgIC8vIHN0b3JlIHRoZSBzZWxlY3RlZCBpdGVtcyB0byBzdGF0ZVxyXG4gICAgYXN5bmMgc2F2ZVNlbGVjdGVkKCkge1xyXG4gICAgICAgIGxldCBzZWxlY3RlZEl0ZW1zIDogRmxvd09iamVjdERhdGFBcnJheSA9IG5ldyBGbG93T2JqZWN0RGF0YUFycmF5KCk7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFJvd01hcC5mb3JFYWNoKChpdGVtOiBGbG93T2JqZWN0RGF0YSwga2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgbGV0IHRJdGVtOiBGbG93T2JqZWN0RGF0YSA9IHRoaXMucm93TWFwLmdldChrZXkpLm9iamVjdERhdGE7XHJcbiAgICAgICAgICAgIHRJdGVtLmlzU2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZWxlY3RlZEl0ZW1zLmFkZEl0ZW0odEl0ZW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0U3RhdGVWYWx1ZShzZWxlY3RlZEl0ZW1zKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBzdG9yZSB0aGUgc2VsZWN0ZWQgaXRlbXMgdG8gc3RhdGVcclxuICAgIGFzeW5jIGxvYWRTZWxlY3RlZCgpIHtcclxuICAgICAgICBsZXQgc2VsZWN0ZWRJdGVtcyA6IEZsb3dPYmplY3REYXRhQXJyYXkgPSB0aGlzLmdldFN0YXRlVmFsdWUoKSBhcyBGbG93T2JqZWN0RGF0YUFycmF5O1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRSb3dNYXAuZm9yRWFjaCgoaXRlbTogRmxvd09iamVjdERhdGEsIGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB0SXRlbTogRmxvd09iamVjdERhdGEgPSB0aGlzLnJvd01hcC5nZXQoa2V5KS5vYmplY3REYXRhO1xyXG4gICAgICAgICAgICB0SXRlbS5pc1NlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2VsZWN0ZWRJdGVtcy5hZGRJdGVtKHRJdGVtKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBhd2FpdCB0aGlzLnNldFN0YXRlVmFsdWUoc2VsZWN0ZWRJdGVtcyk7XHJcbiAgICB9XHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIEJ1aWxkcyB0aGUgcm93RWxlbWVudHMgZnJvbSB0aGUgY3VycmVudFJvd01hcCBhbmQgZm9yY2VzIGEgcmVkcmF3XHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgYnVpbGRUYWJsZVJvd3MoKSB7XHJcbiAgICAgICAgdGhpcy5yb3dFbGVtZW50cyA9IFtdO1xyXG4gICAgICAgIC8vIGxvb3Agb3ZlciByb3dtYXAgaWYgZGVmaW5lZFxyXG4gICAgICAgIGlmKHRoaXMuY3VycmVudFJvd1BhZ2VzICYmIHRoaXMuY3VycmVudFJvd1BhZ2VzLmxlbmd0aCA+IDAgJiYgdGhpcy5jdXJyZW50Um93UGFnZXNbdGhpcy5jdXJyZW50Um93UGFnZV0pIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Um93UGFnZXNbdGhpcy5jdXJyZW50Um93UGFnZV0uZm9yRWFjaCgobm9kZTogUm93SXRlbSwga2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucm93RWxlbWVudHMucHVzaChcclxuICAgICAgICAgICAgICAgICAgICA8U2VhcmNoRmlsdGVyVGFibGVSb3cgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2tleX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD17dGhpc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e2tleX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXsoZWxlbWVudDogU2VhcmNoRmlsdGVyVGFibGVSb3cpID0+IHt0aGlzLnNldFJvdyhrZXkgLGVsZW1lbnQpfX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYnVpbGRSaWJib24oKTtcclxuICAgICAgICB0aGlzLmJ1aWxkRm9vdGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyBidWlsZHMgdGl0bGUgYmFyIGJ1dHRvbnMgYmFzZWQgb24gYXR0YWNoZWQgb3V0Y29tZXNcclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgYnVpbGRSaWJib24oKSB7XHJcbiAgICAgICAgdGhpcy5yaWJib24/LmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyBmb3JjZXMgdGhlIGZvb3RlciB0byB1cGRhdGVcclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgYnVpbGRGb290ZXIoKSB7XHJcbiAgICAgICAgdGhpcy5mb290ZXI/LmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIGNvbnN0cnVjdHMgYW5kIHNob3dzIGNvbnRleHQgbWVudVxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIHNob3dDb250ZXh0TWVudShlOiBhbnkpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBsZXQgbGlzdEl0ZW1zOiBNYXA8c3RyaW5nICwgYW55PiA9IG5ldyBNYXAoKTtcclxuICAgICAgICBpZih0aGlzLmNvbnRleHRNZW51KSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMub3V0Y29tZXMpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvdXRjb21lOiBGbG93T3V0Y29tZSA9IHRoaXMub3V0Y29tZXNba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChvdXRjb21lLmlzQnVsa0FjdGlvbiA9PT0gdHJ1ZSAmJiBvdXRjb21lLmRldmVsb3Blck5hbWUgIT09IFwiT25TZWxlY3RcIiAmJiBvdXRjb21lLmRldmVsb3Blck5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKFwiY21cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZighIChvdXRjb21lLmF0dHJpYnV0ZXNbXCJSZXF1aXJlc1NlbGVjdGVkXCJdPy52YWx1ZSA9PT0gXCJ0cnVlXCIgJiYgdGhpcy5zZWxlY3RlZFJvd01hcC5zaXplIDwgMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdEl0ZW1zLnNldChvdXRjb21lLmRldmVsb3Blck5hbWUsKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jbS1pdGVtXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17b3V0Y29tZS5sYWJlbCB8fCBrZXl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGU6IGFueSkgPT4ge2Uuc3RvcFByb3BhZ2F0aW9uKCk7IHRoaXMuY21DbGljayhrZXkpfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wiZ2x5cGhpY29uIGdseXBoaWNvbi1cIiArIChvdXRjb21lLmF0dHJpYnV0ZXNbXCJpY29uXCJdPy52YWx1ZSB8fCBcInBsdXNcIikgKyBcIiBzZnQtY20taXRlbS1pY29uXCJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcInNmdC1jbS1pdGVtLWxhYmVsXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7b3V0Y29tZS5sYWJlbCB8fCBrZXl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGxpc3RJdGVtcy5zZXQoXCJleHBvcnRhbGxcIiwoXHJcbiAgICAgICAgICAgICAgICA8bGkgXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNtLWl0ZW1cIlxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlPXtcIkV4cG9ydCBBbGxcIn1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7ZS5zdG9wUHJvcGFnYXRpb24oKTsgdGhpcy5kb0V4cG9ydCh0aGlzLnJvd01hcCl9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJnbHlwaGljb24gZ2x5cGhpY29uLWZsb3BweS1zYXZlIHNmdC1jbS1pdGVtLWljb25cIn0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wic2Z0LWNtLWl0ZW0tbGFiZWxcIn1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEV4cG9ydCBBbGxcclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICApKTtcclxuICAgICAgICAgICAgbGlzdEl0ZW1zLnNldChcImV4cG9ydHNob3duXCIsKFxyXG4gICAgICAgICAgICAgICAgPGxpIFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jbS1pdGVtXCJcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17XCJFeHBvcnQgU2VhcmNoIFJlc3VsdHNcIn1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7ZS5zdG9wUHJvcGFnYXRpb24oKTsgdGhpcy5kb0V4cG9ydCh0aGlzLmN1cnJlbnRSb3dNYXApfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wiZ2x5cGhpY29uIGdseXBoaWNvbi1mbG9wcHktc2F2ZSBzZnQtY20taXRlbS1pY29uXCJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcInNmdC1jbS1pdGVtLWxhYmVsXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBFeHBvcnQgU2VhcmNoIFJlc3VsdHNcclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICApKTtcclxuICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RlZFJvd01hcC5zaXplID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbGlzdEl0ZW1zLnNldChcImV4cG9ydHNlbGVjdGVkXCIsKFxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNtLWl0ZW1cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17XCJFeHBvcnQgU2VsZWN0ZWQgSXRlbXNcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGU6IGFueSkgPT4ge2Uuc3RvcFByb3BhZ2F0aW9uKCk7IHRoaXMuZG9FeHBvcnQodGhpcy5zZWxlY3RlZFJvd01hcCl9fVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJnbHlwaGljb24gZ2x5cGhpY29uLWZsb3BweS1zYXZlIHNmdC1jbS1pdGVtLWljb25cIn0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJzZnQtY20taXRlbS1sYWJlbFwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeHBvcnQgU2VsZWN0ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICApKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51LnNob3dDb250ZXh0TWVudShlLmNsaWVudFgsIGUuY2xpZW50WSxsaXN0SXRlbXMpOyAgIFxyXG4gICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGhpZGVDb250ZXh0TWVudSgpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHRNZW51LmhpZGVDb250ZXh0TWVudSgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBhIGNvbnRleHQgbWVudSBpdGVtIHdhcyBjbGlja2VkIC0gdGhlIGtleSB3aWxsIGJlIHRoZSBpdGVtJ3MgbmFtZVxyXG4gICAgY21DbGljayhrZXk6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuZG9PdXRjb21lKGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZG9PdXRjb21lKG91dGNvbWVOYW1lOiBzdHJpbmcsIHNlbGVjdGVkSXRlbT8gOiBzdHJpbmcpIHtcclxuICAgICAgICAvL2lmIHRoZXJlJ3MgYSBzZWxlY3RlZEl0ZW0gdGhlbiB0aGlzIG11c3QgYmUgYmVpbmcgdHJpZ2dlcmVkIGF0IGEgcm93IGxldmVsLlxyXG4gICAgICAgIC8vc2V0IHRoZSBzaW5nbGUgaXRlbSBmaWVsZCBpZiBkZWZpbmVkXHJcbiAgICAgICAgLypcclxuICAgICAgICBpZihzZWxlY3RlZEl0ZW0pIHtcclxuICAgICAgICAgICAgLy93ZSBzaG91bGQgc2V0IHRoZSBjb21wb25lbnQncyBzaW5nbGUgc2VsZWN0ZWQgaXRlbSBieSBhZGRpbmcgaXQgdG8gdGhlIGVtcHRpZWQgbGlzdFxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93cy5jbGVhcigpO1xyXG4gICAgICAgICAgICBpZihzZWxlY3RlZEl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRSb3dzLnNldChzZWxlY3RlZEl0ZW0sc2VsZWN0ZWRJdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL25vdyBpZiB0aGVyZSdzIGEgUm93TGV2ZWxTdGF0ZSBhdHRyaWJ1dGUgZGVmaW5lZCwgZ2V0IGl0IGFuZCB1cGRhdGUgaXQgd2l0aCB0aGUgc2VsZWN0ZWQgaXRlbSdzIG9iamVjdCBkYXRhXHJcbiAgICAgICAgICAgIGlmKHRoaXMuZ2V0QXR0cmlidXRlKFwiUm93TGV2ZWxTdGF0ZVwiLFwiXCIpLmxlbmd0aD4wKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsOiBGbG93RmllbGQgPSBhd2FpdCB0aGlzLmxvYWRWYWx1ZSh0aGlzLmdldEF0dHJpYnV0ZShcIlJvd0xldmVsU3RhdGVcIikpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbC52YWx1ZSA9IHRoaXMucm93TWFwLmdldChzZWxlY3RlZEl0ZW0pLm9iamVjdERhdGEgYXMgRmxvd09iamVjdERhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVWYWx1ZXModmFsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICAvL2lmIGl0J3Mgb24gc2VsZWN0LCBjaGFuZ2Ugb3IgdGhlIG91dGNvbWUgc2hvdWxkIHNhdmUgdmFsdWVzIHRoZW4gc3RvcmUgc29tZXRoaW5nIHRvIHRoZSBzdGF0ZVxyXG4gICAgICAgIGlmKG91dGNvbWVOYW1lID09PSBcIk9uU2VsZWN0XCIgfHwgXHJcbiAgICAgICAgICAgIG91dGNvbWVOYW1lID09PSBcIk9uQ2hhbmdlXCIgfHwgXHJcbiAgICAgICAgICAgIHRoaXMub3V0Y29tZXNbb3V0Y29tZU5hbWVdPy5wYWdlQWN0aW9uQmluZGluZ1R5cGUgIT09IGVQYWdlQWN0aW9uQmluZGluZ1R5cGUuTm9TYXZlKSB7XHJcbiAgICAgICAgICAgICAgICAvL3RoZSBtb2RlbCdzIHR5cGUgJiBtdWx0aXNlbGVjdCBkZWZpbmVzIHdoYXQgd2Ugc2F2ZSB0byB0aGUgc3RhdGVcclxuICAgICAgICAgICAgICAgIC8vaWYgaXQncyBhIGxpc3QgdHlwZSBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5nZXRTdGF0ZVZhbHVlVHlwZSgpID09PSBlQ29udGVudFR5cGUuQ29udGVudExpc3Qpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgaXQncyBPbkNoYW5nZSB0aGVuIGFkZCBpdGVtIHRvIG1vZGlmaWVkIGxpc3RcclxuICAgICAgICAgICAgICAgICAgICBpZihvdXRjb21lTmFtZSA9PT0gXCJPbkNoYW5nZVwiKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RpZmllZFJvd3Muc2V0KHNlbGVjdGVkSXRlbSxzZWxlY3RlZEl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL2lmIG11bHRpIHNlbGVjdCB0aGVuIHdlIGFyZSB3b3JraW5nIG9uIGEgc2VsZWN0ZWQgc3Vic2V0XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5tb2RlbC5tdWx0aVNlbGVjdCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3dlIG9ubHkgc3RvcmUgdGhlIG1vZGlmaWVkIHJvd3Mgc3Vic2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucHVzaE1vZGlmaWVkVG9TdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2Ugc3RvcmUgZW50aXJlIG1vZGVsIHRvIHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucHVzaE1vZGVsVG9TdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpdHMgYSBzaW5nbGUgb2JqZWN0IHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wdXNoU2VsZWN0ZWRUb1N0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgICovXHJcblxyXG4gICAgICAgIGlmKHRoaXMub3V0Y29tZXNbb3V0Y29tZU5hbWVdKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudHJpZ2dlck91dGNvbWUob3V0Y29tZU5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbWFueXdoby5jb21wb25lbnQuaGFuZGxlRXZlbnQoXHJcbiAgICAgICAgICAgICAgICB0aGlzLFxyXG4gICAgICAgICAgICAgICAgbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRJZCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZsb3dLZXksXHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5mbG93S2V5LFxyXG4gICAgICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgfSAgXHJcbiAgICBcclxuICAgIGFzeW5jIGRvRXhwb3J0KGRhdGE6IE1hcDxzdHJpbmcsUm93SXRlbT4pIHtcclxuICAgICAgICBsZXQgb3BkYXRhOiBNYXA8c3RyaW5nLFJvd0l0ZW0+ID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGRhdGEuZm9yRWFjaCgoaXRlbSxrZXkpID0+IHtcclxuICAgICAgICAgICAgb3BkYXRhLnNldChrZXksdGhpcy5yb3dNYXAuZ2V0KGtleSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE1vZGVsRXhwb3J0ZXIuZXhwb3J0KHRoaXMuY29sTWFwLCBvcGRhdGEsXCJleHBvcnQuY3N2XCIpO1xyXG4gICAgICAgIGlmKHRoaXMub3V0Y29tZXNbXCJPbkV4cG9ydFwiXSkge1xyXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJPdXRjb21lKFwiT25FeHBvcnRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBcclxuICAgICAgICBpZih0aGlzLmxvYWRpbmdTdGF0ZSAhPT0gZUxvYWRpbmdTdGF0ZS5yZWFkeSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sYXN0Q29udGVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIC8vaGFuZGxlIGNsYXNzZXMgYXR0cmlidXRlIGFuZCBoaWRkZW4gYW5kIHNpemVcclxuICAgICAgICBsZXQgY2xhc3Nlczogc3RyaW5nID0gXCJzZnQgXCIgKyB0aGlzLmdldEF0dHJpYnV0ZShcImNsYXNzZXNcIixcIlwiKTtcclxuICAgICAgICBsZXQgc3R5bGU6IENTU1Byb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICBzdHlsZS53aWR0aCA9IFwiLXdlYmtpdC1maWxsLWF2YWlsYWJsZVwiO1xyXG4gICAgICAgIHN0eWxlLmhlaWdodCA9IFwiLXdlYmtpdC1maWxsLWF2YWlsYWJsZVwiO1xyXG5cclxuICAgICAgICBpZih0aGlzLm1vZGVsLnZpc2libGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYodGhpcy5tb2RlbC53aWR0aCkge1xyXG4gICAgICAgICAgICBzdHlsZS53aWR0aD10aGlzLm1vZGVsLndpZHRoICsgXCJweFwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMubW9kZWwuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHN0eWxlLmhlaWdodD10aGlzLm1vZGVsLmhlaWdodCArIFwicHhcIlxyXG4gICAgICAgIH1cclxuICAgICAgICAgICAgIFxyXG4gICAgICAgIGxldCB0aXRsZTogIHN0cmluZyA9IHRoaXMubW9kZWwubGFiZWwgfHwgXCJcIjtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmxhc3RDb250ZW50ID0gKFxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXN9XHJcbiAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGV9XHJcbiAgICAgICAgICAgICAgICBvbkNvbnRleHRNZW51PXt0aGlzLnNob3dDb250ZXh0TWVudX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPEZsb3dNZXNzYWdlQm94XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50PXt0aGlzfVxyXG4gICAgICAgICAgICAgICAgICAgIHJlZj17KGVsZW1lbnQ6IEZsb3dNZXNzYWdlQm94KSA9PiB7dGhpcy5tZXNzYWdlQm94ID0gZWxlbWVudH19XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPEZsb3dDb250ZXh0TWVudVxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudD17dGhpc31cclxuICAgICAgICAgICAgICAgICAgICByZWY9eyhlbGVtZW50OiBGbG93Q29udGV4dE1lbnUpID0+IHt0aGlzLmNvbnRleHRNZW51ID0gZWxlbWVudH19XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAge3RoaXMucmliYm9uRWxlbWVudH1cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtYm9keVwiXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXNjcm9sbGVyXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtc2Nyb2xsZXItYm9keVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLmhlYWRlcnNFbGVtZW50fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5yb3dFbGVtZW50c31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Zm9vdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rmb290PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAge3RoaXMuZm9vdGVyRWxlbWVudH1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5sYXN0Q29udGVudDtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbm1hbnl3aG8uY29tcG9uZW50LnJlZ2lzdGVyKCdTZWFyY2hGaWx0ZXJUYWJsZScsIFNlYXJjaEZpbHRlclRhYmxlKTsiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93Q29tcG9uZW50ID0gdm9pZCAwO1xyXG52YXIgRmxvd0Jhc2VDb21wb25lbnRfMSA9IHJlcXVpcmUoXCIuL0Zsb3dCYXNlQ29tcG9uZW50XCIpO1xyXG52YXIgRmxvd0NvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhGbG93Q29tcG9uZW50LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRmxvd0NvbXBvbmVudChwcm9wcykge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcclxuICAgIH1cclxuICAgIC8vIHRoZSBGbG93UGFnZSBhdXRvbWF0aWNhbGx5IGdldHMgdmFsdWVzXHJcbiAgICBGbG93Q29tcG9uZW50LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIF9zdXBlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQuY2FsbCh0aGlzKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZG9udExvYWRBbGxWYWx1ZXMoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGbG93Q29tcG9uZW50O1xyXG59KEZsb3dCYXNlQ29tcG9uZW50XzEuRmxvd0Jhc2VDb21wb25lbnQpKTtcclxuZXhwb3J0cy5GbG93Q29tcG9uZW50ID0gRmxvd0NvbXBvbmVudDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuaWYgKCFtYW55d2hvLmV2ZW50TWFuYWdlcikge1xyXG4gICAgbWFueXdoby5ldmVudE1hbmFnZXIgPSB7fTtcclxuICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmJlZm9yZVNlbmRMaXN0ZW5lcnMgPSB7fTtcclxuICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmRvbmVMaXN0ZW5lcnMgPSB7fTtcclxuICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmZhaWxMaXN0ZW5lcnMgPSB7fTtcclxuICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLm91dGNvbWVCZWluZ1RyaWdnZXJlZDtcclxuICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmhpc3RvcnkgPSBbXTtcclxuICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmJlZm9yZVNlbmQgPSBmdW5jdGlvbiAoeGhyLCByZXF1ZXN0KSB7XHJcbiAgICAgICAgLy8obWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyOiBhbnkpID0+IGxpc3RlbmVyKHhociwgcmVxdWVzdCkpO1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBtYW55d2hvLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmJlZm9yZVNlbmRMaXN0ZW5lcnNba2V5XSh4aHIsIHJlcXVlc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5kb25lID0gZnVuY3Rpb24gKHhociwgcmVxdWVzdCkge1xyXG4gICAgICAgIC8vKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZG9uZUxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcjogYW55KSA9PiBsaXN0ZW5lcih4aHIsIHJlcXVlc3QpKTtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gbWFueXdoby5ldmVudE1hbmFnZXIuZG9uZUxpc3RlbmVycykge1xyXG4gICAgICAgICAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5kb25lTGlzdGVuZXJzW2tleV0oeGhyLCByZXF1ZXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgbWFueXdoby5ldmVudE1hbmFnZXIuZmFpbCA9IGZ1bmN0aW9uICh4aHIsIHJlcXVlc3QpIHtcclxuICAgICAgICAvLyhtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmZhaWxMaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXI6IGFueSkgPT4gbGlzdGVuZXIoeGhyLCByZXF1ZXN0KSk7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmZhaWxMaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgbWFueXdoby5ldmVudE1hbmFnZXIuZmFpbExpc3RlbmVyc1trZXldKHhociwgcmVxdWVzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmFkZEJlZm9yZVNlbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIChoYW5kbGVyLCBjb21wb25lbnRJZCkge1xyXG4gICAgICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmJlZm9yZVNlbmRMaXN0ZW5lcnNbY29tcG9uZW50SWRdID0gaGFuZGxlcjtcclxuICAgIH07XHJcbiAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5yZW1vdmVCZWZvcmVTZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiAoY29tcG9uZW50SWQpIHtcclxuICAgICAgICBkZWxldGUgbWFueXdoby5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZExpc3RlbmVyc1tjb21wb25lbnRJZF07XHJcbiAgICB9O1xyXG4gICAgbWFueXdoby5ldmVudE1hbmFnZXIuYWRkRG9uZUxpc3RlbmVyID0gZnVuY3Rpb24gKGhhbmRsZXIsIGNvbXBvbmVudElkKSB7XHJcbiAgICAgICAgbWFueXdoby5ldmVudE1hbmFnZXIuZG9uZUxpc3RlbmVyc1tjb21wb25lbnRJZF0gPSBoYW5kbGVyO1xyXG4gICAgfTtcclxuICAgIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLnJlbW92ZURvbmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChjb21wb25lbnRJZCkge1xyXG4gICAgICAgIGRlbGV0ZSBtYW55d2hvLmV2ZW50TWFuYWdlci5kb25lTGlzdGVuZXJzW2NvbXBvbmVudElkXTtcclxuICAgIH07XHJcbiAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5hZGRGYWlsTGlzdGVuZXIgPSBmdW5jdGlvbiAoaGFuZGxlciwgY29tcG9uZW50SWQpIHtcclxuICAgICAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5mYWlsTGlzdGVuZXJzW2NvbXBvbmVudElkXSA9IGhhbmRsZXI7XHJcbiAgICB9O1xyXG4gICAgbWFueXdoby5ldmVudE1hbmFnZXIucmVtb3ZlRmFpbExpc3RlbmVyID0gZnVuY3Rpb24gKGNvbXBvbmVudElkKSB7XHJcbiAgICAgICAgZGVsZXRlIG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmZhaWxMaXN0ZW5lcnNbY29tcG9uZW50SWRdO1xyXG4gICAgfTtcclxuICAgIG1hbnl3aG8uc2V0dGluZ3MuaW5pdGlhbGl6ZShudWxsLCB7XHJcbiAgICAgICAgaW52b2tlOiB7XHJcbiAgICAgICAgICAgIGJlZm9yZVNlbmQ6IG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmJlZm9yZVNlbmQsXHJcbiAgICAgICAgICAgIGRvbmU6IG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmRvbmUsXHJcbiAgICAgICAgICAgIGZhaWw6IG1hbnl3aG8uZXZlbnRNYW5hZ2VyLmZhaWwsXHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59XHJcbiIsIi8qKlxuICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgYFR5cGVFcnJvcmAgbWVzc2FnZSBmb3IgXCJGdW5jdGlvbnNcIiBtZXRob2RzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTWluID0gTWF0aC5taW47XG5cbi8qKlxuICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgRGF0ZVxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gKiB9LCBfLm5vdygpKTtcbiAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gKi9cbnZhciBub3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICogaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gKlxuICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAqIH0pKTtcbiAqXG4gKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsYXN0QXJncyxcbiAgICAgIGxhc3RUaGlzLFxuICAgICAgbWF4V2FpdCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHRpbWVySWQsXG4gICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgcmVzdWx0ID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgcmV0dXJuIG1heGluZyA/IG5hdGl2ZU1pbihyZXN1bHQsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgIH1cbiAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgfVxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgfVxuICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICByZXR1cm4gZGVib3VuY2VkO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gIH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0aHJvdHRsZTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkZsb3dQYWdlID0gdm9pZCAwO1xyXG52YXIgRmxvd0Jhc2VDb21wb25lbnRfMSA9IHJlcXVpcmUoXCIuL0Zsb3dCYXNlQ29tcG9uZW50XCIpO1xyXG52YXIgRmxvd1BhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRmxvd1BhZ2UsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBGbG93UGFnZShwcm9wcykge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcclxuICAgIH1cclxuICAgIC8vIHRoZSBGbG93UGFnZSBhdXRvbWF0aWNhbGx5IGdldHMgdmFsdWVzXHJcbiAgICBGbG93UGFnZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBfc3VwZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50LmNhbGwodGhpcyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3NpbmNlIHdlIGFyZSBhIHBhZ2Ugd2Ugbm93IGxvYWQgYWxsIHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmxvYWRBbGxWYWx1ZXMoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3NpbmNlIHdlIGFyZSBhIHBhZ2Ugd2Ugbm93IGxvYWQgYWxsIHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGbG93UGFnZTtcclxufShGbG93QmFzZUNvbXBvbmVudF8xLkZsb3dCYXNlQ29tcG9uZW50KSk7XHJcbmV4cG9ydHMuRmxvd1BhZ2UgPSBGbG93UGFnZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuRmxvd0RpYWxvZ0JveCA9IHZvaWQgMDtcclxudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xyXG52YXIgQ29tbW9uXzEgPSByZXF1aXJlKFwiLi9Db21tb25cIik7XHJcbnJlcXVpcmUoXCIuL0Zsb3dEaWFsb2dCb3guY3NzXCIpO1xyXG4vLyBEZWNsYXJhdGlvbiBvZiB0aGUgY29tcG9uZW50IGFzIFJlYWN0IENsYXNzIENvbXBvbmVudFxyXG52YXIgRmxvd0RpYWxvZ0JveCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhGbG93RGlhbG9nQm94LCBfc3VwZXIpO1xyXG4gICAgLy8gSW5pdCBvZiB0aGUgY29tcG9uZW50IGJlZm9yZSBpdCBpcyBtb3VudGVkLlxyXG4gICAgZnVuY3Rpb24gRmxvd0RpYWxvZ0JveChwcm9wcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmRyYWdFdmVudCA9IG5ldyBDb21tb25fMS5EcmFnRXZlbnQoKTtcclxuICAgICAgICBfdGhpcy5kaWFsb2dWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgX3RoaXMuZGlhbG9nVGl0bGUgPSAnJztcclxuICAgICAgICBfdGhpcy5kaWFsb2dCdXR0b25zID0gW107XHJcbiAgICAgICAgX3RoaXMuZGlhbG9nT25DbG9zZSA9IF90aGlzLmhpZGVEaWFsb2c7XHJcbiAgICAgICAgX3RoaXMudG9wID0gMDtcclxuICAgICAgICBfdGhpcy5sZWZ0ID0gMDtcclxuICAgICAgICBfdGhpcy5oYW5kbGVLZXlVcCA9IF90aGlzLmhhbmRsZUtleVVwLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLmhhbmRsZU91dHNpZGVDbGljayA9IF90aGlzLmhhbmRsZU91dHNpZGVDbGljay5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5zaG93RGlhbG9nID0gX3RoaXMuc2hvd0RpYWxvZy5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5oaWRlRGlhbG9nID0gX3RoaXMuaGlkZURpYWxvZy5iaW5kKF90aGlzKTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBGbG93RGlhbG9nQm94LnByb3RvdHlwZS5zZXREaWFsb2cgPSBmdW5jdGlvbiAoZGlhbG9nKSB7XHJcbiAgICAgICAgdGhpcy5kaWFsb2cgPSBkaWFsb2c7XHJcbiAgICAgICAgaWYgKHRoaXMuZGlhbG9nKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJlbnRYQ2VudGVyID0gdGhpcy5kaWFsb2cub2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIC8gMjtcclxuICAgICAgICAgICAgdmFyIHBhcmVudFlDZW50ZXIgPSB0aGlzLmRpYWxvZy5vZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0IC8gMjtcclxuICAgICAgICAgICAgdmFyIGRpYWxvZ1hPZmZzZXQgPSB0aGlzLmRpYWxvZy5jbGllbnRXaWR0aCAvIDI7XHJcbiAgICAgICAgICAgIHZhciBkaWFsb2dZT2Zmc2V0ID0gdGhpcy5kaWFsb2cuY2xpZW50SGVpZ2h0IC8gMjtcclxuICAgICAgICAgICAgdGhpcy5sZWZ0ID0gcGFyZW50WENlbnRlciAtIGRpYWxvZ1hPZmZzZXQ7XHJcbiAgICAgICAgICAgIHRoaXMudG9wID0gcGFyZW50WUNlbnRlciAtIGRpYWxvZ1lPZmZzZXQ7XHJcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nLmNsYXNzTGlzdC5hZGQoJ3Nob3duJyk7XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25EaWFsb2coKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRmxvd0RpYWxvZ0JveC5wcm90b3R5cGUucG9zaXRpb25EaWFsb2cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGlhbG9nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nLnN0eWxlLmxlZnQgPSB0aGlzLmxlZnQgKyBcInB4XCI7XHJcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nLnN0eWxlLnRvcCA9IHRoaXMudG9wICsgXCJweFwiO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGbG93RGlhbG9nQm94LnByb3RvdHlwZS5zdG9wRXZlbnRCdWJibGUgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmIChlLnN0b3BQcm9wYWdhdGlvbilcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdClcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgICAgICBlLnJldHVyblZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8vIEFkZCBsaXN0ZW5lcnMgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLlxyXG4gICAgRmxvd0RpYWxvZ0JveC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgfTtcclxuICAgIEZsb3dEaWFsb2dCb3gucHJvdG90eXBlLnNob3dEaWFsb2cgPSBmdW5jdGlvbiAodGl0bGUsIGNvbnRlbnQsIGJ1dHRvbnMsIG9uQ2xvc2UpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ1RpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ0NvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dPbkNsb3NlID0gb25DbG9zZSB8fCB0aGlzLmhpZGVEaWFsb2c7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ0J1dHRvbnMgPSBidXR0b25zO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGbG93RGlhbG9nQm94LnByb3RvdHlwZS5oaWRlRGlhbG9nID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dUaXRsZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dDb250ZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dPbkNsb3NlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dCdXR0b25zID0gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vIEhhbmRsZSB0aGUga2V5IHByZXNzIGV2ZW50LlxyXG4gICAgRmxvd0RpYWxvZ0JveC5wcm90b3R5cGUuaGFuZGxlS2V5VXAgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGtleXMgPSB7XHJcbiAgICAgICAgICAgIDI3OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5oaWRlRGlhbG9nKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoa2V5c1tlLmtleUNvZGVdKSB7XHJcbiAgICAgICAgICAgIGtleXNbZS5rZXlDb2RlXSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBIYW5kbGUgdGhlIG1vdXNlIGNsaWNrIG9uIGJyb3dzZXIgd2luZG93LlxyXG4gICAgRmxvd0RpYWxvZ0JveC5wcm90b3R5cGUuaGFuZGxlT3V0c2lkZUNsaWNrID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGlhbG9nKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5kaWFsb2cuY29udGFpbnMoZS50YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVEaWFsb2coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBSZW5kZXIgdGhlIGNvbXBvbmVudCBwYXNzaW5nIG9uQ2xvc2VSZXF1ZXN0IGFuZCBjaGlsZHJlbiBhcyBwcm9wcy5cclxuICAgIEZsb3dEaWFsb2dCb3gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjb250ZW50O1xyXG4gICAgICAgIGlmICh0aGlzLmRpYWxvZ1Zpc2libGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgYnV0dG9ucyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChidXR0b24pIHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHsgY2xhc3NOYW1lOiBcIm1vZGFsLWRpYWxvZy1idXR0b24tYmFyLWJ1dHRvblwiLCB0aXRsZTogXCJDYW5jZWxcIiwgb25Nb3VzZURvd246IGZ1bmN0aW9uIChlKSB7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IGJ1dHRvbi5oYW5kbGVyKCk7IH0gfSwgYnV0dG9uLmxhYmVsKSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmRpYWxvZ0J1dHRvbnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnV0dG9uID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgX2xvb3BfMShidXR0b24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJtb2RhbC1yZWRhY3Rpb25cIiwgb25Nb3VzZU1vdmU6IGZ1bmN0aW9uIChlKSB7IF90aGlzLm9uTW91c2VNb3ZlKGUpOyB9LCBvbk1vdXNlVXA6IGZ1bmN0aW9uIChlKSB7IF90aGlzLm9uTW91c2VVcChlKTsgfSwgb25Nb3VzZURvd246IGZ1bmN0aW9uIChlKSB7IF90aGlzLmhhbmRsZU91dHNpZGVDbGljayhlKTsgfSwgb25Db250ZXh0TWVudTogZnVuY3Rpb24gKGUpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyBlLnN0b3BQcm9wYWdhdGlvbigpOyBpZiAoX3RoaXMucHJvcHMub25Db250ZXh0TWVudSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uQ29udGV4dE1lbnUoKTtcclxuICAgICAgICAgICAgICAgIH0gfSB9LFxyXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJtb2RhbC1jb250ZW50XCIsIHJlZjogZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIChfdGhpcy5kaWFsb2cgPSBub2RlKTsgfSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibW9kYWwtZGlhbG9nXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJtb2RhbC1kaWFsb2ctaGVhZGVyXCIsIG9uTW91c2VEb3duOiBmdW5jdGlvbiAoZSkgeyBfdGhpcy5vbk1vdXNlRG93bihlKTsgfSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlOiB7IGRpc3BsYXk6ICdmbGV4JywgZmxleERpcmVjdGlvbjogXCJyb3dcIiwgZmxleEdyb3c6IDEgfSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcIm1vZGFsLWRpYWxvZy1oZWFkZXItdGl0bGVcIiB9LCB0aGlzLnByb3BzLnRpdGxlKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IHsgZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLCBtYXJnaW5MZWZ0OiAnYXV0bycsIGZsZXhHcm93OiAwIH0gfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSBtb2RhbC1kaWFsb2ctaGVhZGVyLWJ1dHRvblwiLCBzdHlsZTogeyBjdXJzb3I6ICdwb2ludGVyJywgY29sb3I6ICcjZmVmZWZlJywgbWFyZ2luUmlnaHQ6ICc1cHgnLCBmb250U2l6ZTogJzE0cHQnIH0sIHRpdGxlOiBcIkNsb3NlXCIsIG9uTW91c2VEb3duOiBmdW5jdGlvbiAoZSkgeyBlLnN0b3BQcm9wYWdhdGlvbigpOyBfdGhpcy5wcm9wcy5vbkNsb3NlKCdjYW5jZWwnKTsgfSB9KSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcIm1vZGFsLWRpYWxvZy1ib2R5XCIgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibW9kYWwtZGlhbG9nLWJvZHktY2xpZW50XCIgfSwgdGhpcy5wcm9wcy5jaGlsZHJlbikpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcIm1vZGFsLWRpYWxvZy1idXR0b24tYmFyXCIgfSwgYnV0dG9ucykpKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH07XHJcbiAgICBGbG93RGlhbG9nQm94LnByb3RvdHlwZS5tb3ZlTWUgPSBmdW5jdGlvbiAobGVmdCwgdG9wKSB7XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gbGVmdDtcclxuICAgICAgICB0aGlzLnRvcCA9IHRvcDsgLy8gLSB0aGlzLmJveC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbkRpYWxvZygpO1xyXG4gICAgfTtcclxuICAgIEZsb3dEaWFsb2dCb3gucHJvdG90eXBlLm9uTW91c2VEb3duID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAvL3RoaXMuc3RvcEV2ZW50QnViYmxlKGUpO1xyXG4gICAgICAgIC8vaW5jbHVkZSBjb21wb25lbnQgYm91bmRpbmcgcmVjdCB0byBhbGxvdyBmb3IgbW91c2Ugb2Zmc2V0IGludG8gY29tcG9uZW50XHJcbiAgICAgICAgdmFyIGNsaWVudFJlY3QgPSBlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICB2YXIgbW91c2VPZmZzZXRZID0gZS5jbGllbnRZIC0gY2xpZW50UmVjdC50b3A7XHJcbiAgICAgICAgdGhpcy5kcmFnRXZlbnQgPSBDb21tb25fMS5EcmFnRXZlbnQuc3RhcnQoQ29tbW9uXzEuZURyYWdFdmVudFR5cGUuZGlhbG9nLCB0aGlzLCBlLmNsaWVudFggLSBjbGllbnRSZWN0LmxlZnQsIG1vdXNlT2Zmc2V0WSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0RpYWxvZ0JveC5wcm90b3R5cGUub25Nb3VzZU1vdmUgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIC8vdGhpcy5zdG9wRXZlbnRCdWJibGUoZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZHJhZ0V2ZW50LnR5cGUgPT09IENvbW1vbl8xLmVEcmFnRXZlbnRUeXBlLmRpYWxvZykge1xyXG4gICAgICAgICAgICB0aGlzLm1vdmVNZShlLmNsaWVudFggLSB0aGlzLmRyYWdFdmVudC5tb3VzZU9mZnNldFgsIGUuY2xpZW50WSAtIHRoaXMuZHJhZ0V2ZW50Lm1vdXNlT2Zmc2V0WSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZsb3dEaWFsb2dCb3gucHJvdG90eXBlLm9uTW91c2VVcCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgLy90aGlzLnN0b3BFdmVudEJ1YmJsZShlKTtcclxuICAgICAgICBpZiAodGhpcy5kcmFnRXZlbnQudHlwZSA9PT0gQ29tbW9uXzEuZURyYWdFdmVudFR5cGUuZGlhbG9nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhZ0V2ZW50LmVuZChudWxsLCBlLmNsaWVudFgsIGUuY2xpZW50WSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBGbG93RGlhbG9nQm94O1xyXG59KFJlYWN0LkNvbXBvbmVudCkpO1xyXG5leHBvcnRzLkZsb3dEaWFsb2dCb3ggPSBGbG93RGlhbG9nQm94O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GbG93TWVzc2FnZUJveCA9IHZvaWQgMDtcclxudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xyXG52YXIgQ29tbW9uXzEgPSByZXF1aXJlKFwiLi9Db21tb25cIik7XHJcbnJlcXVpcmUoXCIuL0Zsb3dNZXNzYWdlQm94LmNzc1wiKTtcclxuLy8gRGVjbGFyYXRpb24gb2YgdGhlIGNvbXBvbmVudCBhcyBSZWFjdCBDbGFzcyBDb21wb25lbnRcclxudmFyIEZsb3dNZXNzYWdlQm94ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEZsb3dNZXNzYWdlQm94LCBfc3VwZXIpO1xyXG4gICAgLy8gSW5pdCBvZiB0aGUgY29tcG9uZW50IGJlZm9yZSBpdCBpcyBtb3VudGVkLlxyXG4gICAgZnVuY3Rpb24gRmxvd01lc3NhZ2VCb3gocHJvcHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5kcmFnRXZlbnQgPSBuZXcgQ29tbW9uXzEuRHJhZ0V2ZW50KCk7XHJcbiAgICAgICAgX3RoaXMudG9wID0gMDtcclxuICAgICAgICBfdGhpcy5sZWZ0ID0gMDtcclxuICAgICAgICBfdGhpcy5tc2dib3hWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgX3RoaXMubXNnYm94VGl0bGUgPSAnJztcclxuICAgICAgICBfdGhpcy5tc2dib3hCdXR0b25zID0gW107XHJcbiAgICAgICAgX3RoaXMubXNnYm94T25DbG9zZSA9IF90aGlzLmhpZGVNZXNzYWdlQm94O1xyXG4gICAgICAgIF90aGlzLmhhbmRsZUtleVVwID0gX3RoaXMuaGFuZGxlS2V5VXAuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuc2V0RGlhbG9nID0gX3RoaXMuc2V0RGlhbG9nLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLnNob3dNZXNzYWdlQm94ID0gX3RoaXMuc2hvd01lc3NhZ2VCb3guYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuaGlkZU1lc3NhZ2VCb3ggPSBfdGhpcy5oaWRlTWVzc2FnZUJveC5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5wb3NpdGlvbkRpYWxvZyA9IF90aGlzLnBvc2l0aW9uRGlhbG9nLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICAvLyB0aGlzLmhhbmRsZU91dHNpZGVDbGljayA9IHRoaXMuaGFuZGxlT3V0c2lkZUNsaWNrLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcbiAgICBGbG93TWVzc2FnZUJveC5wcm90b3R5cGUuc2V0RGlhbG9nID0gZnVuY3Rpb24gKGRpYWxvZykge1xyXG4gICAgICAgIHRoaXMuZGlhbG9nID0gZGlhbG9nO1xyXG4gICAgICAgIGlmICh0aGlzLmRpYWxvZykge1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50WENlbnRlciA9IHRoaXMuZGlhbG9nLm9mZnNldFBhcmVudC5jbGllbnRXaWR0aCAvIDI7XHJcbiAgICAgICAgICAgIHZhciBwYXJlbnRZQ2VudGVyID0gdGhpcy5kaWFsb2cub2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCAvIDI7XHJcbiAgICAgICAgICAgIHZhciBkaWFsb2dYT2Zmc2V0ID0gdGhpcy5kaWFsb2cuY2xpZW50V2lkdGggLyAyO1xyXG4gICAgICAgICAgICB2YXIgZGlhbG9nWU9mZnNldCA9IHRoaXMuZGlhbG9nLmNsaWVudEhlaWdodCAvIDI7XHJcbiAgICAgICAgICAgIHRoaXMubGVmdCA9IHBhcmVudFhDZW50ZXIgLSBkaWFsb2dYT2Zmc2V0O1xyXG4gICAgICAgICAgICB0aGlzLnRvcCA9IHBhcmVudFlDZW50ZXIgLSBkaWFsb2dZT2Zmc2V0O1xyXG4gICAgICAgICAgICB0aGlzLmRpYWxvZy5jbGFzc0xpc3QuYWRkKCdzaG93bicpO1xyXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uRGlhbG9nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZsb3dNZXNzYWdlQm94LnByb3RvdHlwZS5wb3NpdGlvbkRpYWxvZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5kaWFsb2cpIHtcclxuICAgICAgICAgICAgdGhpcy5kaWFsb2cuc3R5bGUubGVmdCA9IHRoaXMubGVmdCArIFwicHhcIjtcclxuICAgICAgICAgICAgdGhpcy5kaWFsb2cuc3R5bGUudG9wID0gdGhpcy50b3AgKyBcInB4XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZsb3dNZXNzYWdlQm94LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9O1xyXG4gICAgRmxvd01lc3NhZ2VCb3gucHJvdG90eXBlLnNob3dNZXNzYWdlQm94ID0gZnVuY3Rpb24gKHRpdGxlLCBjb250ZW50LCBidXR0b25zLCBvbkNsb3NlKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1zZ2JveFZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tc2dib3hUaXRsZSA9IHRpdGxlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tc2dib3hDb250ZW50ID0gY29udGVudDtcclxuICAgICAgICAgICAgICAgIHRoaXMubXNnYm94T25DbG9zZSA9IG9uQ2xvc2UgfHwgdGhpcy5oaWRlTWVzc2FnZUJveDtcclxuICAgICAgICAgICAgICAgIHRoaXMubXNnYm94QnV0dG9ucyA9IGJ1dHRvbnM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dNZXNzYWdlQm94LnByb3RvdHlwZS5oaWRlTWVzc2FnZUJveCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1zZ2JveFZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMubXNnYm94VGl0bGUgPSAnJztcclxuICAgICAgICAgICAgICAgIHRoaXMubXNnYm94Q29udGVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHRoaXMubXNnYm94T25DbG9zZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHRoaXMubXNnYm94QnV0dG9ucyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGbG93TWVzc2FnZUJveC5wcm90b3R5cGUuc3RvcEV2ZW50QnViYmxlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoZS5zdG9wUHJvcGFnYXRpb24pIHtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XHJcbiAgICAgICAgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvLyBIYW5kbGUgdGhlIGtleSBwcmVzcyBldmVudC5cclxuICAgIEZsb3dNZXNzYWdlQm94LnByb3RvdHlwZS5oYW5kbGVLZXlVcCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIga2V5cyA9IHtcclxuICAgICAgICAgICAgMjc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmhpZGVNZXNzYWdlQm94KCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoa2V5c1tlLmtleUNvZGVdKSB7XHJcbiAgICAgICAgICAgIGtleXNbZS5rZXlDb2RlXSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBSZW5kZXIgdGhlIGNvbXBvbmVudCBwYXNzaW5nIG9uQ2xvc2VSZXF1ZXN0IGFuZCBjaGlsZHJlbiBhcyBwcm9wcy5cclxuICAgIEZsb3dNZXNzYWdlQm94LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgY29udGVudDtcclxuICAgICAgICBpZiAodGhpcy5tc2dib3hWaXNpYmxlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGJ1dHRvbnMgPSBbXTtcclxuICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoYnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b25zLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7IGNsYXNzTmFtZTogXCJtb2RhbC1kaWFsb2ctYnV0dG9uLWJhci1idXR0b25cIiwgdGl0bGU6IFwiQ2FuY2VsXCIsIG9uTW91c2VEb3duOiBmdW5jdGlvbiAoZSkgeyBlLnN0b3BQcm9wYWdhdGlvbigpOyBidXR0b24uaGFuZGxlcigpOyB9IH0sIGJ1dHRvbi5sYWJlbCkpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5tc2dib3hCdXR0b25zOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIF9sb29wXzEoYnV0dG9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250ZW50ID0gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibWVzc2FnZS1ib3gtcmVkYWN0aW9uXCIsIG9uTW91c2VNb3ZlOiBmdW5jdGlvbiAoZSkgeyBfdGhpcy5vbk1vdXNlTW92ZShlKTsgfSwgb25Nb3VzZVVwOiBmdW5jdGlvbiAoZSkgeyBfdGhpcy5vbk1vdXNlVXAoZSk7IH0sIFxyXG4gICAgICAgICAgICAgICAgLy8gb25Nb3VzZURvd249eyhlKSA9PiB7dGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2soZSl9fVxyXG4gICAgICAgICAgICAgICAgb25Db250ZXh0TWVudTogZnVuY3Rpb24gKGUpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyBlLnN0b3BQcm9wYWdhdGlvbigpOyBpZiAoX3RoaXMucHJvcHMub25Db250ZXh0TWVudSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uQ29udGV4dE1lbnUoKTtcclxuICAgICAgICAgICAgICAgIH0gfSB9LFxyXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IFxyXG4gICAgICAgICAgICAgICAgICAgIC8vc3R5bGU9e3N0eWxlfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJtZXNzYWdlLWJveC1jb250ZW50XCIsIHJlZjogZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIChfdGhpcy5zZXREaWFsb2coZWxlbWVudCkpOyB9IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJtZXNzYWdlLWJveC1kaWFsb2dcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcIm1lc3NhZ2UtYm94LWRpYWxvZy1oZWFkZXJcIiwgb25Nb3VzZURvd246IGZ1bmN0aW9uIChlKSB7IF90aGlzLm9uTW91c2VEb3duKGUpOyB9IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IHsgZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiAncm93JywgZmxleEdyb3c6IDEgfSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcIm1lc3NhZ2UtYm94LWRpYWxvZy1oZWFkZXItdGl0bGVcIiB9LCB0aGlzLm1zZ2JveFRpdGxlKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IHsgZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiAncm93JywgbWFyZ2luTGVmdDogJ2F1dG8nLCBmbGV4R3JvdzogMCB9IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUgbWVzc2FnZS1ib3gtZGlhbG9nLWhlYWRlci1idXR0b25cIiwgc3R5bGU6IHsgY3Vyc29yOiAncG9pbnRlcicsIGNvbG9yOiAnI2ZlZmVmZScsIG1hcmdpblJpZ2h0OiAnNXB4JywgZm9udFNpemU6ICcxNHB0JyB9LCB0aXRsZTogXCJDbG9zZVwiLCBvbk1vdXNlRG93bjogZnVuY3Rpb24gKGUpIHsgX3RoaXMuc3RvcEV2ZW50QnViYmxlKGUpOyBfdGhpcy5oaWRlTWVzc2FnZUJveCgpOyB9IH0pKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibWVzc2FnZS1ib3gtZGlhbG9nLWJvZHlcIiB9LCB0aGlzLm1zZ2JveENvbnRlbnQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcIm1vZGFsLWRpYWxvZy1idXR0b24tYmFyXCIgfSwgYnV0dG9ucykpKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH07XHJcbiAgICBGbG93TWVzc2FnZUJveC5wcm90b3R5cGUubW92ZU1lID0gZnVuY3Rpb24gKGxlZnQsIHRvcCkge1xyXG4gICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7XHJcbiAgICAgICAgdGhpcy50b3AgPSB0b3A7IC8vIC0gdGhpcy5ib3guZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb25EaWFsb2coKTtcclxuICAgIH07XHJcbiAgICBGbG93TWVzc2FnZUJveC5wcm90b3R5cGUub25Nb3VzZURvd24gPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIC8vIHRoaXMuc3RvcEV2ZW50QnViYmxlKGUpO1xyXG4gICAgICAgIC8vIGluY2x1ZGUgY29tcG9uZW50IGJvdW5kaW5nIHJlY3QgdG8gYWxsb3cgZm9yIG1vdXNlIG9mZnNldCBpbnRvIGNvbXBvbmVudFxyXG4gICAgICAgIHZhciBjbGllbnRSZWN0ID0gZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgdmFyIG1vdXNlT2Zmc2V0WSA9IGUuY2xpZW50WSAtIGNsaWVudFJlY3QudG9wO1xyXG4gICAgICAgIHRoaXMuZHJhZ0V2ZW50ID0gQ29tbW9uXzEuRHJhZ0V2ZW50LnN0YXJ0KENvbW1vbl8xLmVEcmFnRXZlbnRUeXBlLmRpYWxvZywgdGhpcywgZS5jbGllbnRYIC0gY2xpZW50UmVjdC5sZWZ0LCBtb3VzZU9mZnNldFkpO1xyXG4gICAgfTtcclxuICAgIEZsb3dNZXNzYWdlQm94LnByb3RvdHlwZS5vbk1vdXNlTW92ZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgLy8gdGhpcy5zdG9wRXZlbnRCdWJibGUoZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZHJhZ0V2ZW50LnR5cGUgPT09IENvbW1vbl8xLmVEcmFnRXZlbnRUeXBlLmRpYWxvZykge1xyXG4gICAgICAgICAgICB0aGlzLm1vdmVNZShlLmNsaWVudFggLSB0aGlzLmRyYWdFdmVudC5tb3VzZU9mZnNldFgsIGUuY2xpZW50WSAtIHRoaXMuZHJhZ0V2ZW50Lm1vdXNlT2Zmc2V0WSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZsb3dNZXNzYWdlQm94LnByb3RvdHlwZS5vbk1vdXNlVXAgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIC8vIHRoaXMuc3RvcEV2ZW50QnViYmxlKGUpO1xyXG4gICAgICAgIGlmICh0aGlzLmRyYWdFdmVudC50eXBlID09PSBDb21tb25fMS5lRHJhZ0V2ZW50VHlwZS5kaWFsb2cpIHtcclxuICAgICAgICAgICAgdGhpcy5kcmFnRXZlbnQuZW5kKG51bGwsIGUuY2xpZW50WCwgZS5jbGllbnRZKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZsb3dNZXNzYWdlQm94O1xyXG59KFJlYWN0LkNvbXBvbmVudCkpO1xyXG5leHBvcnRzLkZsb3dNZXNzYWdlQm94ID0gRmxvd01lc3NhZ2VCb3g7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcclxucmVxdWlyZShcIi4vSWNvblBpY2tlci5jc3NcIik7XHJcbi8vIERlY2xhcmF0aW9uIG9mIHRoZSBjb21wb25lbnQgYXMgUmVhY3QgQ2xhc3MgQ29tcG9uZW50XHJcbnZhciBJY29uUGlja2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEljb25QaWNrZXIsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBJY29uUGlja2VyKHByb3BzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuaWNvbnMgPSB7fTtcclxuICAgICAgICBfdGhpcy5zZWxlY3RlZEl0ZW0gPSBfdGhpcy5wcm9wcy5vbkNoYW5nZVZhbHVlO1xyXG4gICAgICAgIF90aGlzLm9uY2hhbmdlID0gX3RoaXMub25jaGFuZ2UuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuYWRkSWNvbiA9IF90aGlzLmFkZEljb24uYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuYWRkSWNvbnMgPSBfdGhpcy5hZGRJY29ucy5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5hZGRJY29ucygpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIEljb25QaWNrZXIucHJvdG90eXBlLm9uY2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IGUudGFyZ2V0LmlubmVyVGV4dDtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHRoaXMuc2VsZWN0ZWRJdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgfTtcclxuICAgIEljb25QaWNrZXIucHJvdG90eXBlLmFkZEljb25zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImFzdGVyaXNrXCIsIFwiQXN0ZXJpc2tcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicGx1c1wiLCBcIlBsdXNcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibWludXNcIiwgXCJNaW51c1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJldXJcIiwgXCJFdXJcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZXVyb1wiLCBcIkV1cm9cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2xvdWRcIiwgXCJDbG91ZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJlbnZlbG9wZVwiLCBcIkVudmVsb3BlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInBlbmNpbFwiLCBcIlBlbmNpbFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJnbGFzc1wiLCBcIkdsYXNzXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm11c2ljXCIsIFwiTXVzaWNcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic2VhcmNoXCIsIFwiU2VhcmNoXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImhlYXJ0XCIsIFwiSGVhcnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic3RhclwiLCBcIlN0YXJcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic3Rhci1lbXB0eVwiLCBcIlN0YXIgRW1wdHlcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidXNlclwiLCBcIlVzZXJcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZmlsbVwiLCBcIkZpbG1cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidGgtbGFyZ2VcIiwgXCJUaCBMYXJnZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0aFwiLCBcIlRoXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRoLWxpc3RcIiwgXCJUaCBMaXN0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm9rXCIsIFwiT2tcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmVtb3ZlXCIsIFwiUmVtb3ZlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInpvb20taW5cIiwgXCJab29tIEluXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInpvb20tb3V0XCIsIFwiWm9vbSBPdXRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwib2ZmXCIsIFwiT2ZmXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNpZ25hbFwiLCBcIlNpZ25hbFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjb2dcIiwgXCJDb2dcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidHJhc2hcIiwgXCJUcmFzaFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJob21lXCIsIFwiSG9tZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmaWxlXCIsIFwiRmlsZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0aW1lXCIsIFwiVGltZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJyb2FkXCIsIFwiUm9hZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJkb3dubG9hZC1hbHRcIiwgXCJEb3dubG9hZCBBbHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZG93bmxvYWRcIiwgXCJEb3dubG9hZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ1cGxvYWRcIiwgXCJVcGxvYWRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaW5ib3hcIiwgXCJJbmJveFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwbGF5LWNpcmNsZVwiLCBcIlBsYXkgQ2lyY2xlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInJlcGVhdFwiLCBcIlJlcGVhdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJyZWZyZXNoXCIsIFwiUmVmcmVzaFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJsaXN0LWFsdFwiLCBcIkxpc3QgQWx0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImxvY2tcIiwgXCJMb2NrXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZsYWdcIiwgXCJGbGFnXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImhlYWRwaG9uZXNcIiwgXCJIZWFkcGhvbmVzXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInZvbHVtZS1vZmZcIiwgXCJWb2x1bWUgT2ZmXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInZvbHVtZS1kb3duXCIsIFwiVm9sdW1lIERvd25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidm9sdW1lLXVwXCIsIFwiVm9sdW1lIFVwXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInFyY29kZVwiLCBcIlFyY29kZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJiYXJjb2RlXCIsIFwiQmFyY29kZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0YWdcIiwgXCJUYWdcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidGFnc1wiLCBcIlRhZ3NcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYm9va1wiLCBcIkJvb2tcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYm9va21hcmtcIiwgXCJCb29rbWFya1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwcmludFwiLCBcIlByaW50XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNhbWVyYVwiLCBcIkNhbWVyYVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmb250XCIsIFwiRm9udFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJib2xkXCIsIFwiQm9sZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJpdGFsaWNcIiwgXCJJdGFsaWNcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidGV4dC1oZWlnaHRcIiwgXCJUZXh0IEhlaWdodFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0ZXh0LXdpZHRoXCIsIFwiVGV4dCBXaWR0aFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJhbGlnbi1sZWZ0XCIsIFwiQWxpZ24gTGVmdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJhbGlnbi1jZW50ZXJcIiwgXCJBbGlnbiBDZW50ZXJcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYWxpZ24tcmlnaHRcIiwgXCJBbGlnbiBSaWdodFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJhbGlnbi1qdXN0aWZ5XCIsIFwiQWxpZ24gSnVzdGlmeVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJsaXN0XCIsIFwiTGlzdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJpbmRlbnQtbGVmdFwiLCBcIkluZGVudCBMZWZ0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImluZGVudC1yaWdodFwiLCBcIkluZGVudCBSaWdodFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmYWNldGltZS12aWRlb1wiLCBcIkZhY2V0aW1lIFZpZGVvXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInBpY3R1cmVcIiwgXCJQaWN0dXJlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm1hcC1tYXJrZXJcIiwgXCJNYXAgTWFya2VyXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImFkanVzdFwiLCBcIkFkanVzdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0aW50XCIsIFwiVGludFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJlZGl0XCIsIFwiRWRpdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzaGFyZVwiLCBcIlNoYXJlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNoZWNrXCIsIFwiQ2hlY2tcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibW92ZVwiLCBcIk1vdmVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic3RlcC1iYWNrd2FyZFwiLCBcIlN0ZXAgQmFja3dhcmRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZmFzdC1iYWNrd2FyZFwiLCBcIkZhc3QgQmFja3dhcmRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYmFja3dhcmRcIiwgXCJCYWNrd2FyZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwbGF5XCIsIFwiUGxheVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwYXVzZVwiLCBcIlBhdXNlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInN0b3BcIiwgXCJTdG9wXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZvcndhcmRcIiwgXCJGb3J3YXJkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZhc3QtZm9yd2FyZFwiLCBcIkZhc3QgRm9yd2FyZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzdGVwLWZvcndhcmRcIiwgXCJTdGVwIEZvcndhcmRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZWplY3RcIiwgXCJFamVjdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjaGV2cm9uLWxlZnRcIiwgXCJDaGV2cm9uIExlZnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2hldnJvbi1yaWdodFwiLCBcIkNoZXZyb24gUmlnaHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicGx1cy1zaWduXCIsIFwiUGx1cyBTaWduXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm1pbnVzLXNpZ25cIiwgXCJNaW51cyBTaWduXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInJlbW92ZS1zaWduXCIsIFwiUmVtb3ZlIFNpZ25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwib2stc2lnblwiLCBcIk9rIFNpZ25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicXVlc3Rpb24tc2lnblwiLCBcIlF1ZXN0aW9uIFNpZ25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaW5mby1zaWduXCIsIFwiSW5mbyBTaWduXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNjcmVlbnNob3RcIiwgXCJTY3JlZW5zaG90XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInJlbW92ZS1jaXJjbGVcIiwgXCJSZW1vdmUgQ2lyY2xlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm9rLWNpcmNsZVwiLCBcIk9rIENpcmNsZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJiYW4tY2lyY2xlXCIsIFwiQmFuIENpcmNsZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJhcnJvdy1sZWZ0XCIsIFwiQXJyb3cgTGVmdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJhcnJvdy1yaWdodFwiLCBcIkFycm93IFJpZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImFycm93LXVwXCIsIFwiQXJyb3cgVXBcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYXJyb3ctZG93blwiLCBcIkFycm93IERvd25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic2hhcmUtYWx0XCIsIFwiU2hhcmUgQWx0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInJlc2l6ZS1mdWxsXCIsIFwiUmVzaXplIEZ1bGxcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmVzaXplLXNtYWxsXCIsIFwiUmVzaXplIFNtYWxsXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImV4Y2xhbWF0aW9uLXNpZ25cIiwgXCJFeGNsYW1hdGlvbiBTaWduXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImdpZnRcIiwgXCJHaWZ0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImxlYWZcIiwgXCJMZWFmXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZpcmVcIiwgXCJGaXJlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImV5ZS1vcGVuXCIsIFwiRXllIE9wZW5cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZXllLWNsb3NlXCIsIFwiRXllIENsb3NlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIndhcm5pbmctc2lnblwiLCBcIldhcm5pbmcgU2lnblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwbGFuZVwiLCBcIlBsYW5lXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNhbGVuZGFyXCIsIFwiQ2FsZW5kYXJcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmFuZG9tXCIsIFwiUmFuZG9tXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNvbW1lbnRcIiwgXCJDb21tZW50XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm1hZ25ldFwiLCBcIk1hZ25ldFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjaGV2cm9uLXVwXCIsIFwiQ2hldnJvbiBVcFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjaGV2cm9uLWRvd25cIiwgXCJDaGV2cm9uIERvd25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmV0d2VldFwiLCBcIlJldHdlZXRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic2hvcHBpbmctY2FydFwiLCBcIlNob3BwaW5nIENhcnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZm9sZGVyLWNsb3NlXCIsIFwiRm9sZGVyIENsb3NlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImZvbGRlci1vcGVuXCIsIFwiRm9sZGVyIE9wZW5cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicmVzaXplLXZlcnRpY2FsXCIsIFwiUmVzaXplIFZlcnRpY2FsXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInJlc2l6ZS1ob3Jpem9udGFsXCIsIFwiUmVzaXplIEhvcml6b250YWxcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaGRkXCIsIFwiSGRkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJ1bGxob3JuXCIsIFwiQnVsbGhvcm5cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYmVsbFwiLCBcIkJlbGxcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2VydGlmaWNhdGVcIiwgXCJDZXJ0aWZpY2F0ZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0aHVtYnMtdXBcIiwgXCJUaHVtYnMgVXBcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidGh1bWJzLWRvd25cIiwgXCJUaHVtYnMgRG93blwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJoYW5kLXJpZ2h0XCIsIFwiSGFuZCBSaWdodFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJoYW5kLWxlZnRcIiwgXCJIYW5kIExlZnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaGFuZC11cFwiLCBcIkhhbmQgVXBcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaGFuZC1kb3duXCIsIFwiSGFuZCBEb3duXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNpcmNsZS1hcnJvdy1yaWdodFwiLCBcIkNpcmNsZSBBcnJvdyBSaWdodFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjaXJjbGUtYXJyb3ctbGVmdFwiLCBcIkNpcmNsZSBBcnJvdyBMZWZ0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNpcmNsZS1hcnJvdy11cFwiLCBcIkNpcmNsZSBBcnJvdyBVcFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjaXJjbGUtYXJyb3ctZG93blwiLCBcIkNpcmNsZSBBcnJvdyBEb3duXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImdsb2JlXCIsIFwiR2xvYmVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwid3JlbmNoXCIsIFwiV3JlbmNoXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRhc2tzXCIsIFwiVGFza3NcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZmlsdGVyXCIsIFwiRmlsdGVyXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJyaWVmY2FzZVwiLCBcIkJyaWVmY2FzZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmdWxsc2NyZWVuXCIsIFwiRnVsbHNjcmVlblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJkYXNoYm9hcmRcIiwgXCJEYXNoYm9hcmRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicGFwZXJjbGlwXCIsIFwiUGFwZXJjbGlwXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImhlYXJ0LWVtcHR5XCIsIFwiSGVhcnQgRW1wdHlcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibGlua1wiLCBcIkxpbmtcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicGhvbmVcIiwgXCJQaG9uZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwdXNocGluXCIsIFwiUHVzaHBpblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ1c2RcIiwgXCJVc2RcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZ2JwXCIsIFwiR2JwXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNvcnRcIiwgXCJTb3J0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNvcnQtYnktYWxwaGFiZXRcIiwgXCJTb3J0IEJ5IEFscGhhYmV0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNvcnQtYnktYWxwaGFiZXQtYWx0XCIsIFwiU29ydCBCeSBBbHBoYWJldCBBbHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic29ydC1ieS1vcmRlclwiLCBcIlNvcnQgQnkgT3JkZXJcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic29ydC1ieS1vcmRlci1hbHRcIiwgXCJTb3J0IEJ5IE9yZGVyIEFsdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzb3J0LWJ5LWF0dHJpYnV0ZXNcIiwgXCJTb3J0IEJ5IEF0dHJpYnV0ZXNcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic29ydC1ieS1hdHRyaWJ1dGVzLWFsdFwiLCBcIlNvcnQgQnkgQXR0cmlidXRlcyBBbHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidW5jaGVja2VkXCIsIFwiVW5jaGVja2VkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImV4cGFuZFwiLCBcIkV4cGFuZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjb2xsYXBzZS1kb3duXCIsIFwiQ29sbGFwc2UgRG93blwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjb2xsYXBzZS11cFwiLCBcIkNvbGxhcHNlIFVwXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImxvZy1pblwiLCBcIkxvZyBJblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmbGFzaFwiLCBcIkZsYXNoXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImxvZy1vdXRcIiwgXCJMb2cgT3V0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm5ldy13aW5kb3dcIiwgXCJOZXcgV2luZG93XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInJlY29yZFwiLCBcIlJlY29yZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzYXZlXCIsIFwiU2F2ZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJvcGVuXCIsIFwiT3BlblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzYXZlZFwiLCBcIlNhdmVkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImltcG9ydFwiLCBcIkltcG9ydFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJleHBvcnRcIiwgXCJFeHBvcnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic2VuZFwiLCBcIlNlbmRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZmxvcHB5LWRpc2tcIiwgXCJGbG9wcHkgRGlza1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmbG9wcHktc2F2ZWRcIiwgXCJGbG9wcHkgU2F2ZWRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZmxvcHB5LXJlbW92ZVwiLCBcIkZsb3BweSBSZW1vdmVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZmxvcHB5LXNhdmVcIiwgXCJGbG9wcHkgU2F2ZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJmbG9wcHktb3BlblwiLCBcIkZsb3BweSBPcGVuXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNyZWRpdC1jYXJkXCIsIFwiQ3JlZGl0IENhcmRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidHJhbnNmZXJcIiwgXCJUcmFuc2ZlclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJjdXRsZXJ5XCIsIFwiQ3V0bGVyeVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJoZWFkZXJcIiwgXCJIZWFkZXJcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY29tcHJlc3NlZFwiLCBcIkNvbXByZXNzZWRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiZWFycGhvbmVcIiwgXCJFYXJwaG9uZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwaG9uZS1hbHRcIiwgXCJQaG9uZSBBbHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidG93ZXJcIiwgXCJUb3dlclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzdGF0c1wiLCBcIlN0YXRzXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNkLXZpZGVvXCIsIFwiU2QgVmlkZW9cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiaGQtdmlkZW9cIiwgXCJIZCBWaWRlb1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzdWJ0aXRsZXNcIiwgXCJTdWJ0aXRsZXNcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic291bmQtc3RlcmVvXCIsIFwiU291bmQgU3RlcmVvXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNvdW5kLWRvbGJ5XCIsIFwiU291bmQgRG9sYnlcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic291bmQtNS0xXCIsIFwiU291bmQgNSAxXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInNvdW5kLTYtMVwiLCBcIlNvdW5kIDYgMVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzb3VuZC03LTFcIiwgXCJTb3VuZCA3IDFcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY29weXJpZ2h0LW1hcmtcIiwgXCJDb3B5cmlnaHQgTWFya1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJyZWdpc3RyYXRpb24tbWFya1wiLCBcIlJlZ2lzdHJhdGlvbiBNYXJrXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNsb3VkLWRvd25sb2FkXCIsIFwiQ2xvdWQgRG93bmxvYWRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY2xvdWQtdXBsb2FkXCIsIFwiQ2xvdWQgVXBsb2FkXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRyZWUtY29uaWZlclwiLCBcIlRyZWUgQ29uaWZlclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0cmVlLWRlY2lkdW91c1wiLCBcIlRyZWUgRGVjaWR1b3VzXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNkXCIsIFwiQ2RcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic2F2ZS1maWxlXCIsIFwiU2F2ZSBGaWxlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm9wZW4tZmlsZVwiLCBcIk9wZW4gRmlsZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJsZXZlbC11cFwiLCBcIkxldmVsIFVwXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImNvcHlcIiwgXCJDb3B5XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInBhc3RlXCIsIFwiUGFzdGVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYWxlcnRcIiwgXCJBbGVydFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJlcXVhbGl6ZXJcIiwgXCJFcXVhbGl6ZXJcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwia2luZ1wiLCBcIktpbmdcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicXVlZW5cIiwgXCJRdWVlblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJwYXduXCIsIFwiUGF3blwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJiaXNob3BcIiwgXCJCaXNob3BcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwia25pZ2h0XCIsIFwiS25pZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImJhYnktZm9ybXVsYVwiLCBcIkJhYnkgRm9ybXVsYVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0ZW50XCIsIFwiVGVudFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJibGFja2JvYXJkXCIsIFwiQmxhY2tib2FyZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJiZWRcIiwgXCJCZWRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiYXBwbGVcIiwgXCJBcHBsZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJlcmFzZVwiLCBcIkVyYXNlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImhvdXJnbGFzc1wiLCBcIkhvdXJnbGFzc1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJsYW1wXCIsIFwiTGFtcFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJkdXBsaWNhdGVcIiwgXCJEdXBsaWNhdGVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicGlnZ3ktYmFua1wiLCBcIlBpZ2d5IEJhbmtcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic2Npc3NvcnNcIiwgXCJTY2lzc29yc1wiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJiaXRjb2luXCIsIFwiQml0Y29pblwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ5ZW5cIiwgXCJZZW5cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwicnVibGVcIiwgXCJSdWJsZVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzY2FsZVwiLCBcIlNjYWxlXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImljZS1sb2xseVwiLCBcIkljZSBMb2xseVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJpY2UtbG9sbHktdGFzdGVkXCIsIFwiSWNlIExvbGx5IFRhc3RlZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJlZHVjYXRpb25cIiwgXCJFZHVjYXRpb25cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwib3B0aW9uLWhvcml6b250YWxcIiwgXCJPcHRpb24gSG9yaXpvbnRhbFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJvcHRpb24tdmVydGljYWxcIiwgXCJPcHRpb24gVmVydGljYWxcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibWVudS1oYW1idXJnZXJcIiwgXCJNZW51IEhhbWJ1cmdlclwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJtb2RhbC13aW5kb3dcIiwgXCJNb2RhbCBXaW5kb3dcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwib2lsXCIsIFwiT2lsXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcImdyYWluXCIsIFwiR3JhaW5cIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic3VuZ2xhc3Nlc1wiLCBcIlN1bmdsYXNzZXNcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwidGV4dC1zaXplXCIsIFwiVGV4dCBTaXplXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRleHQtY29sb3JcIiwgXCJUZXh0IENvbG9yXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRleHQtYmFja2dyb3VuZFwiLCBcIlRleHQgQmFja2dyb3VuZFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJvYmplY3QtYWxpZ24tdG9wXCIsIFwiT2JqZWN0IEFsaWduIFRvcFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJvYmplY3QtYWxpZ24tYm90dG9tXCIsIFwiT2JqZWN0IEFsaWduIEJvdHRvbVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJvYmplY3QtYWxpZ24taG9yaXpvbnRhbFwiLCBcIk9iamVjdCBBbGlnbiBIb3Jpem9udGFsXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm9iamVjdC1hbGlnbi1sZWZ0XCIsIFwiT2JqZWN0IEFsaWduIExlZnRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwib2JqZWN0LWFsaWduLXZlcnRpY2FsXCIsIFwiT2JqZWN0IEFsaWduIFZlcnRpY2FsXCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm9iamVjdC1hbGlnbi1yaWdodFwiLCBcIk9iamVjdCBBbGlnbiBSaWdodFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0cmlhbmdsZS1yaWdodFwiLCBcIlRyaWFuZ2xlIFJpZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRyaWFuZ2xlLWxlZnRcIiwgXCJUcmlhbmdsZSBMZWZ0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcInRyaWFuZ2xlLWJvdHRvbVwiLCBcIlRyaWFuZ2xlIEJvdHRvbVwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJ0cmlhbmdsZS10b3BcIiwgXCJUcmlhbmdsZSBUb3BcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwiY29uc29sZVwiLCBcIkNvbnNvbGVcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwic3VwZXJzY3JpcHRcIiwgXCJTdXBlcnNjcmlwdFwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJzdWJzY3JpcHRcIiwgXCJTdWJzY3JpcHRcIik7XHJcbiAgICAgICAgdGhpcy5hZGRJY29uKFwibWVudS1sZWZ0XCIsIFwiTWVudSBMZWZ0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm1lbnUtcmlnaHRcIiwgXCJNZW51IFJpZ2h0XCIpO1xyXG4gICAgICAgIHRoaXMuYWRkSWNvbihcIm1lbnUtZG93blwiLCBcIk1lbnUgRG93blwiKTtcclxuICAgICAgICB0aGlzLmFkZEljb24oXCJtZW51LXVwXCIsIFwiTWVudSBVcFwiKTtcclxuICAgIH07XHJcbiAgICBJY29uUGlja2VyLnByb3RvdHlwZS5hZGRJY29uID0gZnVuY3Rpb24gKG5hbWUsIGxhYmVsKSB7XHJcbiAgICAgICAgdGhpcy5pY29uc1tuYW1lXSA9IHsgXCJuYW1lXCI6IG5hbWUsIFwibGFiZWxcIjogbGFiZWwgfTtcclxuICAgIH07XHJcbiAgICBJY29uUGlja2VyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgb3B0aW9ucyA9IFtdO1xyXG4gICAgICAgIHZhciBjbHM7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKHRoaXMuaWNvbnMpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgb3B0ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICB2YXIgY2xzXzEgPSAnZ2x5cGhpY29uIGdseXBoaWNvbi0nICsgdGhpcy5pY29uc1tvcHRdLm5hbWUgKyAnIGljb24tcGlja2VyLWljb24nO1xyXG4gICAgICAgICAgICBvcHRpb25zLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHsgb25DbGljazogZnVuY3Rpb24gKGUpIHsgX3RoaXMub25jaGFuZ2UoZSk7IH0gfSxcclxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBjbHNfMSB9KSxcclxuICAgICAgICAgICAgICAgIHRoaXMuaWNvbnNbb3B0XS5uYW1lKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJidG4tZ3JvdXBcIiB9LFxyXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHsgdHlwZTogXCJidXR0b25cIiwgY2xhc3NOYW1lOiBcImJ0biBidG4tZGVmYXVsdCBkcm9wZG93bi10b2dnbGVcIiwgXCJkYXRhLXRvZ2dsZVwiOiBcImRyb3Bkb3duXCIgfSxcclxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiAnZ2x5cGhpY29uIGdseXBoaWNvbi0nICsgdGhpcy5zZWxlY3RlZEl0ZW0gfSksXHJcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJjYXJldFwiIH0pKSxcclxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInVsXCIsIHsgY2xhc3NOYW1lOiBcImRyb3Bkb3duLW1lbnVcIiwgcm9sZTogXCJtZW51XCIgfSwgb3B0aW9ucykpKTtcclxuICAgICAgICAvLyA8c2VsZWN0IGNsYXNzTmFtZT1cIm1vZGFsLWRpYWxvZy1zZWxlY3RcIiBkYXRhLXNob3ctaWNvbj1cInRydWVcIiBvbkNoYW5nZT17KGUpID0+IHt0aGlzLml0ZW1TZWxlY3RlZDsgfX0+XHJcbiAgICAgICAgLy8gICAge29wdGlvbnN9XHJcbiAgICAgICAgLy8gPC9zZWxlY3Q+XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEljb25QaWNrZXI7XHJcbn0oUmVhY3QuQ29tcG9uZW50KSk7XHJcbmV4cG9ydHMuZGVmYXVsdCA9IEljb25QaWNrZXI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkZsb3dDaGFydCA9IGV4cG9ydHMuRmxvd0NoYXJ0Q29sdW1uRGVmaW5pdGlvbiA9IGV4cG9ydHMuZUZsb3dDaGFydFR5cGUgPSB2b2lkIDA7XHJcbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcclxudmFyIEZsb3dCYXNlQ29tcG9uZW50XzEgPSByZXF1aXJlKFwiLi9GbG93QmFzZUNvbXBvbmVudFwiKTtcclxudmFyIEZsb3dGaWVsZF8xID0gcmVxdWlyZShcIi4vRmxvd0ZpZWxkXCIpO1xyXG52YXIgZUZsb3dDaGFydFR5cGU7XHJcbihmdW5jdGlvbiAoZUZsb3dDaGFydFR5cGUpIHtcclxuICAgIGVGbG93Q2hhcnRUeXBlW2VGbG93Q2hhcnRUeXBlW1wiQmFyQ2hhcnRcIl0gPSAwXSA9IFwiQmFyQ2hhcnRcIjtcclxuICAgIGVGbG93Q2hhcnRUeXBlW2VGbG93Q2hhcnRUeXBlW1wiQ29sdW1uQ2hhcnRcIl0gPSAxXSA9IFwiQ29sdW1uQ2hhcnRcIjtcclxuICAgIGVGbG93Q2hhcnRUeXBlW2VGbG93Q2hhcnRUeXBlW1wiR2VvQ2hhcnRcIl0gPSAyXSA9IFwiR2VvQ2hhcnRcIjtcclxuICAgIGVGbG93Q2hhcnRUeXBlW2VGbG93Q2hhcnRUeXBlW1wiUGllQ2hhcnRcIl0gPSAzXSA9IFwiUGllQ2hhcnRcIjtcclxuICAgIGVGbG93Q2hhcnRUeXBlW2VGbG93Q2hhcnRUeXBlW1wiRG9udXRDaGFydFwiXSA9IDRdID0gXCJEb251dENoYXJ0XCI7XHJcbn0pKGVGbG93Q2hhcnRUeXBlID0gZXhwb3J0cy5lRmxvd0NoYXJ0VHlwZSB8fCAoZXhwb3J0cy5lRmxvd0NoYXJ0VHlwZSA9IHt9KSk7XHJcbnZhciBGbG93Q2hhcnRDb2x1bW5EZWZpbml0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmxvd0NoYXJ0Q29sdW1uRGVmaW5pdGlvbihkZXZlbG9wZXJOYW1lLCB0eXBlKSB7XHJcbiAgICAgICAgdGhpcy5kZXZlbG9wZXJOYW1lID0gZGV2ZWxvcGVyTmFtZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEZsb3dDaGFydENvbHVtbkRlZmluaXRpb247XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmxvd0NoYXJ0Q29sdW1uRGVmaW5pdGlvbiA9IEZsb3dDaGFydENvbHVtbkRlZmluaXRpb247XHJcbnZhciBGbG93Q2hhcnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRmxvd0NoYXJ0LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRmxvd0NoYXJ0KHByb3BzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuYXBpS2V5ID0gXCJcIjtcclxuICAgICAgICBfdGhpcy5iZWdpbkNoYXJ0c0FwaSA9IF90aGlzLmJlZ2luQ2hhcnRzQXBpLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLmFwaUxvYWRlZCA9IF90aGlzLmFwaUxvYWRlZC5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5kcmF3Q2hhcnQgPSBfdGhpcy5kcmF3Q2hhcnQuYmluZChfdGhpcyk7XHJcbiAgICAgICAgX3RoaXMuZmxvd01vdmVkID0gX3RoaXMuZmxvd01vdmVkLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIF90aGlzLmFwaUtleSA9IF90aGlzLmdldEF0dHJpYnV0ZShcIkFQSUtleVwiLCBcIlwiKTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBGbG93Q2hhcnQucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgX3N1cGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudC5jYWxsKHRoaXMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5kb250TG9hZEFsbFZhbHVlcygpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby5ldmVudE1hbmFnZXIuYWRkRG9uZUxpc3RlbmVyKHRoaXMuZmxvd01vdmVkLCB0aGlzLmNvbXBvbmVudElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbkNoYXJ0c0FwaSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZsb3dDaGFydC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBfc3VwZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50LmNhbGwodGhpcyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLmV2ZW50TWFuYWdlci5yZW1vdmVEb25lTGlzdGVuZXIodGhpcy5jb21wb25lbnRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0NoYXJ0LnByb3RvdHlwZS5mbG93TW92ZWQgPSBmdW5jdGlvbiAoeGhyLCByZXF1ZXN0KSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbWU7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIG1lID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGlmICh4aHIuaW52b2tlVHlwZSA9PT0gXCJGT1JXQVJEXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sb2FkaW5nU3RhdGUgIT09IEZsb3dCYXNlQ29tcG9uZW50XzEuZUxvYWRpbmdTdGF0ZS5yZWFkeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IG1lLmZsb3dNb3ZlZCh4aHIsIHJlcXVlc3QpOyB9LCA1MDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby5tb2RlbC5wYXJzZUVuZ2luZVJlc3BvbnNlKHhociwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbkNoYXJ0c0FwaSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmxvd0NoYXJ0LnByb3RvdHlwZS5iZWdpbkNoYXJ0c0FwaSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGdvb2dsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGdvb2dsZS5jaGFydHMgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93LkcxM0NoYXJ0TG9hZGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgICAgICAgICAgIHNjcmlwdC5zcmMgPSBcImh0dHBzOi8vd3d3LmdzdGF0aWMuY29tL2NoYXJ0cy9sb2FkZXIuanNcIjtcclxuICAgICAgICAgICAgICAgIHNjcmlwdC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5hcGlMb2FkZWQpO1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5HMTNDaGFydExvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gYWxyZWFkeSBsb2FkaW5nXHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCh0aGlzLmJlZ2luQ2hhcnRzQXBpLCAzMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFwaUxvYWRlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGbG93Q2hhcnQucHJvdG90eXBlLmFwaUxvYWRlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgaWYgKCEoZ29vZ2xlID09PSBudWxsIHx8IGdvb2dsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ29vZ2xlLmNoYXJ0cykgfHwgISgoX2EgPSBnb29nbGUgPT09IG51bGwgfHwgZ29vZ2xlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnb29nbGUudmlzdWFsaXphdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLkdlb0NoYXJ0KSkge1xyXG4gICAgICAgICAgICBnb29nbGUuY2hhcnRzLmxvYWQoJ2N1cnJlbnQnLCB7IHBhY2thZ2VzOiBbJ2NvcmVjaGFydCcsICdnZW9jaGFydCddLCBtYXBzQXBpS2V5OiB0aGlzLmFwaUtleSB9KTtcclxuICAgICAgICAgICAgZ29vZ2xlLmNoYXJ0cy5zZXRPbkxvYWRDYWxsYmFjayh0aGlzLmRyYXdDaGFydCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdDaGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyB5b3UgY2FuIG92ZXJyaWRlIHRoaXMgdG8gYnVpbGQgeW91ciBvd24gZGF0YSAtIHBvcHVsYXRlIGRhdGFUYWJsZVxyXG4gICAgRmxvd0NoYXJ0LnByb3RvdHlwZS5idWlsZERhdGEgPSBmdW5jdGlvbiAoZGF0YVRhYmxlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5tb2RlbC5kYXRhU291cmNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwuZGF0YVNvdXJjZS5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gW107XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wZXJ0eU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3AgPSBpdGVtLnByb3BlcnRpZXNbcHJvcGVydHkuZGV2ZWxvcGVyTmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5LnR5cGUgPT09IEZsb3dGaWVsZF8xLmVDb250ZW50VHlwZS5Db250ZW50TnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHBhcnNlSW50KHByb3AudmFsdWUpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHByb3AudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZGF0YVRhYmxlLnB1c2godmFsdWVzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZsb3dDaGFydC5wcm90b3R5cGUuZHJhd0NoYXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBkYXRhVGFibGUgPSBbXTtcclxuICAgICAgICBkYXRhVGFibGUucHVzaCh0aGlzLmNvbHVtbk5hbWVzKTtcclxuICAgICAgICB0aGlzLmJ1aWxkRGF0YShkYXRhVGFibGUpO1xyXG4gICAgICAgIHRoaXMuY2hhcnREYXRhID0gZ29vZ2xlLnZpc3VhbGl6YXRpb24uYXJyYXlUb0RhdGFUYWJsZShkYXRhVGFibGUpO1xyXG4gICAgICAgIGlmICghdGhpcy5jaGFydCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuY2hhcnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVGbG93Q2hhcnRUeXBlLkJhckNoYXJ0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uQmFyQ2hhcnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5jb21wb25lbnRJZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBlRmxvd0NoYXJ0VHlwZS5Db2x1bW5DaGFydDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0ID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkNvbHVtbkNoYXJ0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuY29tcG9uZW50SWQpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZUZsb3dDaGFydFR5cGUuR2VvQ2hhcnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydCA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5HZW9DaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmNvbXBvbmVudElkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVGbG93Q2hhcnRUeXBlLlBpZUNoYXJ0OlxyXG4gICAgICAgICAgICAgICAgY2FzZSBlRmxvd0NoYXJ0VHlwZS5Eb251dENoYXJ0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uUGllQ2hhcnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5jb21wb25lbnRJZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2hhcnQuZHJhdyh0aGlzLmNoYXJ0RGF0YSwgdGhpcy5vcHRpb25zKTtcclxuICAgIH07XHJcbiAgICBGbG93Q2hhcnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBpZDogdGhpcy5jb21wb25lbnRJZCB9KSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZsb3dDaGFydDtcclxufShGbG93QmFzZUNvbXBvbmVudF8xLkZsb3dCYXNlQ29tcG9uZW50KSk7XHJcbmV4cG9ydHMuRmxvd0NoYXJ0ID0gRmxvd0NoYXJ0O1xyXG4iLCJpbXBvcnQgeyBGbG93RGlzcGxheUNvbHVtbiwgRmxvd09iamVjdERhdGEgfSBmcm9tIFwiZmxvdy1jb21wb25lbnQtbW9kZWxcIjtcclxuaW1wb3J0IENlbGxJdGVtIGZyb20gXCIuL0NlbGxJdGVtXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb3dJdGVtIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBjb2x1bW5zOiBNYXA8c3RyaW5nLENlbGxJdGVtPiA9IG5ldyBNYXAoKTtcclxuICAgIG9iamVjdERhdGE6IEZsb3dPYmplY3REYXRhO1xyXG59IiwiaW1wb3J0IHsgZUNvbnRlbnRUeXBlIH0gZnJvbSBcImZsb3ctY29tcG9uZW50LW1vZGVsXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDZWxsSXRlbSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgbGFiZWw6IHN0cmluZztcclxuICAgIHR5cGU6IGVDb250ZW50VHlwZTtcclxuICAgIG9yaWdpbmFsVmFsdWU6IGFueTtcclxuICAgIG5ld1ZhbHVlOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nICkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbFZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5uZXdWYWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgRmxvd0Rpc3BsYXlDb2x1bW4sIEZsb3dPYmplY3REYXRhLCBGbG93T2JqZWN0RGF0YVByb3BlcnR5IH0gZnJvbSBcImZsb3ctY29tcG9uZW50LW1vZGVsXCI7XHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFNlYXJjaEZpbHRlclRhYmxlIGZyb20gXCIuL1NlYXJjaEZpbHRlclRhYmxlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hGaWx0ZXJUYWJsZVJvdyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxhbnksYW55PiB7XHJcbiAgICBcclxuXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCBjb2xzOiBhbnlbXSA9IFtdO1xyXG5cclxuICAgICAgICBjb25zdCByb290OiBTZWFyY2hGaWx0ZXJUYWJsZSA9IHRoaXMucHJvcHMucm9vdDtcclxuICAgICAgICBjb25zdCBvYmpEYXRhOiAgRmxvd09iamVjdERhdGEgPSByb290LnJvd01hcC5nZXQodGhpcy5wcm9wcy5pZCkub2JqZWN0RGF0YTtcclxuICAgICAgICBjb2xzLnB1c2goXHJcbiAgICAgICAgICAgIDx0ZFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXRhYmxlLWNlbGxcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNoZWNrYm94XCJcclxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhldmVudDogYW55KSA9PiB7cm9vdC50b2dnbGVTZWxlY3QoZXZlbnQsIHRoaXMucHJvcHMuaWQgKX19XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17cm9vdC5zZWxlY3RlZFJvd01hcC5oYXModGhpcy5wcm9wcy5pZCl9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJvb3QuY29sTWFwLmZvckVhY2goKGNvbDogRmxvd0Rpc3BsYXlDb2x1bW4pID0+IHtcclxuICAgICAgICAgICAgY29scy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgPHRkXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXRhYmxlLWNlbGxcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC10YWJsZS1jZWxsLXRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge29iakRhdGEucHJvcGVydGllc1tjb2wuZGV2ZWxvcGVyTmFtZV0udmFsdWV9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8dHJcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC10YWJsZS1yb3dcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7Y29sc30gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEZsb3dEaXNwbGF5Q29sdW1uIH0gZnJvbSBcImZsb3ctY29tcG9uZW50LW1vZGVsXCI7XHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFNlYXJjaEZpbHRlclRhYmxlIGZyb20gXCIuL1NlYXJjaEZpbHRlclRhYmxlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hGaWx0ZXJUYWJsZUhlYWRlcnMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8YW55LGFueT4ge1xyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IGhlYWRlcnM6IGFueVtdID0gW107XHJcblxyXG4gICAgICAgIGNvbnN0IHJvb3Q6IFNlYXJjaEZpbHRlclRhYmxlID0gdGhpcy5wcm9wcy5yb290O1xyXG5cclxuICAgICAgICBpZihyb290LmNvbE1hcC5zaXplID4gMCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzLnB1c2goXHJcbiAgICAgICAgICAgICAgICA8dGhcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtY2hlY2staGVhZGVyXCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jaGVja2JveFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhldmVudDogYW55KSA9PiB7cm9vdC50b2dnbGVTZWxlY3RBbGwoZXZlbnQpfX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC90aD5cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHJvb3QuY29sTWFwLmZvckVhY2goKGNvbDogRmxvd0Rpc3BsYXlDb2x1bW4pID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc29ydEljb246IGFueSA9IHJvb3QuZmlsdGVycy5nZXRTb3J0SWNvbihjb2wuZGV2ZWxvcGVyTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmlsdGVySWNvbjogYW55ID0gcm9vdC5maWx0ZXJzLmdldEZpbHRlckljb24oY29sLmRldmVsb3Blck5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGhlYWRlcnMucHVzaChcclxuICAgICAgICAgICAgICAgICAgICA8dGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNvbHVtbi1oZWFkZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNvbHVtbi1oZWFkZXItd3JhcHBlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtY29sdW1uLWhlYWRlci10b3BcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNvbHVtbi1oZWFkZXItdGl0bGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jb2x1bW4taGVhZGVyLXRpdGxlLWxhYmVsXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2NvbC5sYWJlbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNvbHVtbi1oZWFkZXItYm90dG9tXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jb2x1bW4taGVhZGVyLWZsYWdzXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzb3J0SWNvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1jb2x1bW4taGVhZGVyLWJ1dHRvbnNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2ZpbHRlckljb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90aD5cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHRyXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtY29sdW1uLWhlYWRlcnNcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7aGVhZGVyc30gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufSIsImltcG9ydCBDb2x1bW5Dcml0ZXJpYSBmcm9tIFwiLi9Db2x1bW5Dcml0ZXJpYVwiO1xyXG5pbXBvcnQgQ29sdW1uRmlsdGVycywgeyBlRmlsdGVyRXZlbnQsIGVTb3J0RGlyZWN0aW9uIH0gZnJvbSBcIi4vQ29sdW1uRmlsdGVyc1wiO1xyXG5cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2x1bW5GaWx0ZXIge1xyXG4gICAga2V5OiBzdHJpbmc7XHJcbiAgICBzb3J0OiBlU29ydERpcmVjdGlvbiA9IGVTb3J0RGlyZWN0aW9uLm5vbmU7XHJcbiAgICBwYXJlbnQ6IENvbHVtbkZpbHRlcnM7XHJcbiAgICBjcml0ZXJpYTogQXJyYXk8Q29sdW1uQ3JpdGVyaWE+ID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3Ioa2V5OiBzdHJpbmcsIHBhcmVudDogQ29sdW1uRmlsdGVycyl7XHJcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgdGhpcy5ub3RpZnkgPSB0aGlzLm5vdGlmeS5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyRmlsdGVycygpIHtcclxuICAgICAgICB0aGlzLmNyaXRlcmlhID0gW107XHJcbiAgICAgICAgdGhpcy5ub3RpZnkoZUZpbHRlckV2ZW50LmZpbHRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgbm90aWZ5KGV2ZW50OiBlRmlsdGVyRXZlbnQpIHtcclxuICAgICAgICB0aGlzLnBhcmVudC5ub3RpZnkodGhpcy5rZXksIGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBzb3J0QXNjZW5kaW5nICgpIHtcclxuICAgICAgICB0aGlzLnNvcnQgPSBlU29ydERpcmVjdGlvbi5hc2NlbmRpbmc7XHJcbiAgICAgICAgdGhpcy5ub3RpZnkoZUZpbHRlckV2ZW50LnNvcnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNvcnREZXNjZW5kaW5nICgpIHtcclxuICAgICAgICB0aGlzLnNvcnQgPSBlU29ydERpcmVjdGlvbi5kZXNjZW5kaW5nO1xyXG4gICAgICAgIHRoaXMubm90aWZ5KGVGaWx0ZXJFdmVudC5zb3J0KTtcclxuICAgIH1cclxuXHJcbiAgICBzb3J0VG9nZ2xlICgpIHtcclxuICAgICAgICBzd2l0Y2godGhpcy5zb3J0KSB7XHJcbiAgICAgICAgICAgIGNhc2UgZVNvcnREaXJlY3Rpb24ubm9uZTpcclxuICAgICAgICAgICAgY2FzZSBlU29ydERpcmVjdGlvbi5kZXNjZW5kaW5nOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zb3J0ID0gZVNvcnREaXJlY3Rpb24uYXNjZW5kaW5nO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNvcnQ9ZVNvcnREaXJlY3Rpb24uZGVzY2VuZGluZztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm5vdGlmeShlRmlsdGVyRXZlbnQuc29ydCk7XHJcbiAgICB9XHJcblxyXG4gICAgc29ydE5vbmUgKCkge1xyXG4gICAgICAgIHRoaXMuc29ydCA9IGVTb3J0RGlyZWN0aW9uLm5vbmU7XHJcbiAgICAgICAgdGhpcy5ub3RpZnkoZUZpbHRlckV2ZW50LnNvcnQpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgQ29sdW1uQ3JpdGVyaWEsIHsgZUNvbHVtbkNvbXBhcmF0b3IgfSBmcm9tIFwiLi9Db2x1bW5Dcml0ZXJpYVwiO1xyXG5pbXBvcnQgQ29sdW1uRmlsdGVyIGZyb20gXCIuL0NvbHVtbkZpbHRlclwiO1xyXG5pbXBvcnQgTXVsdGlTZWxlY3QgZnJvbSBcIi4vTXVsdGlTZWxlY3RcIjtcclxuaW1wb3J0IFNlYXJjaEZpbHRlclRhYmxlIGZyb20gXCIuL1NlYXJjaEZpbHRlclRhYmxlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWx0ZXJDb25maWdGb3JtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSxhbnk+IHtcclxuICAgIFxyXG4gICAgZmlsdGVyOiBDb2x1bW5GaWx0ZXI7XHJcbiAgICBuZXdDcml0ZXJpYTogQ29sdW1uQ3JpdGVyaWFbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyID0gdGhpcy5wcm9wcy5maWx0ZXI7XHJcbiAgICAgICAgdGhpcy5uZXdDcml0ZXJpYSA9IFtdO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyLmNyaXRlcmlhLmZvckVhY2goKGNyaXRlcmlhOiBDb2x1bW5Dcml0ZXJpYSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm5ld0NyaXRlcmlhLnB1c2goY3JpdGVyaWEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYWRkQ3JpdGVyaWEgPSB0aGlzLmFkZENyaXRlcmlhLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQ3JpdGVyaWEoKSB7XHJcbiAgICAgICAgdGhpcy5uZXdDcml0ZXJpYS5wdXNoKG5ldyBDb2x1bW5Dcml0ZXJpYShlQ29sdW1uQ29tcGFyYXRvci5lcXVhbFRvLFwiXCIpKTtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0T3B0aW9ucyhjcml0ZXJpYTogQ29sdW1uQ3JpdGVyaWEpIDogYW55IHtcclxuICAgICAgICBsZXQgb3B0aW9uczogYW55W10gPSBbXTtcclxuICAgICAgICBvcHRpb25zLnB1c2goXHJcbiAgICAgICAgICAgIDxvcHRpb25cclxuICAgICAgICAgICAgICAgIHZhbHVlPXtlQ29sdW1uQ29tcGFyYXRvci5lcXVhbFRvfVxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2NyaXRlcmlhLmNvbXBhcmF0b3I9PT1lQ29sdW1uQ29tcGFyYXRvci5lcXVhbFRvfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICBFcXVhbHNcclxuICAgICAgICAgICAgPC9vcHRpb24+LFxyXG4gICAgICAgICAgICA8b3B0aW9uXHJcbiAgICAgICAgICAgICAgICB2YWx1ZT17ZUNvbHVtbkNvbXBhcmF0b3Iubm90RXF1YWxUb31cclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkPXtjcml0ZXJpYS5jb21wYXJhdG9yPT09ZUNvbHVtbkNvbXBhcmF0b3Iubm90RXF1YWxUb31cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgTm90IEVxdWFsIFRvXHJcbiAgICAgICAgICAgIDwvb3B0aW9uPixcclxuICAgICAgICAgICAgPG9wdGlvblxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e2VDb2x1bW5Db21wYXJhdG9yLmNvbnRhaW5zfVxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2NyaXRlcmlhLmNvbXBhcmF0b3I9PT1lQ29sdW1uQ29tcGFyYXRvci5jb250YWluc31cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgQ29udGFpbnNcclxuICAgICAgICAgICAgPC9vcHRpb24+LFxyXG4gICAgICAgICAgICA8b3B0aW9uXHJcbiAgICAgICAgICAgICAgICB2YWx1ZT17ZUNvbHVtbkNvbXBhcmF0b3Iubm90Q29udGFpbnN9XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZD17Y3JpdGVyaWEuY29tcGFyYXRvcj09PWVDb2x1bW5Db21wYXJhdG9yLm5vdENvbnRhaW5zfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICBEb2VzIE5vdCBDb250YWluXHJcbiAgICAgICAgICAgIDwvb3B0aW9uPixcclxuICAgICAgICAgICAgPG9wdGlvblxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e2VDb2x1bW5Db21wYXJhdG9yLnN0YXJ0c1dpdGh9XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZD17Y3JpdGVyaWEuY29tcGFyYXRvcj09PWVDb2x1bW5Db21wYXJhdG9yLnN0YXJ0c1dpdGh9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIFN0YXJ0cyBXaXRoXHJcbiAgICAgICAgICAgIDwvb3B0aW9uPixcclxuICAgICAgICAgICAgPG9wdGlvblxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e2VDb2x1bW5Db21wYXJhdG9yLmVuZHNXaXRofVxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2NyaXRlcmlhLmNvbXBhcmF0b3I9PT1lQ29sdW1uQ29tcGFyYXRvci5lbmRzV2l0aH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgRW5kcyBXaXRoXHJcbiAgICAgICAgICAgIDwvb3B0aW9uPixcclxuICAgICAgICAgICAgPG9wdGlvblxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e2VDb2x1bW5Db21wYXJhdG9yLmlufVxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2NyaXRlcmlhLmNvbXBhcmF0b3I9PT1lQ29sdW1uQ29tcGFyYXRvci5pbn1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgSXMgb25lIG9mXHJcbiAgICAgICAgICAgIDwvb3B0aW9uPixcclxuICAgICAgICAgICAgPG9wdGlvblxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e2VDb2x1bW5Db21wYXJhdG9yLm5vdElufVxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2NyaXRlcmlhLmNvbXBhcmF0b3I9PT1lQ29sdW1uQ29tcGFyYXRvci5ub3RJbn1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgSXMgTm90IE9uZSBPZlxyXG4gICAgICAgICAgICA8L29wdGlvbj5cclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvbHVtblVuaXF1ZXMobmFtZTogc3RyaW5nLCBjcml0ZXJpYTogQ29sdW1uQ3JpdGVyaWEpIDogYW55IHtcclxuICAgICAgICBsZXQgb3B0aW9uczogYW55W10gPSBbXTtcclxuICAgICAgICBjb25zdCByb290OiBTZWFyY2hGaWx0ZXJUYWJsZSA9IHRoaXMucHJvcHMucm9vdDtcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICByb290LmNvbFZhbE1hcC5nZXQobmFtZSkuZm9yRWFjaCgodmFsLGtleSkgPT4ge1xyXG4gICAgICAgICAgICBvcHRpb25zLnB1c2goXHJcbiAgICAgICAgICAgICAgICA8b3B0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2tleX1cclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZD17Y3JpdGVyaWEudmFsdWUuc2V0KGtleSxrZXkpfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIHtrZXl9XHJcbiAgICAgICAgICAgICAgICA8L29wdGlvbj5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH0pO1xyXG4qL1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgIDxzZWxlY3QgXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtZmNmLXNlbGVjdFwiXHJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAge29wdGlvbnN9ICAgIFxyXG4gICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgKi9cclxuICAgICAgICAgICA8TXVsdGlTZWxlY3QgXHJcbiAgICAgICAgICAgICAgICBhbGxJdGVtcz17cm9vdC5jb2xWYWxNYXAuZ2V0KG5hbWUpfVxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJdGVtcz17Y3JpdGVyaWEudmFsdWV9XHJcbiAgICAgICAgICAgLz5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHByZXBDcml0ZXJpYVZhbHVlKGNyaXRlcmlhOiBDb2x1bW5Dcml0ZXJpYSkge1xyXG4gICAgICAgIHN3aXRjaChjcml0ZXJpYS5jb21wYXJhdG9yKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZUNvbHVtbkNvbXBhcmF0b3IuaW46XHJcbiAgICAgICAgICAgIGNhc2UgZUNvbHVtbkNvbXBhcmF0b3Iubm90SW46XHJcbiAgICAgICAgICAgICAgICBjcml0ZXJpYS52YWx1ZSA9IG5ldyBNYXAoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBjcml0ZXJpYS52YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNyaXRlcmlhLnZhbHVlPVwiXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgcm93czogYW55W10gPSBbXTtcclxuICAgICAgICBpZih0aGlzLm5ld0NyaXRlcmlhLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByb3dzLnB1c2goXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWZjZi1yb3dcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtZmNmLWxhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBObyBDcml0ZXJpYSBkZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+IFxyXG4gICAgICAgICAgICApOyBcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubmV3Q3JpdGVyaWEuZm9yRWFjaCgoY3JpdGVyaWE6IENvbHVtbkNyaXRlcmlhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgb3B0aW9uczogYW55W10gPSB0aGlzLmdldE9wdGlvbnMoY3JpdGVyaWEpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNyaXRCb3g6IGFueTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaChjcml0ZXJpYS5jb21wYXJhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlQ29sdW1uQ29tcGFyYXRvci5pbjpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGVDb2x1bW5Db21wYXJhdG9yLm5vdEluOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcml0Qm94ID0gdGhpcy5nZXRDb2x1bW5VbmlxdWVzKHRoaXMucHJvcHMuZGV2ZWxvcGVyTmFtZSxjcml0ZXJpYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcml0Qm94PShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWZjZi1pbnB1dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXtjcml0ZXJpYS52YWx1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGU6IGFueSkgPT4ge2NyaXRlcmlhLnZhbHVlID0gZS50YXJnZXQudmFsdWV9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcm93cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWZjZi1yb3dcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1mY2Ytc2VsZWN0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JpdGVyaWEuY29tcGFyYXRvciA9IHBhcnNlSW50KGUudGFyZ2V0Lm9wdGlvbnNbZS50YXJnZXQuc2VsZWN0ZWRJbmRleF0udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJlcENyaXRlcmlhVmFsdWUoY3JpdGVyaWEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtvcHRpb25zfSAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtjcml0Qm94fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1mY2YtYnV0dG9uIGdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlLXNpZ25cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJSZW1vdmUgY3JpdGVyaWFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV3Q3JpdGVyaWEgPSB0aGlzLm5ld0NyaXRlcmlhLmZpbHRlcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9PiBpdGVtICE9PSBjcml0ZXJpYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiBcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByb3dzLnB1c2goXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1mY2YtYnV0dG9uc1wiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxzcGFuIFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1mY2YtYnV0dG9uIGdseXBoaWNvbiBnbHlwaGljb24tcGx1cy1zaWduXCJcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIkFkZCBjcml0ZXJpYVwiXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5hZGRDcml0ZXJpYX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibW9kYWwtZGlhbG9nLWNvbnRlbnRcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7cm93c31cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0ICcuL011bHRpU2VsZWN0LmNzcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNdWx0aVNlbGVjdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCA8YW55LGFueT4ge1xyXG5cclxuICAgIGV4cGFuZGVkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHMgOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy5zaG93Q2hlY2tib3hlcyA9IHRoaXMuc2hvd0NoZWNrYm94ZXMuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93Q2hlY2tib3hlcygpIHtcclxuICAgICAgICBsZXQgY2hlY2tib3hlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2hlY2tib3hlc1wiKTtcclxuICAgICAgICBpZiAoIXRoaXMuZXhwYW5kZWQpIHtcclxuICAgICAgICAgICAgY2hlY2tib3hlcy5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XHJcbiAgICAgICAgICAgIHRoaXMuZXhwYW5kZWQgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNoZWNrYm94ZXMuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICB0aGlzLmV4cGFuZGVkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlciAoKSB7XHJcbiAgICAgICAgbGV0IGNoZWNrQm94ZXM6IGFueVtdID0gW107XHJcbiAgICAgICAgdGhpcy5wcm9wcy5hbGxJdGVtcy5mb3JFYWNoKChpdGVtOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgY2hlY2tCb3hlcy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNoZWNrYm94LXJvd1wiXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjaGVja2JveC1jaGVja2JveC13cmFwcGVyXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e2l0ZW19IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpdGVtfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWNoZWNrYm94XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMucHJvcHMuc2VsZWN0ZWRJdGVtcy5oYXMoaXRlbSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zZWxlY3RlZEl0ZW1zLnNldChpdGVtLGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjaGVja2JveC1sYWJlbC13cmFwcGVyXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjaGVja2JveC1yb3ctbGFiZWxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aXRlbX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdWx0aXNlbGVjdFwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZWxlY3RCb3hcIiBcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnNob3dDaGVja2JveGVzfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+U2VsZWN0IGFuIG9wdGlvbjwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm92ZXJTZWxlY3RcIlxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjaGVja2JveFNjcm9sbGVyXCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjaGVja2JveGVzXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJjaGVja2JveGVzXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtjaGVja0JveGVzfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgRmxvd0Rpc3BsYXlDb2x1bW4gfSBmcm9tIFwiZmxvdy1jb21wb25lbnQtbW9kZWxcIjtcclxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgU2VhcmNoRmlsdGVyVGFibGUgZnJvbSBcIi4vU2VhcmNoRmlsdGVyVGFibGVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaEZpbHRlclRhYmxlRm9vdGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSxhbnk+IHtcclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHJvb3Q6IFNlYXJjaEZpbHRlclRhYmxlID0gdGhpcy5wcm9wcy5yb290O1xyXG5cclxuICAgICAgICBsZXQgc3VtbWFyeTogc3RyaW5nID0gXCJTZWxlY3RlZCBcIiArIHJvb3Quc2VsZWN0ZWRSb3dNYXAuc2l6ZSArIFwiIG9mIFwiICsgcm9vdC5jdXJyZW50Um93TWFwLnNpemUgKyBcIiBpdGVtcyBmcm9tIGEgdG90YWwgZGF0YXNldCBvZiBcIiArIHJvb3Qucm93TWFwLnNpemU7XHJcbiAgICAgICAgbGV0IHBhZzogc3RyaW5nID0gXCJwYWdlIFwiICsgKHJvb3QuY3VycmVudFJvd1BhZ2UgKyAxKSArIFwiIG9mIFwiICsgcm9vdC5jdXJyZW50Um93UGFnZXMubGVuZ3RoO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICBsZXQgZmlyc3RQYWdlOiBhbnk7XHJcbiAgICAgICAgbGV0IHByZXZQYWdlOiBhbnk7XHJcbiAgICAgICAgbGV0IG5leHRQYWdlOiBhbnk7XHJcbiAgICAgICAgbGV0IGxhc3RQYWdlOiBhbnk7XHJcblxyXG4gICAgICAgIGlmKHJvb3QuY3VycmVudFJvd1BhZ2UgPiAwKXtcclxuICAgICAgICAgICAgZmlyc3RQYWdlID0gKFxyXG4gICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLWZhc3QtYmFja3dhcmQgc2Z0LWZvb3Rlci1wYWdpbmF0aW9uLWJ1dHRvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJGaXJzdCBwYWdlXCJcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtyb290LmZpcnN0UGFnZX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHByZXZQYWdlID0gKFxyXG4gICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXN0ZXAtYmFja3dhcmQgc2Z0LWZvb3Rlci1wYWdpbmF0aW9uLWJ1dHRvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJQcmV2aW91cyBwYWdlXCJcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtyb290LnByZXZpb3VzUGFnZX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmaXJzdFBhZ2UgPSAoXHJcbiAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tZmFzdC1iYWNrd2FyZCBzZnQtZm9vdGVyLXBhZ2luYXRpb24tYnV0dG9uIHNmdC1mb290ZXItcGFnaW5hdGlvbi1idXR0b24tZGlzYWJsZWRcIlxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcHJldlBhZ2UgPSAoXHJcbiAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tc3RlcC1iYWNrd2FyZCBzZnQtZm9vdGVyLXBhZ2luYXRpb24tYnV0dG9uIHNmdC1mb290ZXItcGFnaW5hdGlvbi1idXR0b24tZGlzYWJsZWRcIlxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKHJvb3QuY3VycmVudFJvd1BhZ2UgPCAocm9vdC5jdXJyZW50Um93UGFnZXMubGVuZ3RoIC0xKSl7XHJcbiAgICAgICAgICAgIGxhc3RQYWdlID0gKFxyXG4gICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLWZhc3QtZm9yd2FyZCBzZnQtZm9vdGVyLXBhZ2luYXRpb24tYnV0dG9uXCJcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIkxhc3QgcGFnZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17cm9vdC5sYXN0UGFnZX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIG5leHRQYWdlID0gKFxyXG4gICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXN0ZXAtZm9yd2FyZCBzZnQtZm9vdGVyLXBhZ2luYXRpb24tYnV0dG9uXCJcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIk5leHQgcGFnZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17cm9vdC5uZXh0UGFnZX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsYXN0UGFnZSA9IChcclxuICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1mYXN0LWZvcndhcmQgc2Z0LWZvb3Rlci1wYWdpbmF0aW9uLWJ1dHRvbiBzZnQtZm9vdGVyLXBhZ2luYXRpb24tYnV0dG9uLWRpc2FibGVkXCJcclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIG5leHRQYWdlID0gKFxyXG4gICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXN0ZXAtZm9yd2FyZCBzZnQtZm9vdGVyLXBhZ2luYXRpb24tYnV0dG9uIHNmdC1mb290ZXItcGFnaW5hdGlvbi1idXR0b24tZGlzYWJsZWRcIlxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1mb290ZXJcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWZvb3Rlci1zdW1tYXJ5XCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtZm9vdGVyLXN1bW1hcnktbGFiZWxcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3N1bW1hcnl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LWZvb3Rlci1wYWdpbmF0aW9uXCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7Zmlyc3RQYWdlfVxyXG4gICAgICAgICAgICAgICAgICAgIHtwcmV2UGFnZX1cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzZnQtZm9vdGVyLXBhZ2luYXRpb24tbGFiZWxcIj57cGFnfTwvc3Bhbj4gXHJcbiAgICAgICAgICAgICAgICAgICAge25leHRQYWdlfVxyXG4gICAgICAgICAgICAgICAgICAgIHtsYXN0UGFnZX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBlQ29udGVudFR5cGUsIEZsb3dEaXNwbGF5Q29sdW1uLCBGbG93T2JqZWN0RGF0YSwgRmxvd09iamVjdERhdGFBcnJheSB9IGZyb20gXCJmbG93LWNvbXBvbmVudC1tb2RlbFwiO1xyXG5pbXBvcnQgUm93SXRlbSBmcm9tIFwiLi9Sb3dJdGVtXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RlbEV4cG9ydGVyIHtcclxuICAgIFxyXG4gICAgc3RhdGljIGV4cG9ydChjb2x1bW5zOiBNYXA8c3RyaW5nLEZsb3dEaXNwbGF5Q29sdW1uPiwgZGF0YTogTWFwPHN0cmluZyxSb3dJdGVtPiwgZmlsZU5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBmaWxlOiBzdHJpbmcgPSAnJztcclxuICAgICAgICBsZXQgYm9keTogc3RyaW5nID0gJyc7XHJcbiAgICAgICAgbGV0IGhlYWRlcnM6IHN0cmluZyA9ICcnO1xyXG4gICAgICAgIGxldCByb3c6IHN0cmluZyA9ICcnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGRhdGEuZm9yRWFjaCgoaXRlbTogUm93SXRlbSkgPT4ge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoaGVhZGVycy5sZW5ndGggPT09IDApe1xyXG4gICAgICAgICAgICAgICAgaGVhZGVycyA9IHRoaXMuYnVpbGRIZWFkZXJzKGNvbHVtbnMsaXRlbS5vYmplY3REYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByb3cgPSB0aGlzLmJ1aWxkUm93KGNvbHVtbnMsaXRlbS5vYmplY3REYXRhKVxyXG4gICAgICAgICAgICBib2R5ICs9IHJvdztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZmlsZSA9IGhlYWRlcnMgKyBib2R5O1xyXG5cclxuICAgICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2ZpbGVdLCB7IHR5cGU6ICd0ZXh0L2NzdicgfSk7XHJcbiAgICAgICAgaWYgKG5hdmlnYXRvci5tc1NhdmVCbG9iKSB7IC8vIElFIDEwK1xyXG4gICAgICAgICAgICBuYXZpZ2F0b3IubXNTYXZlQmxvYihibG9iLCBmaWxlTmFtZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICAgICAgaWYgKGxpbmsuZG93bmxvYWQgIT09IHVuZGVmaW5lZCkgeyAvLyBmZWF0dXJlIGRldGVjdGlvblxyXG4gICAgICAgICAgICAgICAgLy8gQnJvd3NlcnMgdGhhdCBzdXBwb3J0IEhUTUw1IGRvd25sb2FkIGF0dHJpYnV0ZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgICAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgdXJsKTtcclxuICAgICAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKCdkb3dubG9hZCcsIGZpbGVOYW1lKTtcclxuICAgICAgICAgICAgICAgIGxpbmsuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTtcclxuICAgICAgICAgICAgICAgIGxpbmsuY2xpY2soKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGJ1aWxkSGVhZGVycyhjb2xzOiBNYXA8c3RyaW5nLEZsb3dEaXNwbGF5Q29sdW1uPiwgdmFsdWVzOiBGbG93T2JqZWN0RGF0YSkgOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBoZWFkZXJzOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgIGNvbHMuZm9yRWFjaCgoY29sOiBGbG93RGlzcGxheUNvbHVtbikgPT4ge1xyXG4gICAgICAgICAgICBzd2l0Y2goY29sLmNvbnRlbnRUeXBlKXtcclxuICAgICAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnRMaXN0OlxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZHJlbjogRmxvd09iamVjdERhdGFBcnJheSA9IHZhbHVlcy5wcm9wZXJ0aWVzW2NvbC5kZXZlbG9wZXJOYW1lXS52YWx1ZSBhcyBGbG93T2JqZWN0RGF0YUFycmF5O1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLml0ZW1zLmZvckVhY2goKGl0ZW06IEZsb3dPYmplY3REYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoZWFkZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgKz0gJywnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgKz0gJ1wiJyArIGl0ZW0ucHJvcGVydGllc1tcIkFUVFJJQlVURV9ESVNQTEFZX05BTUVcIl0udmFsdWUgKyAnXCInO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhlYWRlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzICs9ICcsJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycyArPSAnXCInICsgY29sLmxhYmVsICsgJ1wiJztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGhlYWRlcnMgKz0gJ1xcclxcbic7XHJcbiAgICAgICAgcmV0dXJuIGhlYWRlcnM7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGJ1aWxkUm93KGNvbHM6IE1hcDxzdHJpbmcsRmxvd0Rpc3BsYXlDb2x1bW4+LCB2YWx1ZXM6IEZsb3dPYmplY3REYXRhKSA6IHN0cmluZyB7IFxyXG4gICAgICAgIGxldCByb3c6IHN0cmluZyA9IFwiXCJcclxuICAgICAgICBjb2xzLmZvckVhY2goKGNvbDogRmxvd0Rpc3BsYXlDb2x1bW4pID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoKGNvbC5jb250ZW50VHlwZSl7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVDb250ZW50VHlwZS5Db250ZW50TGlzdDpcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGRyZW46IEZsb3dPYmplY3REYXRhQXJyYXkgPSB2YWx1ZXMucHJvcGVydGllc1tjb2wuZGV2ZWxvcGVyTmFtZV0udmFsdWUgYXMgRmxvd09iamVjdERhdGFBcnJheTtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5pdGVtcy5mb3JFYWNoKChpdGVtOiBGbG93T2JqZWN0RGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdyArPSAnLCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93ICs9ICdcIicgKyBpdGVtLnByb3BlcnRpZXNbXCJBVFRSSUJVVEVfVkFMVUVcIl0udmFsdWUgKyAnXCInO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvdy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdyArPSAnLCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJvdyArPSAnXCInICsgdmFsdWVzLnByb3BlcnRpZXNbY29sLmRldmVsb3Blck5hbWVdLnZhbHVlICsgJ1wiJztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJvdyArPSAnXFxyXFxuJztcclxuICAgICAgICByZXR1cm4gcm93O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgRmxvd0Rpc3BsYXlDb2x1bW4sIEZsb3dPdXRjb21lIH0gZnJvbSBcImZsb3ctY29tcG9uZW50LW1vZGVsXCI7XHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFNlYXJjaEZpbHRlclRhYmxlIGZyb20gXCIuL1NlYXJjaEZpbHRlclRhYmxlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hGaWx0ZXJUYWJsZVJpYmJvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxhbnksYW55PiB7XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgY29uc3Qgcm9vdDogU2VhcmNoRmlsdGVyVGFibGUgPSB0aGlzLnByb3BzLnJvb3Q7XHJcblxyXG4gICAgICAgIGxldCBsZWZ0QnV0dG9uczogYW55W10gPSBbXTtcclxuICAgICAgICBsZXQgcmlnaHRCdXR0b25zOiBhbnlbXSA9IFtdO1xyXG5cclxuICAgICAgICBsZXQgbGFzdE9yZGVyOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGxldCBhZGRlZEV4cGFuZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBhZGRlZENvbnRyYWN0OiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIGFkIGV4cG9ydFxyXG4gICAgICAgIHJpZ2h0QnV0dG9ucy5wdXNoKFxyXG4gICAgICAgICAgICA8ZGl2IFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXJpYmJvbi1idXR0b24td3JhcHBlclwiXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7ZS5zdG9wUHJvcGFnYXRpb24oKTsgcm9vdC5kb0V4cG9ydChyb290LnJvd01hcCl9fVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBcclxuICAgICAgICAgICAgICAgICAgICBrZXk9e1wiZXhwb3J0QWxsXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcImdseXBoaWNvbiBnbHlwaGljb24tZmxvcHB5LXNhdmUgc2Z0LXJpYmJvbi1idXR0b24taWNvblwifSBcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17XCJFeHBvcnQgQWxsXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtcmliYm9uLWJ1dHRvbi1sYWJlbFwiXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge1wiRXhwb3J0IEFsbFwifVxyXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHJvb3Qucm93TWFwLnNpemUgPiByb290LmN1cnJlbnRSb3dNYXAuc2l6ZSkge1xyXG4gICAgICAgICAgICByaWdodEJ1dHRvbnMucHVzaChcclxuICAgICAgICAgICAgICAgIDxkaXYgXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXJpYmJvbi1idXR0b24td3JhcHBlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGU6IGFueSkgPT4ge2Uuc3RvcFByb3BhZ2F0aW9uKCk7IHJvb3QuZG9FeHBvcnQocm9vdC5jdXJyZW50Um93TWFwKX19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17XCJleHBvcnRTaG93blwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wiZ2x5cGhpY29uIGdseXBoaWNvbi1mbG9wcHktc2F2ZSBzZnQtcmliYm9uLWJ1dHRvbi1pY29uXCJ9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17XCJFeHBvcnQgU2hvd25cIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtcmliYm9uLWJ1dHRvbi1sYWJlbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XCJFeHBvcnQgU2hvd25cIn1cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIE9iamVjdC5rZXlzKHJvb3Qub3V0Y29tZXMpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG91dGNvbWU6IEZsb3dPdXRjb21lID0gcm9vdC5vdXRjb21lc1trZXldO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKG91dGNvbWUuaXNCdWxrQWN0aW9uICYmIG91dGNvbWUuZGV2ZWxvcGVyTmFtZSAhPT0gXCJPblNlbGVjdFwiICYmIG91dGNvbWUuZGV2ZWxvcGVyTmFtZSAhPT0gXCJPbkNoYW5nZVwiICYmICFvdXRjb21lLmRldmVsb3Blck5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKFwiY21cIikpIHtcclxuICAgICAgICAgICAgICAgIGlmKG91dGNvbWUuYXR0cmlidXRlc1tcIlJlcXVpcmVzU2VsZWN0ZWRcIl0/LnZhbHVlID09PSBcInRydWVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHJvb3Quc2VsZWN0ZWRSb3dNYXAuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdEJ1dHRvbnMucHVzaChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXJpYmJvbi1idXR0b24td3JhcHBlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGU6IGFueSkgPT4ge3Jvb3QuZG9PdXRjb21lKGtleSwgdW5kZWZpbmVkKX19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17a2V5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wiZ2x5cGhpY29uIGdseXBoaWNvbi1cIiArIChvdXRjb21lLmF0dHJpYnV0ZXNbXCJpY29uXCJdPy52YWx1ZSB8fCBcInBsdXNcIikgKyBcIiBzZnQtcmliYm9uLWJ1dHRvbi1pY29uXCJ9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17b3V0Y29tZS5sYWJlbCB8fCBrZXl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXJpYmJvbi1idXR0b24tbGFiZWxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge291dGNvbWUubGFiZWwgfHwga2V5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRCdXR0b25zLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXJpYmJvbi1idXR0b24td3JhcHBlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGU6IGFueSkgPT4ge3Jvb3QuZG9PdXRjb21lKGtleSwgdW5kZWZpbmVkKX19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17a2V5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wiZ2x5cGhpY29uIGdseXBoaWNvbi1cIiArIChvdXRjb21lLmF0dHJpYnV0ZXNbXCJpY29uXCJdPy52YWx1ZSB8fCBcInBsdXNcIikgKyBcIiBzZnQtcmliYm9uLWJ1dHRvbi1pY29uXCJ9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17b3V0Y29tZS5sYWJlbCB8fCBrZXl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXJpYmJvbi1idXR0b24tbGFiZWxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge291dGNvbWUubGFiZWwgfHwga2V5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYocm9vdC5zZWxlY3RlZFJvd01hcC5zaXplID4gMCkge1xyXG4gICAgICAgICAgICBsZWZ0QnV0dG9ucy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgPGRpdiBcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtcmliYm9uLWJ1dHRvbi13cmFwcGVyXCJcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7ZS5zdG9wUHJvcGFnYXRpb24oKTsgcm9vdC5kb0V4cG9ydChyb290LnNlbGVjdGVkUm93TWFwKX19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17XCJleHBvcnRTZWxlY3RlZFwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wiZ2x5cGhpY29uIGdseXBoaWNvbi1mbG9wcHktc2F2ZSBzZnQtcmliYm9uLWJ1dHRvbi1pY29uXCJ9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17XCJFeHBvcnQgU2VsZWN0ZWRcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtcmliYm9uLWJ1dHRvbi1sYWJlbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XCJFeHBvcnQgU2VsZWN0ZWRcIn1cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXJpYmJvblwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtcmliYm9uLWxlZnQtd3JhcHBlclwiXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtcmliYm9uLXRpdGxlLXdyYXBwZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1yaWJib24tdGl0bGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XCJBdmFpbGFibGUgYWN0aW9uczpcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNmdC1yaWJib24taGJ1dHRvbnMtd3JhcHBlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7bGVmdEJ1dHRvbnN9IFxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXJpYmJvbi1yaWdodC13cmFwcGVyXCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2Z0LXJpYmJvbi10aXRsZS13cmFwcGVyXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtcmliYm9uLXRpdGxlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZnQtcmliYm9uLWhidXR0b25zLXdyYXBwZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3JpZ2h0QnV0dG9uc30gXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+IFxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9